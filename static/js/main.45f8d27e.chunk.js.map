{"version":3,"sources":["context/AppContext.js","components/Analysis/index.js","components/Stats/index.js","components/Logs/index.js","components/Header/index.js","components/Plots/BarPlot.js","components/Plots/PCABarPlot.js","components/Plots/ClusterBarPlot.js","components/Plots/ViolinPlot.js","components/Plots/QCPlotMgr.js","components/Gallery/index.js","components/Plots/utils.js","components/Plots/rainbowvis.js","components/Plots/ScatterPlot.js","components/Plots/StackedHistogram.js","components/Plots/Histogram.js","components/Plots/Cell.js","components/Markers/index.js","App.js","reportWebVitals.js","index.js"],"names":["AppContext","createContext","AppContextProvider","children","useState","gene","mtx","barcode","inputFiles","setInputFiles","qc","fSelection","pca","cluster","tsne","umap","markerGene","params","setParams","wasmInitialized","setWasmInitialized","error","setError","initDims","setInitDims","qcDims","setQcDims","fSelDims","setFSelDims","qcData","setQcData","qcThreshold","setQcThreshold","fSelectionData","setFSelectionData","redDims","setRedDims","defaultRedDims","setDefaultRedDims","plotRedDims","setPlotRedDims","clusterData","setClusterData","selectedCluster","setSelectedCluster","selectedClusterSummary","setSelectedClusterSummary","clusterColors","setClusterColors","clusterRank","setClusterRank","pcaData","setPcaData","pcaVarExp","setPcaVarExp","tsneData","setTsneData","umapData","setUmapData","setGene","reqGene","setReqGene","logs","setLogs","useEffect","window","Worker","postMessage","Provider","value","AnalysisDialog","buttonText","includeFooter","props","isOpen","setIsOpen","handleButtonClick","useCallback","handleClose","useContext","tmpInputFiles","setTmpInputFiles","tmpInputParams","setTmpInputParams","inputText","setInputText","onClick","icon","intent","text","className","onClose","Classes","DIALOG_BODY","large","round","onInputChange","msg","target","files","name","content","position","Position","RIGHT","openOnTargetFocus","placeholder","onValueChange","nval","val","onChange","parseInt","currentTarget","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","style","margin","Stats","Logs","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","hasBackdrop","size","undefined","usePortal","state","setState","outlined","title","DRAWER_BODY","map","x","i","Header","shouldReturnFocusOnClose","align","Alignment","LEFT","BarPlot","container","useRef","data","propwidth","width","color","ymax","Math","max","d","containerEl","current","innerHTML","height","svg","d3","append","attr","range","domain","key","padding","call","selectAll","y","enter","bandwidth","Array","isArray","ref","PCABarPlot","var_exp","chart_data","Object","values","forEach","push","ClusterBarPlot","clusters","tmpColors","setTmpColors","cluster_count","keys","length","cluster_colors","palette","randomColor","luminosity","count","toString","clus","z","ViolinPlot","rdata","nice","label","bins","thresholds","ticks","histogram","max_bin","xNum","colorGradient","interpolator","datum","x0","x1","curve","random","threshold","on","lines","this","QCPlotMgr","props2","Gallery","elevation","Elevation","ONE","getMinMax","arr","Number","MAX_VALUE","min","Rainbow","gradients","minNum","maxNum","colours","setColours","spectrum","Error","increment","firstGradient","ColourGradient","setGradient","setNumberRange","colourGradient","setSpectrum","arguments","setSpectrumByArray","array","colourAt","number","isNaN","TypeError","segment","index","floor","colorAt","minNumber","maxNumber","RangeError","startColour","endColour","calcHex","channelStart_Base16","channelEnd_Base16","num","hex","numRange","cStart_Base10","cPerUnit","c_Base10","getHexColour","string","test","isHexColour","substring","toLowerCase","colourNames","hasOwnProperty","colourStart","colourEnd","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","DimPlot","scatterplot","setScatterplot","clusHighlight","setClusHighlight","showGradient","setShowGradient","exprMinMax","setExprMinMax","tmp_scatterplot","ScatterGL","orbitControls","zoomSpeed","styles","point","scaleDefault","scaleSelected","scaleHover","setPanMode","plot","cluster_mappings","points","metadata","dataset","Dataset","render","setPointColorer","selectedIndices","hoverIndex","expr","gradient","changeRedDim","setInteraction","setSelectMode","minWidth","minHeight","fill","minimal","vertical","disabled","indexOf","xmlns","id","gradientTransform","offset","font","toFixed","StackedHistogram","allCells","filter","clusterCells","join","Histogram","propheight","Cell","minmax","score","colorscale","colorscore","percWidth","border","alignItems","backgroundColor","MarkerPlot","clusSel","setClusSel","clusArrayStacked","setClusArrayStacked","searchInput","setSearchInput","meanMinMax","setMeanMinMax","deltaMinMax","setDeltaMinMax","lfcMinMax","setLfcMinMax","detectedMinMax","setDetectedMinMax","minMaxs","setMinMaxs","means","setMeans","deltas","setDeltas","lfcs","setLfcs","detects","setDetects","markerFilter","setMarkerFilter","prosRecords","setProsRecords","detectedScale","trecs","tmpmeans","mean","tmeanMinMax","parseFloat","tmpdeltas","delta","tdeltaMinMax","tmplfcs","lfc","tlfcsMinMax","tmpdetects","detected","tdetectsMinMax","sortedRows","useMemo","max_clusters","clusArray","handleMarkerFilter","tmp","replace","leftIcon","small","type","e","defaultValue","components","Item","totalCount","itemContent","row","rowexp","expanded","rowExpr","stepSize","App","loading","setLoading","onmessage","payload","Date","getHours","getMinutes","getSeconds","resp","records","genes","delta_d","gtmp","useTallContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.45f8d27e.chunk.js","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\n\nexport const AppContext = createContext(null);\n\nconst AppContextProvider = ({ children }) => {\n  // Input State\n  const [inputFiles, setInputFiles] = useState({\n    gene: null,\n    mtx: null,\n    barcode: null,\n  });\n\n  const [params, setParams] = useState({\n    qc: {\n      \"qc-nmads\": 3\n    },\n    fSelection: {\n      \"fsel-span\": 0.3\n    },\n    pca: {\n      \"pca-npc\": 5\n    },\n    cluster: {\n      \"clus-k\": 10,\n      \"clus-res\": 0.5,\n      \"clus-scheme\": 0,\n    },\n    tsne: {\n      \"tsne-iter\": 500,\n      \"tsne-perp\": 30,\n    },\n    umap: {\n      \"umap-nn\": 15,\n      \"umap-epochs\": 500,\n      \"umap-min_dist\": 0.01,\n      \"umap-approx_nn\": true,\n    },\n    markerGene: {}\n  });\n\n  // wasm state and error \n  const [wasmInitialized, setWasmInitialized] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Response State for various components\n  // dim sizes\n  const [initDims, setInitDims] = useState(null);\n  const [qcDims, setQcDims] = useState(null);\n  const [fSelDims, setFSelDims] = useState(null);\n\n  // QC Data\n  const [qcData, setQcData] = useState(null);\n  const [qcThreshold, setQcThreshold] = useState(null);\n\n  // Feature Selection\n  const [fSelectionData, setFSelectionData] = useState(null);\n\n  // UI dimensions reduction dropdown\n  const [redDims, setRedDims] = useState([]);\n  // which dimension is selected\n  const [defaultRedDims, setDefaultRedDims] = useState(null);\n  // the actual dimensions\n  const [plotRedDims, setPlotRedDims] = useState(null);\n\n  // Cluster Analysis\n  // cluster assignments\n  const [clusterData, setClusterData] = useState(null);\n  // which cluster is selected\n  const [selectedCluster, setSelectedCluster] = useState(null);\n  // cohen, mean scores per gene\n  const [selectedClusterSummary, setSelectedClusterSummary] = useState({});\n  // set cluster colors\n  const [clusterColors, setClusterColors] = useState(null);\n  // set Cluster rank-type\n  const [clusterRank, setClusterRank] = useState(null);\n\n\n  // PCA\n  const [pcaData, setPcaData] = useState(null);\n  const [pcaVarExp, setPcaVarExp] = useState(null);\n\n  // TSNE\n  const [tsneData, setTsneData] = useState(null);\n\n  // UMAP\n  const [umapData, setUmapData] = useState(null);\n\n  // geneExpression\n  // what gene is selected for scatterplot\n  const [gene, setGene] = useState(null);\n  // request gene expression\n  const [reqGene, setReqGene] = useState(null);\n\n  // Logs\n  const [logs, setLogs] = useState([]);\n\n  useEffect(() => {\n\n    if (wasmInitialized && inputFiles.mtx != null) {\n      window.Worker.postMessage({\n        \"type\": \"RUN\",\n        \"payload\": {\n          \"files\": [inputFiles.mtx,\n          inputFiles.barcode ? inputFiles.barcode[0] : [],\n          inputFiles.gene ? inputFiles.gene[0] : []], //mtx, barcode, gene\n          \"params\": params\n        },\n        \"msg\": \"not much to pass\"\n      });\n    }\n  }, [inputFiles, params, wasmInitialized]);\n\n  return (\n    <AppContext.Provider\n      value={{\n        inputFiles, setInputFiles,\n        params, setParams,\n        error, setError,\n        wasmInitialized, setWasmInitialized,\n        pcaData, setPcaData,\n        pcaVarExp, setPcaVarExp,\n        tsneData, setTsneData,\n        umapData, setUmapData,\n        initDims, setInitDims,\n        qcDims, setQcDims,\n        qcData, setQcData,\n        qcThreshold, setQcThreshold,\n        fSelDims, setFSelDims,\n        redDims, setRedDims,\n        defaultRedDims, setDefaultRedDims,\n        plotRedDims, setPlotRedDims,\n        clusterData, setClusterData,\n        fSelectionData, setFSelectionData,\n        logs, setLogs,\n        selectedCluster, setSelectedCluster,\n        selectedClusterSummary, setSelectedClusterSummary,\n        clusterRank, setClusterRank,\n        gene, setGene,\n        clusterColors, setClusterColors,\n        reqGene, setReqGene\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppContextProvider;\n","import { Button, Classes, Dialog, Text, FileInput, NumericInput, \n    Label, H4, Tag, Icon, Position, HTMLSelect } from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport React, { useContext, useState, useCallback } from \"react\";\n\nimport { AppContext } from \"../../context/AppContext\";\nimport \"./Analysis.css\";\n\nfunction AnalysisDialog({\n    buttonText,\n    includeFooter,\n    ...props\n}) {\n    const [isOpen, setIsOpen] = useState(false);\n    const handleButtonClick = useCallback(() => setIsOpen(!isOpen), [isOpen]);\n    const handleClose = useCallback(() => setIsOpen(false), []);\n    const { inputFiles, setInputFiles,\n        params, setParams } = useContext(AppContext);\n\n    let [tmpInputFiles, setTmpInputFiles] = useState(inputFiles);\n    let [tmpInputParams, setTmpInputParams] = useState(params);\n\n    function handleImport() {\n        setParams(tmpInputParams);\n        setInputFiles(tmpInputFiles);\n        handleClose();\n    }\n\n    const [inputText, setInputText] = useState({\n        mtx: \"Choose mtx file...\",\n        gene: \"Choose gene file...\",\n        barcode: \"Choose barcode file...\",\n    });\n\n    // const [popover2State] = React.useState({\n    //     inheritDarkTheme: true,\n    //     interactionKind: \"hover\",\n    //     modifiers: {\n    //         arrow: { enabled: true },\n    //         flip: { enabled: true },\n    //         preventOverflow: { enabled: true },\n    //     },\n    //     placement: \"auto\",\n    //     usePortal: true,\n    //   });\n\n    return (\n        <>\n            <Button onClick={handleButtonClick} icon=\"social-media\" intent=\"primary\" text={buttonText} />\n            <Dialog className=\"analysis-dialog\" {...props} isOpen={isOpen} onClose={handleClose}>\n                <div className={Classes.DIALOG_BODY}>\n                    <div className=\"col\">\n                        <div>\n                            <H4><Tag large={true} round={true}>1</Tag> Import Single cell dataset</H4>\n                            <div className=\"row\">\n                                <Label className=\"row-input\">\n                                    <Text className=\"text-100\">Choose mtx file</Text>\n                                    {/* <br /> */}\n                                    <FileInput text={inputText?.mtx} onInputChange={(msg) => { setInputText({ ...inputText, \"mtx\": msg.target.files[0].name }); setTmpInputFiles({ ...tmpInputFiles, \"mtx\": msg.target.files }) }} />\n                                </Label>\n                                <Label className=\"row-input\">\n                                    <Text className=\"text-100\">Choose gene file</Text>\n                                    {/* <br /> */}\n                                    <FileInput text={inputText?.gene} onInputChange={(msg) => { setInputText({ ...inputText, \"gene\": msg.target.files[0].name }); setTmpInputFiles({ ...tmpInputFiles, \"gene\": msg.target.files }) }} />\n                                </Label>\n                                <Label className=\"row-input\">\n                                    <Text className=\"text-100\">Choose barcode file</Text>\n                                    {/* <br /> */}\n                                    <FileInput text={inputText?.barcode} onInputChange={(msg) => { setInputText({ ...inputText, \"barcode\": msg.target.files[0].name }); setTmpInputFiles({ ...tmpInputFiles, \"barcode\": msg.target.files }) }} />\n                                </Label>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"col\">\n                        <div>\n                            <H4><Tag large={true} round={true}>2</Tag> QC: Generate per cell QC metrics and filter cells</H4>\n                            <div className=\"row\">\n                                <Label className=\"row-input\">\n                                    <Text className=\"text-100\">NMADS\n                                        <Tooltip2 className=\"row-tooltip\" content=\"Number of MADs from the median, to use for defining outliers.(defaults to 3)\" position={Position.RIGHT} openOnTargetFocus={false}>\n                                            <Icon icon=\"help\"></Icon>\n                                        </Tooltip2>\n                                    </Text>\n                                    <NumericInput\n                                        placeholder=\"3\" value={tmpInputParams[\"qc\"][\"qc-nmads\"]}\n                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"qc\": { \"qc-nmads\": nval } }) }} />\n                                </Label>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"col\">\n                        <div>\n                            <H4><Tag large={true} round={true}>3</Tag> Feature Selection: Model the variance of the log-expression values for each gene, accounting for the mean-variance trend</H4>\n                            <div className=\"row\">\n                                <Label className=\"row-input\">\n                                    <Text className=\"text-100\">Span factor\n                                        <Tooltip2 className=\"row-tooltip\" content=\"The span of the LOWESS smoother for fitting the mean-variance trend.(defaults to 0.3)\" position={Position.RIGHT} openOnTargetFocus={false}>\n                                            <Icon icon=\"help\"></Icon>\n                                        </Tooltip2>\n                                    </Text>\n                                    <NumericInput\n                                        placeholder=\"0.3\" value={tmpInputParams[\"fSelection\"][\"fsel-span\"]}\n                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"fSelection\": { \"fsel-span\": nval } }) }} />\n                                </Label>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"col\">\n                        <div>\n                            <H4><Tag large={true} round={true}>4</Tag> PCA: Perform a principal components analysis to obtain per-cell coordinates in low-dimensional space</H4>\n                            <div className=\"row\">\n                                <Label className=\"row-input\">\n                                    <Text className=\"text-100\"># of PCs (defaults to 5)</Text>\n                                    <NumericInput\n                                        placeholder=\"5\" value={tmpInputParams[\"pca\"][\"pca-npc\"]}\n                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"pca\": { \"pca-npc\": nval } }) }} />\n                                </Label>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"col\">\n                        <div>\n                            <H4><Tag large={true} round={true}>5</Tag> Cluster Analysis: Generate SNN graph and cluster cells</H4>\n                            <div className=\"row\">\n                                <Label className=\"row-input\">\n                                    <Text className=\"text-100\"># of neighbors\n                                        <Tooltip2 className=\"row-tooltip\" content=\"Number of neighbors to use to construct the nearest neighbor graph.(defaults to 10)\" position={Position.RIGHT} openOnTargetFocus={false}>\n                                            <Icon icon=\"help\"></Icon>\n                                        </Tooltip2>\n                                    </Text>\n                                    <NumericInput\n                                        placeholder=\"10\" value={tmpInputParams[\"cluster\"][\"clus-k\"]}\n                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"cluster\": { \"clus-k\": nval } }) }} />\n                                </Label>\n                                <Label className=\"row-input\">\n                                    <Text className=\"text-100\">Scheme\n                                        <Tooltip2 className=\"row-tooltip\" content=\"0 for approx, 1 ..., 2 for jaccard index\" position={Position.RIGHT} openOnTargetFocus={false}>\n                                            <Icon icon=\"help\"></Icon>\n                                        </Tooltip2>\n                                    </Text>\n                                    <HTMLSelect onChange={(nval, val) => setTmpInputParams({...tmpInputParams, \"cluster\": { \"clus-scheme\": parseInt(nval?.currentTarget?.value) }})}>\n                                        <option key=\"0\">0</option>\n                                        <option key=\"1\">1</option>\n                                        <option key=\"2\">2</option>\n                                    </HTMLSelect>\n                                </Label>\n                                <Label className=\"row-input\">\n                                    <Text className=\"text-100\">Resolution\n                                        <Tooltip2 className=\"row-tooltip\" content=\"Resolution of the multi-level clustering, used in the modularity calculation.Larger values yield more fine-grained clusters.(defaults to 0.5)\" position={Position.RIGHT} openOnTargetFocus={false}>\n                                            <Icon icon=\"help\"></Icon>\n                                        </Tooltip2>\n                                    </Text>\n                                    <NumericInput\n                                        placeholder=\"0.5\" value={tmpInputParams[\"cluster\"][\"clus-res\"]}\n                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"cluster\": { \"clus-res\": nval } }) }} />\n                                </Label>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"col\">\n                        <div>\n                            <H4><Tag large={true} round={true}>6</Tag> t-SNE: Compute t-SNE embeddings and Visualize cells</H4>\n                            <div className=\"row\">\n                                <Label className=\"row-input\">\n                                    <Text className=\"text-100\">Iterations (defaults to 500)</Text>\n                                    <NumericInput\n                                        placeholder=\"500\" value={tmpInputParams[\"tsne\"][\"tsne-iter\"]}\n                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"tsne\": { \"tsne-iter\": nval } }) }} />\n                                </Label>\n                                <Label className=\"row-input\">\n                                    <Text className=\"text-100\">Perplexity (defaults to 30)</Text>\n                                    <NumericInput\n                                        placeholder=\"30\" value={tmpInputParams[\"tsne\"][\"tsne-perp\"]}\n                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"tsne\": { \"tsne-perp\": nval } }) }} />\n                                </Label>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"col\">\n                        <div>\n                            <H4><Tag large={true} round={true}>6</Tag> UMAP: Compute UMAP embeddings and Visualize cells</H4>\n                            <div className=\"row\">\n                                <Label className=\"row-input\">\n                                    <Text className=\"text-100\">Num of Neighbors (defaults to 15)</Text>\n                                    <NumericInput\n                                        placeholder=\"15\" value={tmpInputParams[\"umap\"][\"umap-nn\"]}\n                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { \"umap-nn\": nval } }) }} />\n                                </Label>\n                                <Label className=\"row-input\">\n                                    <Text className=\"text-100\">Epochs (defaults to 500)</Text>\n                                    <NumericInput\n                                        placeholder=\"500\" value={tmpInputParams[\"umap\"][\"umap-epoch\"]}\n                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { \"umap-epoch\": nval } }) }} />\n                                </Label>\n                                <Label className=\"row-input\">\n                                    <Text className=\"text-100\">Min Distance (defaults to 0.01)</Text>\n                                    <NumericInput\n                                        placeholder=\"0.01\" value={tmpInputParams[\"umap\"][\"umap-min_dist\"]}\n                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { \"umap-min_dist\": nval } }) }} />\n                                </Label>\n                                <Label className=\"row-input\">\n                                    <Text className=\"text-100\">Use Approximate Neighbor Search ? (true for fast UMAP calculation))</Text>\n                                    <NumericInput\n                                        placeholder=\"0.01\" value={tmpInputParams[\"umap\"][\"umap-approx_nn\"]}\n                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { \"umap-approx_nn\": nval } }) }} />\n                                </Label>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n                {includeFooter ? (\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Tooltip2 content=\"Run Analysis\">\n                                <Button icon=\"function\" onClick={handleImport}>Analyze</Button>\n                            </Tooltip2>\n                        </div>\n                    </div>\n                ) : (\n                    <div style={{ margin: \"0 20px\" }}>\n                    </div>\n                )}\n            </Dialog>\n        </>\n    );\n}\n\n\n\nexport default AnalysisDialog;","import { useContext } from 'react';\nimport { AppContext } from '../../context/AppContext';\n\nconst Stats = () => {\n    const { initDims, qcDims } = useContext(AppContext);\n\n    return (\n        <>\n            {\n                <span>\n                    Dataset Dims: {initDims}\n                    {qcDims ?\n                        ` (After QC: ${qcDims})` :\n                        \" (After QC: ??? X ???)\"\n                    }\n                </span>\n            }\n        </>\n    );\n};\n\nexport default Stats;\n","import {\n    Button,\n    Classes,\n    Drawer,\n    Position,\n} from \"@blueprintjs/core\";\nimport React, { useState, useContext } from 'react';\n\nimport { AppContext } from '../../context/AppContext';\n\nconst Logs = () => {\n    const { logs } = useContext(AppContext);\n\n    const [state, setState] = useState({\n        autoFocus: true,\n        canEscapeKeyClose: true,\n        canOutsideClickClose: true,\n        enforceFocus: true,\n        hasBackdrop: true,\n        isOpen: false,\n        position: Position.RIGHT,\n        size: undefined,\n        usePortal: true,\n    });\n\n    const handleOpen = () => setState({ isOpen: true });\n\n    const handleClose = () => setState({ isOpen: false });\n\n    return (\n        <>\n            <Button onClick={handleOpen} icon=\"wrench\" outlined={true}\n                intent=\"warning\">What's happening ?</Button>\n            <Drawer\n                icon=\"info-sign\"\n                onClose={handleClose}\n                title=\"What's happening ?\"\n                {...state}\n            >\n                <div className={Classes.DRAWER_BODY}>\n                    <div className={Classes.DIALOG_BODY}>\n                        <ul className=\"list\">\n                            {\n                                logs.map((x, i) => (\n                                    <li key={i}>{x}</li>\n                                ))\n                            }\n                        </ul>\n                    </div>\n                </div>\n            </Drawer>\n        </>\n    )\n}\n\nexport default Logs;","import {\n  Alignment,\n  Navbar,\n  NavbarDivider,\n  NavbarGroup,\n  NavbarHeading,\n} from \"@blueprintjs/core\";\n\nimport { useState } from 'react';\n\nimport AnalysisDialog from '../Analysis';\nimport Stats from '../Stats';\nimport Logs from '../Logs';\n\nconst Header = () => {\n  const [state] = useState({\n    autoFocus: true,\n    canEscapeKeyClose: true,\n    canOutsideClickClose: true,\n    enforceFocus: true,\n    shouldReturnFocusOnClose: true,\n  });\n\n  return (\n    <>\n      <Navbar className=\"bp3-dark\">\n        <NavbarGroup align={Alignment.LEFT}>\n          <NavbarHeading>SCRAN.JS</NavbarHeading>\n          <NavbarDivider />\n          <span>Analyze Single-cell RNA-seq Datasets</span>\n          <NavbarDivider />\n          <AnalysisDialog\n            icon=\"document\"\n            title=\"Import dataset and update parameters\"\n            buttonText=\"Start Analysis\"\n            includeFooter={true}\n            {...state} />\n          <NavbarDivider />\n          <Stats />\n          <NavbarDivider />\n          <Logs />\n        </NavbarGroup>\n      </Navbar>\n    </>\n  );\n};\n\nexport default Header;\n","import { useEffect, useRef } from \"react\";\nimport * as d3 from 'd3';\n\nconst BarPlot = (props) => {\n    const container = useRef();\n\n    useEffect(() => {\n        let data = props?.data;\n        let propwidth = props?.width;\n        let color = props?.color;\n        let ymax = props?.ymax;\n\n        if(!ymax) {\n            ymax = Math.max(...data.map((d) => { return d.value; }));\n        }\n\n        if (!propwidth) {\n            propwidth = 325;\n        }\n\n        if (!color) {\n            color = \"#00B3A4\";\n        }\n\n        if (!data) return \"\";\n\n        let containerEl = container.current;\n        containerEl.innerHTML = \"\";\n\n        const margin = { top: 10, right: 30, bottom: 30, left: 40 },\n            width = propwidth - margin.left - margin.right,\n            height = 200 - margin.top - margin.bottom;\n\n        const svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                `translate(${margin.left},${margin.top})`);\n\n        var x = d3.scaleBand()\n            .range([0, width])\n            .domain(data.map((d) => { return d.key; }))\n            .padding(0.2);\n\n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x))\n            .selectAll(\"text\")\n            .attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n            .style(\"text-anchor\", \"end\");\n\n        var y = d3.scaleLinear()\n            .domain([0, ymax])\n            .range([height, 0]);\n            \n        svg.append(\"g\")\n            .call(d3.axisLeft(y));\n\n        svg.selectAll(\"bars\")\n            .data(data)\n            .enter()\n            .append(\"rect\")\n            .attr(\"x\", (d) => { return x(d.key); })\n            .attr(\"y\", (d) => { return y(d.value); })\n            .attr(\"width\", x.bandwidth())\n            .attr(\"height\", (d) => { return height - y(d.value); })\n            .attr(\"fill\", (d,i) => {\n                if (Array.isArray(color) ) {\n                    return color[i];\n                }\n                return color;\n            })\n    }, []);\n\n    return (\n        <div ref={container}></div>\n    );\n};\n\nexport default BarPlot;","import BarPlot from './BarPlot';\n\nconst PCABarPlot = (props) => {\n\n    let data = props?.pca?.var_exp;\n\n    if (!data) return \"\";\n\n    let chart_data = [];\n    Object.values(data)?.forEach((x, i) => {\n        chart_data.push({\n            key: i+1,\n            value: x * 100\n        });\n    });\n\n    return (\n        <BarPlot data={chart_data} />\n    );\n};\n\nexport default PCABarPlot;","import { randomColor } from 'randomcolor';\nimport { useContext, useEffect, useState } from 'react';\nimport { AppContext } from '../../context/AppContext';\nimport BarPlot from './BarPlot';\n\nconst ClusterBarPlot = (props) => {\n\n    let data = props?.data?.clusters;\n\n    const { setClusterColors } = useContext(AppContext);\n    const [tmpColors, setTmpColors] = useState(null);\n\n    useEffect(() => {\n        let cluster_count = Object.keys(x).length;\n        let cluster_colors = null;\n        if (cluster_count > Object.keys(palette).length) {\n            cluster_colors = randomColor({ luminosity: 'dark', count: cluster_count + 1 });\n        } else {\n            cluster_colors = palette[cluster_count.toString()];\n        }\n        setTmpColors(cluster_colors);\n    }, []);\n\n    useEffect(() => {\n        setClusterColors(tmpColors);\n    }, [tmpColors]);\n\n    if (!data) return \"\";\n\n\n    const palette = {\n        1: ['#1b9e77'],\n        2: ['#1b9e77', '#d95f02'],\n        3: ['#1b9e77', '#d95f02', '#7570b3'],\n        4: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a'],\n        5: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e'],\n        6: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02'],\n        7: [\n            '#1b9e77',\n            '#d95f02',\n            '#7570b3',\n            '#e7298a',\n            '#66a61e',\n            '#e6ab02',\n            '#a6761d',\n        ],\n        8: [\n            '#1b9e77',\n            '#d95f02',\n            '#7570b3',\n            '#e7298a',\n            '#66a61e',\n            '#e6ab02',\n            '#a6761d',\n            '#666666',\n        ],\n        9: [\n            '#a6cee3',\n            '#1f78b4',\n            '#b2df8a',\n            '#33a02c',\n            '#fb9a99',\n            '#e31a1c',\n            '#fdbf6f',\n            '#ff7f00',\n            '#cab2d6',\n        ],\n        10: [\n            '#a6cee3',\n            '#1f78b4',\n            '#b2df8a',\n            '#33a02c',\n            '#fb9a99',\n            '#e31a1c',\n            '#fdbf6f',\n            '#ff7f00',\n            '#cab2d6',\n            '#6a3d9a',\n        ],\n        11: [\n            '#a6cee3',\n            '#1f78b4',\n            '#b2df8a',\n            '#33a02c',\n            '#fb9a99',\n            '#e31a1c',\n            '#fdbf6f',\n            '#ff7f00',\n            '#cab2d6',\n            '#6a3d9a',\n            '#ffff99',\n        ],\n        12: [\n            '#a6cee3',\n            '#1f78b4',\n            '#b2df8a',\n            '#33a02c',\n            '#fb9a99',\n            '#e31a1c',\n            '#fdbf6f',\n            '#ff7f00',\n            '#cab2d6',\n            '#6a3d9a',\n            '#ffff99',\n            '#b15928',\n        ],\n    };\n\n    let x = {};\n    for (var i = 0; i < data?.length; i++) {\n        var clus = data[i];\n        if (\"CLUS_\" + clus in x) {\n            x[\"CLUS_\" + clus]++;\n        } else {\n            x[\"CLUS_\" + clus] = 0;\n        }\n    }\n\n    let chart_data = [];\n    Object.values(x)?.forEach((z, i) => {\n        chart_data.push({\n            key: i + 1,\n            value: z\n        });\n    });\n\n    return (\n        tmpColors && <BarPlot data={chart_data} color={tmpColors} />\n    );\n};\n\nexport default ClusterBarPlot;","import { useEffect, useRef } from \"react\";\nimport * as d3 from 'd3';\n\n// did not write this on my own complete but modified it\nconst ViolinPlot = (props) => {\n    const container = useRef();\n\n    useEffect(() => {\n\n        let data = props?.rdata;\n        let propwidth = props?.width;\n        let color = props?.color;\n\n        if (!propwidth) {\n            propwidth = 275;\n        }\n\n        if (!color) {\n            color = \"#00B3A4\";\n        }\n\n        if (!data) return \"\";\n\n        let containerEl = container.current;\n        containerEl.innerHTML = \"\";\n\n        const margin = { top: 10, right: 30, bottom: 30, left: 40 },\n            width = propwidth - margin.left - margin.right,\n            height = 200 - margin.top - margin.bottom;\n\n        const svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                `translate(${margin.left},${margin.top})`);\n\n        var y = d3.scaleLinear()\n            .domain(props?.range)\n            .range([height, 0]).nice();\n\n        svg.append(\"g\").call(d3.axisLeft(y))\n\n        var x = d3.scaleBand()\n            .range([0, width])\n            .domain([props?.label])\n            .padding(0.05)\n\n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x))\n\n        var histogram = d3.histogram()\n            .domain(y.domain())\n            .thresholds(y.ticks(20))\n            .value(d => d)\n\n        let bins = histogram(data);\n        var max_bin = d3.max(bins, (d) => { return d.length; })\n\n        var xNum = d3.scaleLinear()\n            .range([0, x.bandwidth()])\n            .domain([-max_bin, max_bin])\n\n        var colorGradient = d3.scaleSequential()\n            .interpolator(d3.interpolateInferno)\n            .domain(props?.range)\n\n        svg\n            .selectAll(\"violins\")\n            .data([props?.label])\n            .enter()\n            .append(\"g\")\n            .attr(\"transform\", (d) => { return (\"translate(\" + x(d) + \" ,0)\") })\n            .append(\"path\")\n            .datum(() => { return bins })\n            .style(\"stroke\", \"none\")\n            .style(\"fill\", \"#A7B6C2\")\n            .attr(\"d\", d3.area()\n                .x0(xNum(0))\n                .x1((d) => { return (xNum(d.length)) })\n                .y((d) => { return (y(d.x0)) })\n                .curve(d3.curveCatmullRom)\n            );\n\n        var jitterWidth = 70;\n        svg\n            .selectAll(\"jitter\")\n            .data(data)\n            .enter()\n            .append(\"circle\")\n            .attr(\"cx\", (d) => { return (x(props?.label) + x.bandwidth() / 2 - Math.random() * jitterWidth) })\n            .attr(\"cy\", (d) => { return (y(d)) })\n            .attr(\"r\", 3)\n            .style(\"fill\", (d) => { return (colorGradient(d)) })\n            .attr(\"stroke\", \"white\");\n\n        svg\n            .selectAll(\"threshold\")\n            .data([props?.threshold])\n            .enter()\n            .append(\"line\")\n            .attr(\"transform\", () => { return (\"translate(\" + x(props?.label) + \" ,0)\") })\n            .attr(\"class\", \"threshold\")\n            .attr(\"x1\", 5)\n            .attr(\"y1\", (d) => y(d))\n            .attr(\"x2\", x.bandwidth() - 5)\n            .attr(\"y2\", (d) => y(d))\n            .attr(\"stroke-width\", 2)\n            .attr(\"stroke\", \"Orange\")\n            .on(\"mouseover\", function () {\n                var lines = d3.select(this);\n                lines.attr(\"stroke\", \"black\");\n                lines.attr(\"stroke-width\", \"8\");\n            })\n            .on(\"mouseout\", function () {\n                var lines = d3.select(this);\n                lines.attr(\"stroke\", \"Orange\");\n                lines.attr(\"stroke-width\", \"5\");\n            });\n    }, []);\n\n    return (\n        <div ref={container}></div>\n    );\n};\n\nexport default ViolinPlot;","import ViolinPlot from './ViolinPlot';\nimport './QCPlots.css';\n\nconst QCPlotMgr = (props) => {\n\n    let qcData = props.data;\n\n    return (\n        <div className=\"qc-plots\">\n            {\n                [\"sums\", \"detected\", \"proportion\"].map(x => {\n                    const props2 = {\n                        \"threshold\": qcData?.[\"thresholds\"]?.[x],\n                        \"range\": qcData?.[\"ranges\"]?.[x],\n                        \"label\": x,\n                        \"rdata\": qcData?.[\"data\"]?.[x]\n                    }\n                    return (\n                        <div key={x}>\n                            <ViolinPlot {...props2} />\n                        </div>)\n                })\n            }\n        </div>\n    );\n};\n\nexport default QCPlotMgr;","import React from \"react\";\nimport PCABarPlot from \"../Plots/PCABarPlot\";\nimport ClusterBarPlot from \"../Plots/ClusterBarPlot\";\nimport { useContext } from 'react';\nimport { AppContext } from './../../context/AppContext';\nimport { Card, Elevation, Callout } from \"@blueprintjs/core\";\nimport QCPlotMgr from \"../Plots/QCPlotMgr\";\nimport Stats from '../Stats';\n\nimport './Gallery.css';\n\nconst Gallery = () => {\n  const { pcaVarExp, qcData, clusterData } = useContext(AppContext);\n\n  return (\n    <>\n      <div className=\"gallery-cont\">\n        {/* <Callout className=\"gallery-text\" title=\"Analysis results\">\n          This sections shows visualizations to explore the performance\n          or metrics at each step of the analysis. <br />\n          <Stats />\n        </Callout> */}\n        {\n          clusterData ?\n            <Card className=\"gallery-elem\" elevation={Elevation.ONE}>\n              <h5># of cells per cluster</h5>\n              <ClusterBarPlot data={clusterData} />\n            </Card>\n            : \"\"\n        }\n        {\n          pcaVarExp ?\n            <Card className=\"gallery-elem\" elevation={Elevation.ONE}>\n              <h5>PCA (% variance explained)</h5>\n              <PCABarPlot pca={pcaVarExp} />\n            </Card>\n            : \"\"\n        }\n        {\n          qcData && qcData?.[\"thresholds\"] ?\n            <Card className=\"gallery-elem\" elevation={Elevation.ONE}>\n              <h5>QC Statistics</h5>\n              <QCPlotMgr data={qcData}/>\n            </Card>\n            : \"\"\n        }\n      </div>\n    </>\n  );\n};\n\nexport default Gallery;\n","const getMinMax = (arr) => {\n    var max = -Number.MAX_VALUE,\n        min = Number.MAX_VALUE;\n    arr.forEach(function (x) {\n        if (max < x) {\n            max = x;\n        }\n        if (min > x) {\n            min = x;\n        }\n    });\n    return [min, max];\n}\n\nexport default getMinMax;","/*\nRainbowVis-JS \nReleased under Eclipse Public License - v 1.0\n*/\n\nexport default function Rainbow() {\n\t\"use strict\";\n\tvar gradients = null;\n\tvar minNum = 0;\n\tvar maxNum = 100;\n\tvar colours = ['ff0000', 'ffff00', '00ff00', '0000ff'];\n\tsetColours(colours);\n\n\tfunction setColours(spectrum) {\n\t\tif (spectrum.length < 2) {\n\t\t\tthrow new Error('Rainbow must have two or more colours.');\n\t\t} else {\n\t\t\tvar increment = (maxNum - minNum) / (spectrum.length - 1);\n\t\t\tvar firstGradient = new ColourGradient();\n\t\t\tfirstGradient.setGradient(spectrum[0], spectrum[1]);\n\t\t\tfirstGradient.setNumberRange(minNum, minNum + increment);\n\t\t\tgradients = [firstGradient];\n\n\t\t\tfor (var i = 1; i < spectrum.length - 1; i++) {\n\t\t\t\tvar colourGradient = new ColourGradient();\n\t\t\t\tcolourGradient.setGradient(spectrum[i], spectrum[i + 1]);\n\t\t\t\tcolourGradient.setNumberRange(minNum + increment * i, minNum + increment * (i + 1));\n\t\t\t\tgradients[i] = colourGradient;\n\t\t\t}\n\n\t\t\tcolours = spectrum;\n\t\t}\n\t}\n\n\tthis.setSpectrum = function () {\n\t\tsetColours(arguments);\n\t\treturn this;\n\t}\n\n\tthis.setSpectrumByArray = function (array) {\n\t\tsetColours(array);\n\t\treturn this;\n\t}\n\n\tthis.colourAt = function (number) {\n\t\tif (isNaN(number)) {\n\t\t\tthrow new TypeError(number + ' is not a number');\n\t\t} else if (gradients.length === 1) {\n\t\t\treturn gradients[0].colourAt(number);\n\t\t} else {\n\t\t\tvar segment = (maxNum - minNum) / (gradients.length);\n\t\t\tvar index = Math.min(Math.floor((Math.max(number, minNum) - minNum) / segment), gradients.length - 1);\n\t\t\treturn gradients[index].colourAt(number);\n\t\t}\n\t}\n\n\tthis.colorAt = this.colourAt;\n\n\tthis.setNumberRange = function (minNumber, maxNumber) {\n\t\tif (maxNumber > minNumber) {\n\t\t\tminNum = minNumber;\n\t\t\tmaxNum = maxNumber;\n\t\t\tsetColours(colours);\n\t\t} else {\n\t\t\tthrow new RangeError('maxNumber (' + maxNumber + ') is not greater than minNumber (' + minNumber + ')');\n\t\t}\n\t\treturn this;\n\t}\n}\n\nfunction ColourGradient() {\n\t\"use strict\";\n\tvar startColour = 'ff0000';\n\tvar endColour = '0000ff';\n\tvar minNum = 0;\n\tvar maxNum = 100;\n\n\tthis.setGradient = function (colourStart, colourEnd) {\n\t\tstartColour = getHexColour(colourStart);\n\t\tendColour = getHexColour(colourEnd);\n\t}\n\n\tthis.setNumberRange = function (minNumber, maxNumber) {\n\t\tif (maxNumber > minNumber) {\n\t\t\tminNum = minNumber;\n\t\t\tmaxNum = maxNumber;\n\t\t} else {\n\t\t\tthrow new RangeError('maxNumber (' + maxNumber + ') is not greater than minNumber (' + minNumber + ')');\n\t\t}\n\t}\n\n\tthis.colourAt = function (number) {\n\t\treturn calcHex(number, startColour.substring(0, 2), endColour.substring(0, 2))\n\t\t\t+ calcHex(number, startColour.substring(2, 4), endColour.substring(2, 4))\n\t\t\t+ calcHex(number, startColour.substring(4, 6), endColour.substring(4, 6));\n\t}\n\n\tfunction calcHex(number, channelStart_Base16, channelEnd_Base16) {\n\t\tvar num = number;\n\t\tif (num < minNum) {\n\t\t\tnum = minNum;\n\t\t}\n\t\tif (num > maxNum) {\n\t\t\tnum = maxNum;\n\t\t}\n\t\tvar numRange = maxNum - minNum;\n\t\tvar cStart_Base10 = parseInt(channelStart_Base16, 16);\n\t\tvar cEnd_Base10 = parseInt(channelEnd_Base16, 16);\n\t\tvar cPerUnit = (cEnd_Base10 - cStart_Base10) / numRange;\n\t\tvar c_Base10 = Math.round(cPerUnit * (num - minNum) + cStart_Base10);\n\t\treturn formatHex(c_Base10.toString(16));\n\t}\n\n\tfunction formatHex(hex) {\n\t\tif (hex.length === 1) {\n\t\t\treturn '0' + hex;\n\t\t} else {\n\t\t\treturn hex;\n\t\t}\n\t}\n\n\tfunction isHexColour(string) {\n\t\tvar regex = /^#?[0-9a-fA-F]{6}$/i;\n\t\treturn regex.test(string);\n\t}\n\n\tfunction getHexColour(string) {\n\t\tif (isHexColour(string)) {\n\t\t\treturn string.substring(string.length - 6, string.length);\n\t\t} else {\n\t\t\tvar name = string.toLowerCase();\n\t\t\tif (colourNames.hasOwnProperty(name)) {\n\t\t\t\treturn colourNames[name];\n\t\t\t}\n\t\t\tthrow new Error(string + ' is not a valid colour.');\n\t\t}\n\t}\n\n\t// Extended list of CSS colornames s taken from\n\t// http://www.w3.org/TR/css3-color/#svg-color\n\tvar colourNames = {\n\t\taliceblue: \"F0F8FF\",\n\t\tantiquewhite: \"FAEBD7\",\n\t\taqua: \"00FFFF\",\n\t\taquamarine: \"7FFFD4\",\n\t\tazure: \"F0FFFF\",\n\t\tbeige: \"F5F5DC\",\n\t\tbisque: \"FFE4C4\",\n\t\tblack: \"000000\",\n\t\tblanchedalmond: \"FFEBCD\",\n\t\tblue: \"0000FF\",\n\t\tblueviolet: \"8A2BE2\",\n\t\tbrown: \"A52A2A\",\n\t\tburlywood: \"DEB887\",\n\t\tcadetblue: \"5F9EA0\",\n\t\tchartreuse: \"7FFF00\",\n\t\tchocolate: \"D2691E\",\n\t\tcoral: \"FF7F50\",\n\t\tcornflowerblue: \"6495ED\",\n\t\tcornsilk: \"FFF8DC\",\n\t\tcrimson: \"DC143C\",\n\t\tcyan: \"00FFFF\",\n\t\tdarkblue: \"00008B\",\n\t\tdarkcyan: \"008B8B\",\n\t\tdarkgoldenrod: \"B8860B\",\n\t\tdarkgray: \"A9A9A9\",\n\t\tdarkgreen: \"006400\",\n\t\tdarkgrey: \"A9A9A9\",\n\t\tdarkkhaki: \"BDB76B\",\n\t\tdarkmagenta: \"8B008B\",\n\t\tdarkolivegreen: \"556B2F\",\n\t\tdarkorange: \"FF8C00\",\n\t\tdarkorchid: \"9932CC\",\n\t\tdarkred: \"8B0000\",\n\t\tdarksalmon: \"E9967A\",\n\t\tdarkseagreen: \"8FBC8F\",\n\t\tdarkslateblue: \"483D8B\",\n\t\tdarkslategray: \"2F4F4F\",\n\t\tdarkslategrey: \"2F4F4F\",\n\t\tdarkturquoise: \"00CED1\",\n\t\tdarkviolet: \"9400D3\",\n\t\tdeeppink: \"FF1493\",\n\t\tdeepskyblue: \"00BFFF\",\n\t\tdimgray: \"696969\",\n\t\tdimgrey: \"696969\",\n\t\tdodgerblue: \"1E90FF\",\n\t\tfirebrick: \"B22222\",\n\t\tfloralwhite: \"FFFAF0\",\n\t\tforestgreen: \"228B22\",\n\t\tfuchsia: \"FF00FF\",\n\t\tgainsboro: \"DCDCDC\",\n\t\tghostwhite: \"F8F8FF\",\n\t\tgold: \"FFD700\",\n\t\tgoldenrod: \"DAA520\",\n\t\tgray: \"808080\",\n\t\tgreen: \"008000\",\n\t\tgreenyellow: \"ADFF2F\",\n\t\tgrey: \"808080\",\n\t\thoneydew: \"F0FFF0\",\n\t\thotpink: \"FF69B4\",\n\t\tindianred: \"CD5C5C\",\n\t\tindigo: \"4B0082\",\n\t\tivory: \"FFFFF0\",\n\t\tkhaki: \"F0E68C\",\n\t\tlavender: \"E6E6FA\",\n\t\tlavenderblush: \"FFF0F5\",\n\t\tlawngreen: \"7CFC00\",\n\t\tlemonchiffon: \"FFFACD\",\n\t\tlightblue: \"ADD8E6\",\n\t\tlightcoral: \"F08080\",\n\t\tlightcyan: \"E0FFFF\",\n\t\tlightgoldenrodyellow: \"FAFAD2\",\n\t\tlightgray: \"D3D3D3\",\n\t\tlightgreen: \"90EE90\",\n\t\tlightgrey: \"D3D3D3\",\n\t\tlightpink: \"FFB6C1\",\n\t\tlightsalmon: \"FFA07A\",\n\t\tlightseagreen: \"20B2AA\",\n\t\tlightskyblue: \"87CEFA\",\n\t\tlightslategray: \"778899\",\n\t\tlightslategrey: \"778899\",\n\t\tlightsteelblue: \"B0C4DE\",\n\t\tlightyellow: \"FFFFE0\",\n\t\tlime: \"00FF00\",\n\t\tlimegreen: \"32CD32\",\n\t\tlinen: \"FAF0E6\",\n\t\tmagenta: \"FF00FF\",\n\t\tmaroon: \"800000\",\n\t\tmediumaquamarine: \"66CDAA\",\n\t\tmediumblue: \"0000CD\",\n\t\tmediumorchid: \"BA55D3\",\n\t\tmediumpurple: \"9370DB\",\n\t\tmediumseagreen: \"3CB371\",\n\t\tmediumslateblue: \"7B68EE\",\n\t\tmediumspringgreen: \"00FA9A\",\n\t\tmediumturquoise: \"48D1CC\",\n\t\tmediumvioletred: \"C71585\",\n\t\tmidnightblue: \"191970\",\n\t\tmintcream: \"F5FFFA\",\n\t\tmistyrose: \"FFE4E1\",\n\t\tmoccasin: \"FFE4B5\",\n\t\tnavajowhite: \"FFDEAD\",\n\t\tnavy: \"000080\",\n\t\toldlace: \"FDF5E6\",\n\t\tolive: \"808000\",\n\t\tolivedrab: \"6B8E23\",\n\t\torange: \"FFA500\",\n\t\torangered: \"FF4500\",\n\t\torchid: \"DA70D6\",\n\t\tpalegoldenrod: \"EEE8AA\",\n\t\tpalegreen: \"98FB98\",\n\t\tpaleturquoise: \"AFEEEE\",\n\t\tpalevioletred: \"DB7093\",\n\t\tpapayawhip: \"FFEFD5\",\n\t\tpeachpuff: \"FFDAB9\",\n\t\tperu: \"CD853F\",\n\t\tpink: \"FFC0CB\",\n\t\tplum: \"DDA0DD\",\n\t\tpowderblue: \"B0E0E6\",\n\t\tpurple: \"800080\",\n\t\tred: \"FF0000\",\n\t\trosybrown: \"BC8F8F\",\n\t\troyalblue: \"4169E1\",\n\t\tsaddlebrown: \"8B4513\",\n\t\tsalmon: \"FA8072\",\n\t\tsandybrown: \"F4A460\",\n\t\tseagreen: \"2E8B57\",\n\t\tseashell: \"FFF5EE\",\n\t\tsienna: \"A0522D\",\n\t\tsilver: \"C0C0C0\",\n\t\tskyblue: \"87CEEB\",\n\t\tslateblue: \"6A5ACD\",\n\t\tslategray: \"708090\",\n\t\tslategrey: \"708090\",\n\t\tsnow: \"FFFAFA\",\n\t\tspringgreen: \"00FF7F\",\n\t\tsteelblue: \"4682B4\",\n\t\ttan: \"D2B48C\",\n\t\tteal: \"008080\",\n\t\tthistle: \"D8BFD8\",\n\t\ttomato: \"FF6347\",\n\t\tturquoise: \"40E0D0\",\n\t\tviolet: \"EE82EE\",\n\t\twheat: \"F5DEB3\",\n\t\twhite: \"FFFFFF\",\n\t\twhitesmoke: \"F5F5F5\",\n\t\tyellow: \"FFFF00\",\n\t\tyellowgreen: \"9ACD32\"\n\t}\n}\n\n// if (typeof module !== 'undefined') {\n//   module.exports = Rainbow;\n// }\n","import { ScatterGL } from 'scatter-gl';\nimport { useEffect, useRef, useContext, useState } from 'react';\nimport { ControlGroup, Button, Icon, ButtonGroup, Callout } from \"@blueprintjs/core\";\n\nimport { AppContext } from '../../context/AppContext';\nimport getMinMax from './utils';\n\nimport Rainbow from './rainbowvis';\n\nimport \"./ScatterPlot.css\";\n\nconst DimPlot = () => {\n    const container = useRef();\n    const [scatterplot, setScatterplot] = useState(null);\n    const [clusHighlight, setClusHighlight] = useState(null);\n    const [showGradient, setShowGradient] = useState(false);\n    const [exprMinMax, setExprMinMax] = useState(null);\n    // const scoreColors = [\"#F6F6F6\", \"#3399FF\"];\n    const { plotRedDims, redDims, defaultRedDims, setDefaultRedDims, clusterData,\n        tsneData, umapData, setPlotRedDims, clusterColors,\n        gene, selectedClusterSummary } = useContext(AppContext);\n\n    useEffect(() => {\n\n        const containerEl = container.current;\n\n        if (containerEl) {\n\n            let tmp_scatterplot = scatterplot;\n\n            if (!tmp_scatterplot) {\n                const containerEl = container.current;\n\n                containerEl.style.width = \"95%\";\n                containerEl.style.height = \"95%\";\n\n                let lastSelectedPoints = [];\n\n                tmp_scatterplot = new ScatterGL(containerEl, {\n                    // onClick: (point) => {\n                    //     console.log(`click ${point}`);\n                    // },\n                    // onHover: (point) => {\n                    //     console.log(`hover ${point}`);\n                    // },\n                    // onSelect: (points) => {\n                    //     let message = '';\n                    //     if (points.length === 0 && lastSelectedPoints.length === 0) {\n                    //         message = 'no selection';\n                    //     } else if (points.length === 0 && lastSelectedPoints.length > 0) {\n                    //         message = 'deselected';\n                    //     } else if (points.length === 1) {\n                    //         message = `selected ${points}`;\n                    //     } else {\n                    //         message = `selected ${points.length} points`;\n                    //     }\n                    //     console.log(message);\n                    // },\n                    orbitControls: {\n                        zoomSpeed: 1.25,\n                    },\n                    styles: {\n                        point: {\n                            scaleDefault: 2.5,\n                            scaleSelected: 2.5,\n                            scaleHover: 2.5,\n                        }\n                    }\n                });\n\n                tmp_scatterplot.setPanMode();\n                setScatterplot(tmp_scatterplot);\n            }\n\n            if (plotRedDims?.plot) {\n\n                let cluster_mappings = plotRedDims?.clusters;\n                const cluster_colors = clusterColors\n\n                let points = []\n                plotRedDims?.plot.x.forEach((x, i) => {\n                    points.push([x, plotRedDims?.plot.y[i]]);\n                });\n\n                let metadata = {\n                    clusters: cluster_mappings\n                };\n                const dataset = new ScatterGL.Dataset(points, metadata);\n\n                tmp_scatterplot.render(dataset);\n\n                tmp_scatterplot.setPointColorer((i, selectedIndices, hoverIndex) => {\n                    // if (hoverIndex === i) {\n                    //     return 'red';\n                    // }\n\n                    if (clusHighlight != null && clusHighlight !== cluster_mappings[i]) {\n                        return '#D3D3D3';\n                    }\n\n                    if (gene && Array.isArray(selectedClusterSummary?.[gene]?.expr)) {\n                        let exprMinMax = getMinMax(selectedClusterSummary[gene].expr);\n\n\n                        var gradient = new Rainbow();\n                        gradient.setSpectrum('#F5F8FA', \"#2965CC\");\n                        let val = exprMinMax[1] === 0 ? 0.01 : exprMinMax[1];\n                        gradient.setNumberRange(0, val);\n                        setExprMinMax([0, val]);\n                        setShowGradient(true);\n\n                        return \"#\" + gradient.colorAt(selectedClusterSummary?.[gene]?.expr?.[i]);\n                        // let colorGradients = cluster_colors.map(x => {\n                        //     var gradient = new Rainbow();\n                        //     gradient.setSpectrum('#D3D3D3', x);\n                        //     let val = exprMinMax[1] === 0 ? 0.01 : exprMinMax[1];\n                        //     gradient.setNumberRange(0, val);\n                        //     return gradient;\n                        // });\n\n                        // return \"#\" + colorGradients[cluster_mappings[i]].colorAt(selectedClusterSummary?.[gene]?.expr?.[i])\n                    }\n\n                    setShowGradient(false);\n                    return cluster_colors[cluster_mappings[i]];\n                });\n            }\n        }\n    }, [plotRedDims, selectedClusterSummary, gene, clusHighlight]);\n\n    useEffect(() => {\n        changeRedDim(defaultRedDims);\n    }, [defaultRedDims])\n\n    const changeRedDim = (x) => {\n        if (defaultRedDims === \"TSNE\") {\n            setPlotRedDims({\n                \"plot\": tsneData,\n                \"clusters\": clusterData?.clusters\n            });\n        } else if (defaultRedDims === \"UMAP\") {\n            setPlotRedDims({\n                \"plot\": umapData,\n                \"clusters\": clusterData?.clusters\n            });\n        }\n    };\n\n    const setInteraction = (x) => {\n        if (x === \"PAN\") {\n            scatterplot.setPanMode();\n        } else if (x === \"SELECT\") {\n            scatterplot.setSelectMode();\n        }\n    }\n\n    return (\n        <div className=\"scatter-plot\">\n            <ButtonGroup style={{ minWidth: 75, minHeight: 150 }}\n                fill={false}\n                large={false}\n                minimal={false}\n                vertical={true}\n                className='left-sidebar'\n            >\n                <Button className='dim-button'\n                    disabled={redDims.indexOf(\"TSNE\") === -1}\n                    onClick={() => setDefaultRedDims(\"TSNE\")}\n                    intent={defaultRedDims === \"TSNE\" ? \"primary\" : \"\"}\n                >\n                    <Icon icon=\"database\"></Icon>\n                    <br />\n                    <span>TSNE</span>\n                </Button>\n                <Button className='dim-button'\n                    disabled={redDims.indexOf(\"UMAP\") === -1}\n                    onClick={() => setDefaultRedDims(\"UMAP\")}\n                    intent={defaultRedDims === \"UMAP\" ? \"primary\" : \"\"}\n                >\n                    <Icon icon=\"database\"></Icon><br />\n                    <span>UMAP</span>\n                </Button>\n            </ButtonGroup>\n            <ControlGroup className=\"top-header\" fill={false} vertical={false}>\n                {/* <Button>Play t-SNE Interactively</Button>\n                <Button>Color Plot by Metadata</Button>\n                <Button>What else ?</Button> */}\n                <Button icon=\"hand-up\" onClick={x => setInteraction(\"PAN\")}>Pan</Button>\n                <Button icon=\"widget\" onClick={x => setInteraction(\"SELECT\")}>Selection</Button>\n            </ControlGroup>\n            <div className='dim-plot'>\n                {\n                    plotRedDims?.plot ?\n                        <div ref={container} ></div> :\n                        \"Choose an Embedding... or Embeddings are being computed...\"\n                }\n            </div>\n            <div className='right-sidebar'>\n                {showGradient ?\n                    <div>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\">\n                            <defs>\n                                <linearGradient id=\"geneGradient\" gradientTransform=\"rotate(90)\">\n                                    <stop offset=\"5%\" stop-color=\"#F5F8FA\" />\n                                    <stop offset=\"95%\" stop-color=\"#2965CC\" />\n                                </linearGradient>\n                            </defs>\n                            <rect x=\"25%\" y=\"25%\" width=\"13\" height=\"150\" fill=\"url('#geneGradient')\" />\n                            <text x=\"25%\" y=\"15%\" style={{font: '8px sans-serif;'}}>{gene}</text>\n                            <text x=\"30%\" y=\"25%\" style={{font: '8px sans-serif;'}}>{exprMinMax[0]}</text>\n                            <text x=\"30%\" y=\"100%\" style={{font: '8px sans-serif;'}}>{exprMinMax[1].toFixed(2)}</text>\n                        </svg>\n                    </div>\n                    :\n                    <Callout title=\"CLUSTERS\" icon=\"circle-arrow-left\">\n                        <ul>\n                            {clusterColors?.map((x, i) => {\n                                return (<li key={i}\n                                    className={clusHighlight == i ? 'legend-highlight' : ''}\n                                    style={{ color: x }}\n                                    onClick={() => {\n                                        if (i === clusHighlight) {\n                                            setClusHighlight(null);\n\n                                        } else {\n                                            setClusHighlight(i);\n                                        }\n                                    }}\n                                > Cluster {i + 1} </li>)\n                            })}\n                        </ul>\n                    </Callout>\n                }\n\n            </div>\n        </div>\n    );\n};\n\nexport default DimPlot;","import { useEffect, useRef } from \"react\";\nimport * as d3 from 'd3';\n\nconst StackedHistogram = (props) => {\n    const container = useRef();\n\n    useEffect(() => {\n\n        let data = props?.data;\n        let propwidth = props?.width;\n        let color = props?.color;\n        let clusters = props?.clusters;\n\n        if (!propwidth) {\n            propwidth = 325;\n        }\n\n        if (!color) {\n            color = \"#00B3A4\";\n        }\n\n        if (!data) return \"\";\n\n        let containerEl = container.current;\n        containerEl.innerHTML = \"\";\n\n        const margin = { top: 10, right: 30, bottom: 30, left: 40 },\n            width = propwidth - margin.left - margin.right,\n            height = 150 - margin.top - margin.bottom;\n\n        const svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                `translate(${margin.left},${margin.top})`);\n\n        const x = d3.scaleLinear()\n            .domain([0, Math.max(...data)])\n            .range([0, width]);\n\n        svg.append(\"g\")\n            .attr(\"transform\", `translate(0, ${height})`)\n            .call(d3.axisBottom(x));\n\n        const histogram = d3.histogram()\n            .value((d) => { return d; })  \n            .domain(x.domain())  \n            .thresholds(x.ticks(25)); \n            \n        const bins = histogram(data);\n        const allCells = histogram(data.filter((d, i)=> { return clusters?.[i] === 0 }));\n        const clusterCells = histogram(data.filter((d, i) => { return clusters?.[i] === 1 }));\n\n        const y = d3.scaleLinear()\n            .range([height, 0])\n            .domain([0, d3.max(bins, (d) => { return d.length; })]);\n\n        // svg.append(\"g\")\n        //     .call(d3.axisLeft(y));\n\n        svg.selectAll(\"rectAll\")\n            .data(allCells)\n            .join(\"rect\")\n            .attr(\"x\", 1)\n            .attr(\"transform\", (d) => { return `translate(${x(d.x0)} , ${y(d.length)})` })\n            .attr(\"width\", (d) => { return x(d.x1) - x(d.x0) - 1; })\n            .attr(\"height\", (d) => { return height - y(d.length); })\n            .style(\"fill\", \"#D3D3D3\")\n            .style(\"opacity\", 0.6)\n\n        svg.selectAll(\"rectCluster\")\n            .data(clusterCells)\n            .enter()\n            .append(\"rect\")\n            .attr(\"x\", 1)\n            .attr(\"transform\", (d) => { return `translate(${x(d.x0)}, ${y(d.length)})` })\n            .attr(\"width\", (d) => { return x(d.x1) - x(d.x0) - 1; })\n            .attr(\"height\", (d) => { return height - y(d.length); })\n            .style(\"fill\", color)\n            .style(\"opacity\", 0.6)\n\n        svg.append(\"circle\").attr(\"cx\", width - 50).attr(\"cy\", 5).attr(\"r\", 3).style(\"fill\", \"#D3D3D3\")\n        svg.append(\"circle\").attr(\"cx\", width - 50).attr(\"cy\", 15).attr(\"r\", 3).style(\"fill\", color)\n        svg.append(\"text\").attr(\"x\", width - 40).attr(\"y\", 5).text(\"all cells\").style(\"font-size\", \"10px\").attr(\"alignment-baseline\", \"middle\")\n        svg.append(\"text\").attr(\"x\", width - 40).attr(\"y\", 15).text(\"this cluster\").style(\"font-size\", \"10px\").attr(\"alignment-baseline\", \"middle\")\n    }, []);\n\n    return (\n        <div ref={container}></div>\n    );\n};\n\nexport default StackedHistogram;","import { useEffect, useRef } from \"react\";\nimport * as d3 from 'd3';\n\nconst Histogram = (props) => {\n    const container = useRef();\n\n    useEffect(() => {\n\n        let data = props?.data;\n        let propwidth = props?.width;\n        let propheight = props?.height;\n        let color = props?.color;\n\n        if (!propwidth) {\n            propwidth = 325;\n        }\n\n        if (!propheight) {\n            propheight = 150;\n        }\n\n        if (!color) {\n            color = \"#00B3A4\";\n        }\n    \n        if (!data) return \"\";\n\n        let containerEl = container.current;\n        containerEl.innerHTML = \"\";\n\n        const margin = { top: 5, right: 5, bottom: 5, left: 5 },\n            width = propwidth - margin.left - margin.right,\n            height = propheight - margin.top - margin.bottom;\n\n        const svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                `translate(${margin.left},${margin.top})`);\n\n        const x = d3.scaleLinear()\n            .domain([0, Math.max(...data)])\n            .range([0, width]);\n\n        svg.append(\"g\")\n            .attr(\"transform\", `translate(0, ${height})`)\n            .call(d3.axisBottom(x));\n\n        const histogram = d3.histogram()\n            .value((d) => { return d; })\n            .domain(x.domain())\n            .thresholds(x.ticks(25));\n\n        const bins = histogram(data);\n\n        const y = d3.scaleLinear()\n            .range([height, 0]);\n\n        y.domain([0, d3.max(bins, (d) => { return d.length; })]);\n\n        // svg.append(\"g\")\n        //     .call(d3.axisLeft(y));\n\n        svg.selectAll(\"rect\")\n            .data(bins)\n            .join(\"rect\")\n            .attr(\"x\", 1)\n            .attr(\"transform\", (d) => { return `translate(${x(d.x0)} , ${y(d.length)})` })\n            .attr(\"width\", (d) => { return x(d.x1) - x(d.x0) - 1 })\n            .attr(\"height\", (d) => { return height - y(d.length); })\n            .style(\"fill\", color)\n    }, [props?.data]);\n\n    return (\n        <div ref={container}></div>\n    );\n};\n\nexport default Histogram;","import { useRef } from \"react\";\n\nconst Cell = (props) => {\n    const container = useRef();\n\n    let propwidth = props?.width;\n    let minmax = props?.minmax;\n    let score = props?.score;\n    let colorscale = props?.colorscale;\n    let colorscore = props?.colorscore;\n    let color = props?.color;\n\n    let percWidth = ((score - minmax[0]) / (minmax[1] - minmax[0]));\n\n    if (!propwidth) {\n        propwidth = \"100%\";\n    }\n\n    if (!color) {\n        color = \"#00B3A4\";\n    }\n\n    return (\n        <div ref={container}\n            style={{\n                width: propwidth, height: '66%',\n                margin: '5px', border: '1px solid gainsboro',\n                alignItems: 'center'\n            }}>\n            {colorscale ?\n                <div style={{\n                    width: `${colorscore * 100}%`,\n                    backgroundColor: colorscale(colorscore),\n                    height: '100%'\n                }}></div>\n                :\n                <div style={{\n                    width: `${percWidth * 100}%`,\n                    backgroundColor: color,\n                    height: '100%'\n                }}>\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default Cell;","import React, { useEffect, useContext, useState, useMemo } from 'react';\nimport { Button, H4, H5, Icon, Collapse, Label, InputGroup, RangeSlider, Tag } from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport { Virtuoso } from 'react-virtuoso';\nimport * as d3 from 'd3';\n\nimport { AppContext } from '../../context/AppContext';\nimport StackedHistogram from '../Plots/StackedHistogram';\nimport getMinMax from '../Plots/utils';\nimport Histogram from '../Plots/Histogram';\n\nimport './markers.css';\nimport Cell from '../Plots/Cell.js';\n\nconst MarkerPlot = () => {\n\n    const { clusterData, selectedClusterSummary, setSelectedClusterSummary,\n        selectedCluster, setSelectedCluster, setClusterRank,\n        setReqGene, clusterColors, gene, setGene } = useContext(AppContext);\n    const [clusSel, setClusSel] = useState(null);\n    const [clusArrayStacked, setClusArrayStacked] = useState(null);\n    const [searchInput, setSearchInput] = useState(null);\n    const [meanMinMax, setMeanMinMax] = useState(null);\n    const [deltaMinMax, setDeltaMinMax] = useState(null);\n    const [lfcMinMax, setLfcMinMax] = useState(null);\n    const [detectedMinMax, setDetectedMinMax] = useState(null);\n    const [minMaxs, setMinMaxs] = useState(null);\n\n    const [means, setMeans] = useState(null);\n    const [deltas, setDeltas] = useState(null);\n    const [lfcs, setLfcs] = useState(null);\n    const [detects, setDetects] = useState(null);\n\n    const [markerFilter, setMarkerFilter] = useState({});\n    const [prosRecords, setProsRecords] = useState(null);\n\n    const detectedScale = d3.interpolateRdYlBu; //d3.interpolateRdBu;\n    // d3.scaleSequential()\n    // .domain([0, 1])\n    // .range([\"red\", \"blue\"])\n    // .interpolate(d3.interpolateHcl);\n\n    useEffect(() => {\n        if (!selectedClusterSummary) return selectedClusterSummary;\n\n        let trecs = Object.values(selectedClusterSummary);\n\n        if (trecs.length === 0) return trecs;\n\n\n        let tmpmeans = trecs.map(x => x?.mean);\n        // setMeanMinMax(getMinMax(tmpmeans));\n        let tmeanMinMax = d3.extent(tmpmeans)\n        setMeanMinMax([parseFloat(tmeanMinMax[0].toFixed(2)), parseFloat(tmeanMinMax[1].toFixed(2))]);\n        setMeans(tmpmeans);\n\n        let tmpdeltas = trecs.map(x => x?.delta);\n        // setDeltaMinMax(getMinMax(tmpdeltas));\n        let tdeltaMinMax = d3.extent(tmpdeltas)\n        setDeltaMinMax([parseFloat(tdeltaMinMax[0].toFixed(2)), parseFloat(tdeltaMinMax[1].toFixed(2))]);\n        // setDeltaMinMax(d3.extent(tmpdeltas));\n        setDeltas(tmpdeltas);\n\n        let tmplfcs = trecs.map(x => x?.lfc);\n        // setLfcMinMax(getMinMax(tmplfcs));\n        // setLfcMinMax(d3.extent(tmplfcs));\n        let tlfcsMinMax = d3.extent(tmplfcs)\n        setLfcMinMax([parseFloat(tlfcsMinMax[0].toFixed(2)), parseFloat(tlfcsMinMax[1].toFixed(2))]);\n        setLfcs(tmplfcs);\n\n        let tmpdetects = trecs.map(x => x?.detected);\n        // setDetectedMinMax(getMinMax(tmpdetects));\n        // setDetectedMinMax(d3.extent(tmpdetects));\n        let tdetectsMinMax = d3.extent(tmpdetects)\n        setDetectedMinMax([parseFloat(tdetectsMinMax[0].toFixed(2)), parseFloat(tdetectsMinMax[1].toFixed(2))]);\n        setDetects(tmpdetects);\n\n        setMinMaxs({\n            \"lfc\": [parseFloat(tlfcsMinMax[0].toFixed(2)), parseFloat(tlfcsMinMax[1].toFixed(2))],\n            \"mean\": [parseFloat(tmeanMinMax[0].toFixed(2)), parseFloat(tmeanMinMax[1].toFixed(2))],\n            \"detected\": [parseFloat(tdetectsMinMax[0].toFixed(2)), parseFloat(tdetectsMinMax[1].toFixed(2))],\n            \"delta\": [parseFloat(tdeltaMinMax[0].toFixed(2)), parseFloat(tdeltaMinMax[1].toFixed(2))],\n        });\n\n        let sortedRows = [...trecs];\n\n        setProsRecords(sortedRows);\n\n    }, [selectedClusterSummary]);\n\n    const sortedRows = useMemo(() => {\n\n        if (!prosRecords) return [];\n\n        let sortedRows = prosRecords;\n        if (markerFilter) {\n            for (let key in markerFilter) {\n                let range = markerFilter[key];\n                if (range[0] == minMaxs[key][0] && range[1] == minMaxs[key][1]) continue;\n                sortedRows = sortedRows.filter((x) => x[key] >= range[0] && x[key] <= range[1]);\n            }\n        }\n\n        if (!searchInput || searchInput === \"\") return sortedRows;\n\n        sortedRows = sortedRows.filter((x) => x[\"gene\"].toLowerCase().indexOf(searchInput.toLowerCase()) !== -1);\n        return sortedRows;\n    }, [prosRecords, searchInput, markerFilter]);\n\n    useEffect(() => {\n        if (clusterData?.clusters) {\n            let max_clusters = Math.max(...clusterData.clusters);\n\n            let clus = [];\n            for (let i = 0; i < max_clusters + 1; i++) {\n                clus.push(i + 1);\n            }\n\n            setClusSel(clus);\n            setSelectedCluster(0);\n\n            let clusArray = []\n            clusterData?.clusters?.forEach(x => x === 0 ? clusArray.push(1) : clusArray.push(0));\n            setClusArrayStacked(clusArray);\n        }\n    }, [clusterData]);\n\n    useEffect(() => {\n        let clusArray = []\n        clusterData?.clusters?.forEach(x => x === selectedCluster ? clusArray.push(1) : clusArray.push(0));\n        setClusArrayStacked(clusArray);\n    }, [selectedCluster]);\n\n    const handleMarkerFilter = (val, key) => {\n\n        let tmp = { ...markerFilter };\n        tmp[key] = val;\n        setMarkerFilter(tmp);\n    }\n\n    return (\n        <div className='marker-container'>\n            <H4>Marker Genes</H4>\n            {\n                clusSel ?\n                    <select\n                        onChange={(x) => setSelectedCluster(parseInt(x.currentTarget?.value.replace(\"Cluster \", \"\")) - 1)}\n                    >\n                        {\n                            clusSel.map((x, i) => (\n                                <option key={i}>Cluster {x}</option>\n                            ))\n                        }\n                    </select>\n                    : \"\"\n            }\n            {\n                selectedClusterSummary ?\n                    <div className='marker-table'>\n                        <div className='marker-header'>\n                            <InputGroup\n                                leftIcon=\"search\"\n                                small={true}\n                                placeholder=\"Search gene...\"\n                                type={\"text\"}\n                                onChange={(e) => setSearchInput(e.target.value)}\n                            />\n                            <Label>sort by &nbsp;\n                                <select\n                                    onChange={(x) => {\n                                        setClusterRank(x.currentTarget.value);\n                                    }} defaultValue={\"cohen-min-rank\"}>\n                                    <option>cohen-min</option>\n                                    <option>cohen-mean</option>\n                                    <option>cohen-min-rank</option>\n                                    <option>auc-min</option>\n                                    <option>auc-mean</option>\n                                    <option>auc-min-rank</option>\n                                    <option>lfc-min</option>\n                                    <option>lfc-mean</option>\n                                    <option>lfc-min-rank</option>\n                                    <option>delta-d-min</option>\n                                    <option>delta-d-mean</option>\n                                    <option>delta-d-min-rank</option>\n                                </select>\n                            </Label>\n                        </div>\n                        <Virtuoso\n                            components={{\n                                Item: ({ children, ...props }) => {\n                                    return (\n                                        <div className='row-card' {...props}>\n                                            {children}\n                                        </div>\n                                    );\n                                },\n                                Header: () => {\n                                    return (<div className='row-container row-header'>\n                                        <span>Gene</span>\n                                        <span>log fold-change</span>\n                                        <span>Δd</span>\n                                        <span>Expression &nbsp;\n                                            <Tooltip2 content=\"bar represents the mean expression of the gene and the color gradient represents detected.\" openOnTargetFocus={false}>\n                                                <Icon size={12} icon=\"help\"></Icon>\n                                            </Tooltip2>\n                                        </span>\n                                        <span></span>\n                                    </div>)\n                                }\n                            }}\n                            className='marker-list'\n                            totalCount={sortedRows.length}\n                            itemContent={index => {\n                                const row = sortedRows[index];\n                                const rowexp = row.expanded;\n                                const rowExpr = row.expr; //geneExprData[row.gene];\n\n                                return (\n                                    <div>\n                                        <div className='row-container'>\n                                            <span>{row.gene}</span>\n                                            {/* <span>Cohen: {row.cohen.toFixed(4)}, AUC</span> */}\n                                            {<Cell minmax={lfcMinMax}\n                                                score={row.lfc} color=\"#F5498B\"\n                                            />}\n                                            {<Cell minmax={deltaMinMax}\n                                                score={row.delta} color=\"#4580E6\"\n                                            />}\n                                            {<Cell minmax={meanMinMax} colorscale={detectedScale}\n                                                score={row.mean} colorscore={row.detected}\n                                            />}\n                                            {/* {<Cell minmax={[0,1]}\n                                                score={row.detected} color={detectedScale(row.detected)}\n                                            />} */}\n                                            <div className='row-action'>\n                                                <Button icon={rowexp ? 'minus' : 'plus'} small={true} fill={false}\n                                                    className='row-action'\n                                                    onClick={() => {\n                                                        let tmp = { ...selectedClusterSummary };\n                                                        tmp[row.gene].expanded = !tmp[row.gene].expanded;\n                                                        setSelectedClusterSummary(tmp);\n\n                                                        if (!rowExpr) {\n                                                            setReqGene(row.gene);\n                                                        }\n                                                    }}\n                                                >\n                                                </Button>\n                                                <Button small={true} fill={false}\n                                                    className='row-action'\n                                                    onClick={() => {\n                                                        if (row.gene === gene) {\n                                                            setGene(null);\n                                                        } else {\n                                                            setGene(row.gene);\n                                                            if (!rowExpr) {\n                                                                setReqGene(row.gene);\n                                                            }\n                                                        }\n                                                    }}\n                                                >\n                                                    <Icon icon={'tint'}\n                                                        color={row.gene === gene ? clusterColors[selectedCluster] : ''}\n                                                    ></Icon>\n                                                </Button>\n                                            </div>\n                                        </div>\n                                        <Collapse isOpen={rowexp}>\n                                            {/* <Histogram data={rowExpr} color={clusterColors[selectedCluster]} /> */}\n                                            {clusArrayStacked && <StackedHistogram data={rowExpr}\n                                                color={clusterColors[selectedCluster]}\n                                                clusters={clusArrayStacked} />}\n                                        </Collapse>\n                                    </div>\n                                )\n                            }}\n                        />\n                        <div className='marker-footer'>\n                            <H5 className='marker-footer-title'>Filter Markers</H5>\n\n                            <div className='marker-filter-container'>\n                                <Tag className=\"marker-filter-container-tag\" minimal={true} intent='primary'>Log fold-change</Tag>\n                                <Histogram data={lfcs} height={35} color=\"#F5498B\" />\n                                <div className='marker-filter-slider'>\n                                    {lfcMinMax && <RangeSlider\n                                        min={lfcMinMax[0]}\n                                        max={lfcMinMax[1]}\n                                        stepSize={Math.round(lfcMinMax[1] - lfcMinMax[0]) / 25}\n                                        onChange={(val) => handleMarkerFilter(val, \"lfc\")}\n                                        value={markerFilter?.[\"lfc\"] ? markerFilter?.[\"lfc\"] : lfcMinMax}\n                                        vertical={false}\n                                    />}\n                                </div>\n                            </div>\n\n                            <div className='marker-filter-container'>\n                                <Tag className=\"marker-filter-container-tag\" minimal={true} intent='primary'>delta-d</Tag>\n                                <Histogram data={deltas} height={35} color=\"#4580E6\" />\n                                <div className='marker-filter-slider'>\n                                    {deltaMinMax && <RangeSlider\n                                        min={deltaMinMax[0]}\n                                        max={deltaMinMax[1]}\n                                        stepSize={Math.round(deltaMinMax[1] - deltaMinMax[0]) / 25}\n                                        onChange={(val) => handleMarkerFilter(val, \"delta\")}\n                                        value={markerFilter?.[\"delta\"] ? markerFilter?.[\"delta\"] : deltaMinMax}\n                                        vertical={false}\n                                    />}\n                                </div>\n                            </div>\n\n                            <div className='marker-filter-container'>\n                                <Tag className=\"marker-filter-container-tag\" minimal={true} intent='primary'>Mean</Tag>\n                                <Histogram data={means} height={35} />\n                                <div className='marker-filter-slider'>\n                                    {meanMinMax && <RangeSlider\n                                        min={meanMinMax[0]}\n                                        max={meanMinMax[1]}\n                                        stepSize={Math.round(meanMinMax[1] - meanMinMax[0]) / 25}\n                                        onChange={(val) => handleMarkerFilter(val, \"mean\")}\n                                        value={markerFilter?.[\"mean\"] ? markerFilter?.[\"mean\"] : meanMinMax}\n                                        vertical={false}\n                                    />}\n                                </div>\n                            </div>\n\n                            <div className='marker-filter-container'>\n                                <Tag className=\"marker-filter-container-tag\" minimal={true} intent='primary'>Detected</Tag>\n                                <Histogram data={detects} height={35} />\n                                <div className='marker-filter-slider'>\n                                    {detectedMinMax && <RangeSlider\n                                        min={detectedMinMax[0]}\n                                        max={detectedMinMax[1]}\n                                        stepSize={Math.round(detectedMinMax[1] - detectedMinMax[0]) / 25}\n                                        onChange={(val) => handleMarkerFilter(val, \"detected\")}\n                                        value={markerFilter?.[\"detected\"] ? markerFilter?.[\"detected\"] : detectedMinMax}\n                                        vertical={false}\n                                    />}\n                                </div>\n                            </div>\n                            {/* <Label>AUC</Label>\n                            <div className='marker-filter-container'></div>\n                            <Label>Cohen</Label>\n                            <div className='marker-filter-container'></div> */}\n                        </div>\n                    </div>\n                    : \"\"\n            }\n        </div>\n    );\n};\n\nexport default MarkerPlot;\n","import './App.css';\nimport Header from \"./components/Header\";\nimport Gallery from './components/Gallery';\n\nimport { Overlay, Spinner } from \"@blueprintjs/core\";\n\nimport { useState, useEffect, useContext } from 'react';\nimport { AppContext } from './context/AppContext';\n\nimport DimPlot from './components/Plots/ScatterPlot.js';\nimport MarkerPlot from './components/Markers';\n\nfunction App() {\n\n  const [loading, setLoading] = useState(true);\n  const loadingProps = {\n    autoFocus: true,\n    canEscapeKeyClose: false,\n    canOutsideClickClose: false,\n    enforceFocus: true,\n    hasBackdrop: true,\n    usePortal: true,\n    useTallContent: false,\n  };\n\n  const { setWasmInitialized, setTsneData, setRedDims, redDims,\n    setInitDims, setQcDims, defaultRedDims, setDefaultRedDims,\n    setQcData, qcData, setClusterData, setFSelectionData,\n    setUmapData, setPcaVarExp, logs, setLogs,\n    selectedCluster, clusterRank,\n    selectedClusterSummary, setSelectedClusterSummary,\n    reqGene } = useContext(AppContext);\n\n  useEffect(() => {\n    window.Worker.postMessage({\n      \"type\": \"INIT\",\n      \"msg\": \"Initial Load\"\n    });\n  }, [])\n\n  useEffect(() => {\n\n    selectedCluster !== null && window.Worker.postMessage({\n      \"type\": \"getMarkersForCluster\",\n      \"payload\": {\n        \"cluster\": selectedCluster,\n        \"rank_type\": clusterRank,\n      }\n    });\n  }, [selectedCluster, clusterRank])\n\n  useEffect(() => {\n\n    reqGene !== null && window.Worker.postMessage({\n      \"type\": \"getGeneExpression\",\n      \"payload\": {\n        \"gene\": reqGene\n      }\n    });\n  }, [reqGene])\n\n  window.Worker.onmessage = (msg) => {\n    const payload = msg.data;\n\n    if (payload?.msg) {\n      let tmp = [...logs];\n      let d = new Date();\n      tmp.push(`${d.getHours() + \":\" + d.getMinutes() + \":\" + d.getSeconds()} - ${payload?.type} - ${payload?.msg}`);\n\n      setLogs(tmp);\n    }\n\n    if (payload.type === \"INIT\") {\n      // TODO: need a timeout here so the screen doesn't flicker\n      setLoading(false);\n      setWasmInitialized(true);\n    } else if (payload.type === \"input_DIMS\") {\n      setInitDims(payload.resp);\n    } else if (payload.type === \"quality_control_filtered_DIMS\") {\n      setQcDims(payload.resp);\n    } else if (payload.type === \"quality_control_metrics_DATA\") {\n      const { resp } = payload;\n      setQcData(resp);\n    } else if (payload.type === \"quality_control_thresholds_DATA\") {\n      const { resp } = payload;\n      let tmp = { ...qcData };\n      tmp[\"thresholds\"] = resp;\n      setQcData(tmp);\n    } else if (payload.type === \"feature_selection_DIMS\") {\n    } else if (payload.type === \"feature_selection_DATA\") {\n      const { resp } = payload;\n      setFSelectionData(resp);\n    } else if (payload.type === \"pca_DATA\") {\n      const { resp } = payload;\n      let tmp = [...redDims];\n      tmp.push(\"PCA\");\n      setRedDims(tmp);\n      setPcaVarExp(resp);\n    } else if (payload.type === \"snn_cluster_graph_DATA\") {\n      const { resp } = payload;\n      setClusterData(resp);\n    } else if (payload.type === \"tsne_DATA\" || payload.type === \"tsne_iter\") {\n      const { resp } = payload;\n      setTsneData(resp);\n      let tmp = [...redDims];\n      tmp.push(\"TSNE\");\n      if (!defaultRedDims) {\n        setDefaultRedDims(\"TSNE\");\n      }\n      setRedDims(tmp);\n    } else if (payload.type === \"umap_DATA\") {\n      const { resp } = payload;\n      setUmapData(resp);\n      let tmp = [...redDims];\n      tmp.push(\"UMAP\");\n      setRedDims(tmp);\n    } else if (payload.type === \"markerGene_DATA\") {\n      // const { type, resp } = payload;\n    } else if (payload.type === \"setMarkersForCluster\") {\n      const { resp } = payload;\n      let records = {};\n      resp.means.forEach((x, i) => {\n        records[resp?.genes?.[i]] = {\n          \"gene\": resp?.genes?.[i],\n          \"mean\": x,\n          \"delta\": resp?.delta_d?.[i],\n          \"lfc\": resp?.lfc?.[i],\n          // \"auc\": resp?.auc?.[i],\n          // \"cohen\": resp?.cohen?.[i],\n          \"detected\": resp?.detected?.[i],\n          \"expanded\": false,\n          \"expr\": null,\n        }\n      });\n      setSelectedClusterSummary(records);\n    } else if (payload.type === \"setGeneExpression\") {\n      const { resp } = payload;\n\n      let gtmp = { ...selectedClusterSummary };\n      gtmp[resp.gene].expr = Object.values(resp.expr);\n      setSelectedClusterSummary(gtmp);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"App-content\">\n        <div className=\"plot\">\n          <DimPlot />\n        </div>\n        <div className=\"marker\">\n          <MarkerPlot />\n        </div>\n        <div className=\"analysis\">\n          <Gallery />\n        </div>\n      </div>\n      <Overlay\n        isOpen={loading}\n        {...loadingProps}\n      >\n        <div className=\"spinner\">\n          <Spinner size={100} />\n          <p>Initializing SCRAN.JS</p>\n        </div>\n      </Overlay>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport AppContext from \"./context/AppContext\";\n\nReactDOM.render(\n  // <React.StrictMode>\n    <AppContext>\n      <App />\n    </AppContext>,\n  //  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n// serviceWorkerRegistration.unregister();\n// serviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}