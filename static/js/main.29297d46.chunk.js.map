{"version":3,"sources":["components/Spinners/AppToaster.js","context/AppContext.js","components/Analysis/index.js","components/Stats/index.js","components/Logs/index.js","components/Intro/index.js","components/Header/index.js","components/Plots/BarPlot.js","components/Plots/PCABarPlot.js","components/Plots/ClusterBarPlot.js","components/Plots/ViolinPlotBasic.js","components/Plots/QCPlotMgr.js","components/Plots/ImgPlot.js","components/Gallery/index.js","components/Plots/utils.js","components/Plots/rainbowvis.js","components/Plots/ScatterPlot.js","components/Plots/StackedHistogram.js","components/Plots/Cell.js","components/Plots/HeatmapCell.js","components/Markers/index.js","components/Spinners/Pong.js","components/Spinners/Spinner2.js","App.js","reportWebVitals.js","index.js"],"names":["AppToaster","Toaster","create","className","position","Position","TOP_RIGHT","maxToasts","AppContext","createContext","AppContextProvider","children","useState","format","files","inputFiles","setInputFiles","qc","fSelection","pca","cluster","tsne","umap","markerGene","params","setParams","openInput","setOpenInput","showGame","setShowGame","tabSelected","setTabSelected","loadParams","setLoadParams","String","Date","now","slice","datasetName","setDatasetName","exportState","setExportState","wasmInitialized","setWasmInitialized","error","setError","initDims","setInitDims","qcDims","setQcDims","fSelDims","setFSelDims","genesInfo","setGenesInfo","qcData","setQcData","qcThreshold","setQcThreshold","fSelectionData","setFSelectionData","redDims","setRedDims","defaultRedDims","setDefaultRedDims","plotRedDims","setPlotRedDims","clusterData","setClusterData","selectedCluster","setSelectedCluster","selectedClusterSummary","setSelectedClusterSummary","clusterColors","setClusterColors","clusterRank","setClusterRank","customSelection","setCustomSelection","delCustomSelection","setDelCustomSelection","pcaData","setPcaData","pcaVarExp","setPcaVarExp","showAnimation","setShowAnimation","triggerAnimation","setTriggerAnimation","tsneData","setTsneData","umapData","setUmapData","gene","setGene","reqGene","setReqGene","logs","setLogs","savedPlot","setSavedPlot","useEffect","window","scranWorker","postMessage","show","icon","intent","message","Provider","value","AnalysisDialog","buttonText","includeFooter","props","isOpen","setIsOpen","showStepHelper","setShowStepHelper","handleButtonClick","useCallback","handleClose","useContext","mtx","barcode","tmpInputFiles","setTmpInputFiles","inputText","setInputText","tmpInputParams","setTmpInputParams","tmpInputValid","setTmpInputValid","newImportFormat","setNewImportFormat","handleNewImportTab","currTab","prevTab","file","toLowerCase","endsWith","onClick","text","onClose","Classes","DIALOG_BODY","animate","renderActiveTabPanelOnly","vertical","onChange","defaultSelectedTabId","id","title","panel","style","paddingBottom","round","onMouseEnter","onMouseLeave","onInputChange","msg","target","name","marginTop","placeholder","onValueChange","nval","val","defaultValue","large","checked","innerLabelChecked","innerLabel","e","parseInt","currentTarget","marginBottom","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","content","disabled","margin","Stats","Logs","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","hasBackdrop","RIGHT","size","undefined","usePortal","state","setState","outlined","DRAWER_BODY","map","x","i","IntroDialog","showClose","setShowClose","elevation","Elevation","ZERO","href","Header","shouldReturnFocusOnClose","align","Alignment","LEFT","onConfirm","placement","rightIcon","Intro","BarPlot","container","useRef","data","propwidth","width","color","ymax","Math","max","d","containerEl","current","innerHTML","height","svg","d3","append","attr","range","domain","key","padding","call","selectAll","y","enter","bandwidth","Array","isArray","ref","PCABarPlot","var_exp","chart_data","Object","values","forEach","push","ClusterBarPlot","clusters","tmpColors","setTmpColors","cluster_count","keys","length","cluster_colors","palette","randomColor","luminosity","count","toString","clus","z","ViolinPlotBasic","rdata","nice","tickFormat","transform","pow","showLabel","bins","thresholds","ticks","histogram","max_bin","xNum","label","datum","x0","x1","curve","threshold","on","lines","this","QCPlotMgr","props2","log2","ImgPlot","setTitle","propheight","containerEL","image","ctx","getContext","img","Image","onload","drawImage","src","config","embedding","row","highlight","small","tmpLink","document","createElement","download","replace","split","join","click","Gallery","ONE","getMinMax","arr","Number","MAX_VALUE","min","Rainbow","gradients","minNum","maxNum","colours","setColours","spectrum","Error","increment","firstGradient","ColourGradient","setGradient","setNumberRange","colourGradient","setSpectrum","arguments","setSpectrumByArray","array","colourAt","number","isNaN","TypeError","segment","index","floor","colorAt","minNumber","maxNumber","RangeError","startColour","endColour","calcHex","channelStart_Base16","channelEnd_Base16","num","hex","numRange","cStart_Base10","cPerUnit","c_Base10","getHexColour","string","test","isHexColour","substring","colourNames","hasOwnProperty","colourStart","colourEnd","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","DimPlot","scatterplot","setScatterplot","clusHighlight","setClusHighlight","showGradient","setShowGradient","exprMinMax","setExprMinMax","sliderMinMax","setSliderMinMax","gradient","selectedPoints","setSelectedPoints","plotMode","setPlotMode","expr","tmpgradient","tmp_scatterplot","ScatterGL","onSelect","points","orbitControls","zoomSpeed","styles","point","scaleDefault","scaleSelected","scaleHover","setPanMode","cluster_mappings","metadata","dataset","Dataset","render","setPointColorer","selectedIndices","hoverIndex","has","startsWith","includes","tmpclus","setInteraction","setSelectMode","minWidth","minHeight","fill","minimal","indexOf","marginRight","console","log","renderScatterPlot","iData","scatterPlot","renderer","domElement","toDataURL","tmp","active","iteration","paddingTop","openOnTargetFocus","display","alignItems","flexDirection","alignSelf","paddingLeft","tmpSel","tmpcolors","tmpcolor","cid","tmpSelection","select","backgroundImage","stepSize","StackedHistogram","clusterlabel","tickValues","allCells","filter","clusterCells","allCellsMax","clusterCellsMax","Cell","minmax","score","colorscale","colorscore","percWidth","border","backgroundColor","HeatmapCell","detectedScale","MarkerPlot","clusSel","setClusSel","clusArrayStacked","setClusArrayStacked","searchInput","setSearchInput","meanMinMax","setMeanMinMax","deltaMinMax","setDeltaMinMax","lfcMinMax","setLfcMinMax","detectedMinMax","setDetectedMinMax","minMaxs","setMinMaxs","setMeans","setDeltas","setLfcs","setDetects","markerFilter","setMarkerFilter","prosRecords","setProsRecords","trecs","tmpmeans","mean","tmeanMinMax","tmeanval","parseFloat","toFixed","tmpdeltas","delta","tdeltaMinMax","tdeltaval","tmplfcs","lfc","tlfcsMinMax","tlfcsval","tmpdetects","detected","tdetectsMinMax","tdetecval","sortedRows","useMemo","max_clusters","concat","clusArray","handleMarkerFilter","tmpselection","leftIcon","type","paddingRight","components","Item","totalCount","itemContent","rowexp","expanded","rowExpr","popoverClassName","POPOVER2_CONTENT_SIZING","interactionKind","hoverOpenDelay","modifiers","arrow","enabled","flip","preventOverflow","scope","fontStyle","labelValues","abs","Pong","elem","DIRECTION","rounds","colors","Ball","new","incrementedSpeed","canvas","moveX","moveY","speed","Paddle","side","move","Game","initialize","querySelector","context","player","paddle","ball","running","over","turn","timer","menu","listen","endGameMenu","font","fillStyle","fillRect","fillText","setTimeout","assign","draw","update","_resetTurn","_turnDelayIsOver","random","_generateRoundColor","clearRect","beginPath","setLineDash","moveTo","lineTo","lineWidth","strokeStyle","stroke","textAlign","loop","requestAnimationFrame","addEventListener","keyCode","victor","loser","getTime","newColor","Spinner2","App","loading","setLoading","csLen","cs","payload","onmessage","getHours","getMinutes","getSeconds","resp","dimensions","num_genes","num_cells","gene_names","retained","records","means","ordering","delta_detected","fileNew","Blob","URL","createObjectURL","justifyContent","useTallContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.29297d46.chunk.js","sourcesContent":["import { Position, Toaster } from \"@blueprintjs/core\";\n\nexport const AppToaster = Toaster.create({\n    className: \"notifications\",\n    position: Position.TOP_RIGHT,\n    maxToasts: 5,\n});","import React, { createContext, useEffect, useState } from \"react\";\nimport { AppToaster } from \"../components/Spinners/AppToaster\";\n\nexport const AppContext = createContext(null);\n\nconst AppContextProvider = ({ children }) => {\n  // Input State\n  const [inputFiles, setInputFiles] = useState({\n    format: null,\n    files: null\n  });\n\n  // default params \n  const [params, setParams] = useState({\n    qc: {\n      \"qc-nmads\": 3\n    },\n    fSelection: {\n      \"fsel-span\": 0.3\n    },\n    pca: {\n      \"pca-npc\": 5,\n      \"pca-hvg\": 4000,\n    },\n    cluster: {\n      \"clus-k\": 10,\n      \"clus-res\": 0.5,\n      \"clus-scheme\": 0,\n      \"clus-approx\": true,\n      \"clus-method\": \"snn_graph\",\n    },\n    tsne: {\n      \"tsne-iter\": 500,\n      \"tsne-perp\": 30,\n      \"animate\": false,\n    },\n    umap: {\n      \"umap-nn\": 15,\n      \"umap-epochs\": 500,\n      \"umap-min_dist\": 0.01,\n      \"animate\": false,\n    },\n    markerGene: {}\n  });\n\n  // app open inputs\n  const [openInput, setOpenInput] = useState(false);\n  // show in-app game ?\n  const [showGame, setShowGame] = useState(false);\n  // which tab is selected ? defaults to new\n  const [tabSelected, setTabSelected] = useState(\"new\");\n  // params from worker for stored analysis (kana file)\n  const [loadParams, setLoadParams] = useState(null);\n\n  // creates a default dataset name\n  const [datasetName, setDatasetName] = useState(\"kana-\" + String(Date.now()).slice(0, 8));\n\n  // app export state \n  const [exportState, setExportState] = useState(false);\n\n  // wasm state and error \n  const [wasmInitialized, setWasmInitialized] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Response State for various components\n  // dim sizes\n  const [initDims, setInitDims] = useState(null);\n  const [qcDims, setQcDims] = useState(null);\n  const [fSelDims, setFSelDims] = useState(null);\n\n  // Gene details \n  const [genesInfo, setGenesInfo] = useState(null);\n\n  // QC Data\n  const [qcData, setQcData] = useState(null);\n  const [qcThreshold, setQcThreshold] = useState(null);\n\n  // Feature Selection\n  const [fSelectionData, setFSelectionData] = useState(null);\n\n  // UI dimensions reduction dropdown\n  const [redDims, setRedDims] = useState([]);\n  // which dimension is selected\n  const [defaultRedDims, setDefaultRedDims] = useState(null);\n  // the actual dimensions\n  const [plotRedDims, setPlotRedDims] = useState(null);\n\n  // Cluster Analysis\n  // cluster assignments\n  const [clusterData, setClusterData] = useState(null);\n  // which cluster is selected\n  const [selectedCluster, setSelectedCluster] = useState(null);\n  // cohen, mean scores per gene\n  const [selectedClusterSummary, setSelectedClusterSummary] = useState([]);\n  // set cluster colors\n  const [clusterColors, setClusterColors] = useState(null);\n  // set Cluster rank-type\n  const [clusterRank, setClusterRank] = useState(null);\n  // custom selection on tsne plot\n  const [customSelection, setCustomSelection] = useState({});\n  // remove custom Selection\n  const [delCustomSelection, setDelCustomSelection] = useState(null);\n\n  // PCA\n  const [pcaData, setPcaData] = useState(null);\n  const [pcaVarExp, setPcaVarExp] = useState(null);\n\n  // this applies to both tsne and umap\n  // is animation in progress ?\n  const [showAnimation, setShowAnimation] = useState(false);\n  // if a user manually triggers an animation (using the play button)\n  const [triggerAnimation, setTriggerAnimation] = useState(false);\n\n  // TSNE\n  const [tsneData, setTsneData] = useState(null);\n\n  // UMAP\n  const [umapData, setUmapData] = useState(null);\n\n  // geneExpression\n  // what gene is selected for scatterplot\n  const [gene, setGene] = useState(null);\n  // request gene expression\n  const [reqGene, setReqGene] = useState(null);\n\n  // Logs\n  const [logs, setLogs] = useState([]);\n\n  // ImageData user saves while exploring\n  const [savedPlot, setSavedPlot] = useState([]);\n\n  useEffect(() => {\n\n    if (wasmInitialized && inputFiles.files != null) {\n      if (tabSelected === \"new\") {\n        window.scranWorker.postMessage({\n          \"type\": \"RUN\",\n          \"payload\": {\n            \"files\": inputFiles,\n            \"params\": params\n          },\n          \"msg\": \"not much to pass\"\n        });\n      } else if (tabSelected === \"load\") {\n        if (loadParams !== null) {\n          window.scranWorker.postMessage({\n            \"type\": \"LOAD\",\n            \"payload\": {\n              \"files\": inputFiles,\n              \"params\": params\n            },\n            \"msg\": \"not much to pass\"\n          });\n        } else {\n          window.scranWorker.postMessage({\n            \"type\": \"IMPORT\",\n            \"payload\": {\n              \"files\": inputFiles\n            },\n            \"msg\": \"not much to pass\"\n          });\n        }\n      }\n\n      // setShowGame(true);\n    }\n  }, [inputFiles, params, wasmInitialized]);\n\n  useEffect(() => {\n\n    if (exportState) {\n      window.scranWorker.postMessage({\n        \"type\": \"EXPORT\",\n        \"payload\": {\n          \"files\": inputFiles,\n          \"params\": params\n        },\n        \"msg\": \"not much to pass\"\n      });\n\n      AppToaster.show({ icon:\"download\", intent: \"primary\", message: \"Exporting analysis in the background\" });\n    } else {\n      inputFiles?.files && AppToaster.show({ icon:\"download\", intent: \"primary\", message: \"Analysis saved. Please check your downloads directory!\" });\n    }\n  }, [exportState]);\n\n  return (\n    <AppContext.Provider\n      value={{\n        inputFiles, setInputFiles,\n        params, setParams,\n        error, setError,\n        wasmInitialized, setWasmInitialized,\n        pcaData, setPcaData,\n        pcaVarExp, setPcaVarExp,\n        tsneData, setTsneData,\n        umapData, setUmapData,\n        genesInfo, setGenesInfo,\n        initDims, setInitDims,\n        qcDims, setQcDims,\n        qcData, setQcData,\n        qcThreshold, setQcThreshold,\n        fSelDims, setFSelDims,\n        redDims, setRedDims,\n        defaultRedDims, setDefaultRedDims,\n        plotRedDims, setPlotRedDims,\n        clusterData, setClusterData,\n        fSelectionData, setFSelectionData,\n        logs, setLogs,\n        selectedCluster, setSelectedCluster,\n        selectedClusterSummary, setSelectedClusterSummary,\n        clusterRank, setClusterRank,\n        gene, setGene,\n        clusterColors, setClusterColors,\n        reqGene, setReqGene,\n        openInput, setOpenInput,\n        customSelection, setCustomSelection,\n        delCustomSelection, setDelCustomSelection,\n        showGame, setShowGame,\n        exportState, setExportState,\n        datasetName, setDatasetName,\n        tabSelected, setTabSelected,\n        loadParams, setLoadParams,\n        showAnimation, setShowAnimation,\n        triggerAnimation, setTriggerAnimation,\n        savedPlot, setSavedPlot\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppContextProvider;\n","import {\n    Button, Classes, Dialog, Text, FileInput, NumericInput,\n    Label, H5, Tag, HTMLSelect, Switch, Callout, Tabs, Tab\n} from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport React, { useContext, useState, useCallback, useEffect } from \"react\";\n\nimport { AppContext } from \"../../context/AppContext\";\nimport \"./Analysis.css\";\n\nfunction AnalysisDialog({\n    buttonText,\n    includeFooter,\n    ...props\n}) {\n    const [isOpen, setIsOpen] = useState(false);\n    const [showStepHelper, setShowStepHelper] = useState(1);\n    const handleButtonClick = useCallback(() => setIsOpen(!isOpen), [isOpen]);\n    const handleClose = useCallback(() => setIsOpen(false), []);\n\n    const { inputFiles, setInputFiles,\n        params, setParams, openInput,\n        tabSelected, setTabSelected,\n        loadParams, setLoadParams } = useContext(AppContext);\n\n    // assuming new is the default tab\n    let [tmpInputFiles, setTmpInputFiles] = useState({\n        gene: null,\n        mtx: null,\n        barcode: null,\n    });\n\n    const [inputText, setInputText] = useState({\n        mtx: \"Choose Matrix Market file\",\n        gene: \"Choose feature/gene annotation\",\n        barcode: \"Choose barcode annotation\",\n    });\n\n    let [tmpInputParams, setTmpInputParams] = useState(params);\n    let [tmpInputValid, setTmpInputValid] = useState(true);\n\n    const [newImportFormat, setNewImportFormat] = useState(\"mtx\");\n    // const [hdfFormat, sethdfFormat] = useState(\"tenx\");\n\n    function handleImport() {\n        setParams(tmpInputParams);\n\n        if (tabSelected === \"load\") {\n            setLoadParams(tmpInputParams);\n        }\n        setInputFiles({\n            \"format\": tabSelected == \"new\" ?\n                newImportFormat : \"kana\",\n            \"files\": tmpInputFiles\n        });\n\n        handleClose();\n    }\n\n    function handleTabInput(currTab, prevTab) {\n        if (currTab === \"new\") {\n            handleNewImportTab(newImportFormat);\n        } else if (currTab === \"load\") {\n            setTmpInputFiles({\n                file: null\n            });\n\n            setInputText({\n                file: \"Choose kana analysis file\"\n            });\n          \n            if (loadParams) {\n                setTmpInputParams(loadParams);\n            }\n        }\n        setTabSelected(currTab);\n    }\n\n    function handleNewImportTab(currTab, prevTab) {\n        if (currTab === \"mtx\") {\n            setTmpInputFiles({\n                gene: null,\n                mtx: null,\n                barcode: null,\n            });\n\n            setInputText({\n                mtx: \"Choose Matrix Market file\",\n                gene: \"Choose feature/gene annotation\",\n                barcode: \"Choose barcode annotation\",\n            });\n        } else if (currTab === \"tenx\") {\n\n            setTmpInputFiles({\n                file: null,\n            });\n\n            setInputText({\n                file: \"Choose 10x v3 H5 file\",\n            });\n        } else if (currTab === \"h5ad\") {\n            setTmpInputFiles({\n                file: null,\n            });\n\n            setInputText({\n                file: \"Choose H5ad file\",\n            });\n        }\n      \n        setTmpInputParams(params);\n        setNewImportFormat(currTab);\n    }\n\n    useEffect(() => {\n        openInput && setIsOpen(true);\n    }, [openInput]);\n\n    useEffect(() => {\n        if (tmpInputFiles) {\n            if (tabSelected === \"new\") {\n                if (newImportFormat === \"mtx\") {\n                    if (\n                        tmpInputFiles?.mtx && !(inputText?.mtx.toLowerCase().endsWith(\"mtx\") ||\n                            inputText?.mtx.toLowerCase().endsWith(\"mtx.gz\")\n                        ) ||\n                        tmpInputFiles?.gene && !(inputText?.gene.toLowerCase().endsWith(\"tsv\") ||\n                            inputText?.gene.toLowerCase().endsWith(\"tsv.gz\")\n                        ) ||\n                        tmpInputFiles?.barcode && !(inputText?.barcode.toLowerCase().endsWith(\"tsv\") ||\n                            inputText?.barcode.toLowerCase().endsWith(\"tsv.gz\")\n                        )\n                    ) {\n                        setTmpInputValid(false);\n                    } else {\n                        setTmpInputValid(true);\n                    }\n                } else if (newImportFormat === \"tenx\" || newImportFormat === \"h5ad\") {\n                    if (\n                        tmpInputFiles?.file && !(\n                            inputText?.file.toLowerCase().endsWith(\"hdf5\") ||\n                            inputText?.file.toLowerCase().endsWith(\"h5\") ||\n                            inputText?.file.toLowerCase().endsWith(\"h5ad\")\n                        )\n                    ) {\n                        setTmpInputValid(false);\n                    } else {\n                        setTmpInputValid(true);\n                    }\n                }\n\n            } else if (tabSelected === \"load\" && inputText?.file) {\n                if (\n                    tmpInputFiles?.file != null && !(inputText?.file.toLowerCase().endsWith(\"kana\") ||\n                        inputText?.file.toLowerCase().endsWith(\"kana.gz\")\n                    )\n                ) {\n                    setTmpInputValid(false);\n                } else {\n                    setTmpInputValid(true);\n                }\n            }\n        }\n    }, [tmpInputFiles]);\n\n    return (\n        <>\n            <Button onClick={handleButtonClick} icon=\"social-media\" intent=\"primary\" text={buttonText} />\n            <Dialog className=\"analysis-dialog\" {...props} isOpen={isOpen} onClose={handleClose}>\n\n                <div className={Classes.DIALOG_BODY}>\n\n                    <Tabs\n                        animate={true}\n                        renderActiveTabPanelOnly={true}\n                        vertical={false}\n                        onChange={handleTabInput}\n                        defaultSelectedTabId={tabSelected}\n                    >\n                        <Tab id=\"new\" title=\"Import new dataset\" panel={\n                            <div className=\"inputs-container\">\n                                <div className='row-input'>\n                                    <div className=\"col\"\n                                        style={{\n                                            // paddingTop: '10px',\n                                            paddingBottom: '15px'\n                                        }}>\n                                        <div>\n                                            <H5><Tag round={true}>1</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(1)}\n                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                    Load input files\n                                                </span>\n                                            </H5>\n                                            <Tabs\n                                                animate={true}\n                                                renderActiveTabPanelOnly={true}\n                                                vertical={true}\n                                                onChange={handleNewImportTab}\n                                                defaultSelectedTabId={newImportFormat}\n                                            >\n                                                <Tab id=\"mtx\" title=\"Matrix Market file\" panel={\n                                                    <div className=\"row\"\n                                                    >\n                                                        <Label className=\"row-input\">\n                                                            <FileInput text={inputText.mtx} onInputChange={(msg) => { setInputText({ ...inputText, \"mtx\": msg.target.files[0].name }); setTmpInputFiles({ ...tmpInputFiles, \"mtx\": msg.target.files }) }} />\n                                                        </Label>\n                                                        <Label className=\"row-input\">\n                                                            <FileInput text={inputText.gene} onInputChange={(msg) => { setInputText({ ...inputText, \"gene\": msg.target.files[0].name }); setTmpInputFiles({ ...tmpInputFiles, \"gene\": msg.target.files }) }} />\n                                                        </Label>\n                                                        {/* <Label className=\"row-input\">\n                                                            <FileInput text={inputText.barcode} onInputChange={(msg) => { setInputText({ ...inputText, \"barcode\": msg.target.files[0].name }); setTmpInputFiles({ ...tmpInputFiles, \"barcode\": msg.target.files }) }} />\n                                                        </Label> */}\n                                                    </div>\n                                                } />\n                                                <Tab id=\"tenx\" title=\"10x v3 H5\" panel={\n                                                    <div className=\"row\"\n                                                    >\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\">\n                                                                    Choose 10x V3 H5 file\n                                                                </span>\n                                                            </Text>\n                                                            <FileInput style={{\n                                                                marginTop: '5px'\n                                                            }}\n                                                                text={inputText.file}\n                                                                onInputChange={(msg) => {\n                                                                    setInputText({ ...inputText, \"file\": msg.target.files[0].name });\n                                                                    setTmpInputFiles({ ...tmpInputFiles, \"file\": msg.target.files })\n                                                                }} />\n                                                        </Label>\n\n                                                        {/* <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\">\n                                                                    HDF5 format\n                                                                </span>\n                                                            </Text>\n                                                            <HTMLSelect onChange={(nval, val) => sethdfFormat(nval?.currentTarget.key)}>\n                                                                <option key=\"tenx\">10x genomics</option>\n                                                                <option key=\"h5ad\">H5ad</option>\n                                                            </HTMLSelect>\n                                                        </Label> */}\n                                                    </div>\n                                                } />\n                                                <Tab id=\"h5ad\" title=\"H5ad\" panel={\n                                                    <div className=\"row\"\n                                                    >\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\">\n                                                                    Choose H5ad file\n                                                                </span>\n                                                            </Text>\n                                                            <FileInput style={{\n                                                                marginTop: '5px'\n                                                            }}\n                                                                text={inputText.file}\n                                                                onInputChange={(msg) => {\n                                                                    setInputText({ ...inputText, \"file\": msg.target.files[0].name });\n                                                                    setTmpInputFiles({ ...tmpInputFiles, \"file\": msg.target.files })\n                                                                }} />\n                                                        </Label>\n                                                    </div>\n                                                } />\n                                            </Tabs>\n\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col\">\n                                        <div>\n                                            <H5><Tag round={true}>2</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(2)}\n                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                    Quality control\n                                                </span>\n                                            </H5>\n                                            <div className=\"row\">\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(2)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Number of MADs\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"3\" value={tmpInputParams[\"qc\"][\"qc-nmads\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"qc\": { ...tmpInputParams[\"qc\"], \"qc-nmads\": nval } }) }} />\n                                                </Label>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col\">\n                                        <div>\n                                            <H5><Tag round={true}>3</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(3)}\n                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                    Feature Selection\n                                                </span>\n                                            </H5>\n                                            <div className=\"row\">\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(3)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Lowess span\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"0.3\" value={tmpInputParams[\"fSelection\"][\"fsel-span\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"fSelection\": { ...tmpInputParams[\"fSelection\"], \"fsel-span\": nval } }) }} />\n                                                </Label>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col\">\n                                        <div>\n                                            <H5><Tag round={true}>4</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(4)}\n                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                    Principal components analysis\n                                                </span>\n                                            </H5>\n                                            <div className=\"row\">\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(4)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Number of HVGs\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"2500\" value={tmpInputParams[\"pca\"][\"pca-hvg\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"pca\": { ...tmpInputParams[\"pca\"], \"pca-hvg\": nval } }) }} />\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(4)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Number of PCs\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"25\" value={tmpInputParams[\"pca\"][\"pca-npc\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"pca\": { ...tmpInputParams[\"pca\"], \"pca-npc\": nval } }) }} />\n                                                </Label>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col\">\n                                        <div>\n                                            <H5><Tag round={true}>5</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(5)}\n                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                    Clustering\n                                                </span>\n                                            </H5>\n                                            <div className=\"row\">\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(5)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Method\n                                                        </span>\n                                                    </Text>\n                                                    <HTMLSelect defaultValue={tmpInputParams[\"cluster\"][\"clus-method\"]}>\n                                                        <option>{tmpInputParams[\"cluster\"][\"clus-method\"]}</option>\n                                                    </HTMLSelect>\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(5)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Number of neighbors\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"10\" value={tmpInputParams[\"cluster\"][\"clus-k\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-k\": nval } }) }} />\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(5)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Use ANN\n                                                        </span>\n                                                    </Text>\n                                                    <Switch style={{ marginTop: '10px' }} large={true} checked={tmpInputParams[\"cluster\"][\"clus-approx\"]}\n                                                        innerLabelChecked=\"true\" innerLabel=\"false\"\n                                                        onChange={(e) => { setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-approx\": e.target.checked } }) }} />\n                                                </Label>\n\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(5)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Weighting scheme\n                                                        </span>\n                                                    </Text>\n                                                    <HTMLSelect onChange={(nval, val) => setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-scheme\": parseInt(nval?.currentTarget?.value) } })}>\n                                                        <option key=\"0\">Rank</option>\n                                                        <option key=\"1\">Number</option>\n                                                        <option key=\"2\">Jaccard</option>\n                                                    </HTMLSelect>\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(5)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Resolution\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"0.5\" value={tmpInputParams[\"cluster\"][\"clus-res\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-res\": nval } }) }} />\n                                                </Label>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col\">\n                                        <div>\n                                            <H5><Tag round={true}>6</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(6)}\n                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                    t-SNE\n                                                </span>\n                                            </H5>\n                                            <div className=\"row\">\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(6)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Perplexity\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"30\" value={tmpInputParams[\"tsne\"][\"tsne-perp\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"tsne\": { ...tmpInputParams[\"tsne\"], \"tsne-perp\": nval } }) }} />\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(6)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Iterations\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"500\" value={tmpInputParams[\"tsne\"][\"tsne-iter\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"tsne\": { ...tmpInputParams[\"tsne\"], \"tsne-iter\": nval } }) }} />\n                                                </Label>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col\">\n                                        <div>\n                                            <H5><Tag round={true}>7</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(7)}\n                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                    UMAP\n                                                </span>\n                                            </H5>\n                                            <div className=\"row\">\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(7)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Number of neighbors\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"15\" value={tmpInputParams[\"umap\"][\"umap-nn\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { ...tmpInputParams[\"umap\"], \"umap-nn\": nval } }) }} />\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(7)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Minimum distance\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"0.01\" value={tmpInputParams[\"umap\"][\"umap-min_dist\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { ...tmpInputParams[\"umap\"], \"umap-min_dist\": nval } }) }} />\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(7)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Epochs\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"500\" value={tmpInputParams[\"umap\"][\"umap-epoch\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { ...tmpInputParams[\"umap\"], \"umap-epoch\": nval } }) }} />\n                                                </Label>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div className=\"row-input-tooltips\">\n                                    {\n                                        !tmpInputValid &&\n                                        <Callout intent=\"danger\"\n                                            title=\"Incorrect file format\"\n                                            style={{\n                                                marginBottom: '10px'\n                                            }}>\n                                            <p>Upload files that in one of these formats;\n                                                <ul>\n                                                    <li>Matrix Market - <code>*.mtx</code> or <code>*.mtx.gz</code></li>\n                                                    <li>features or genes, <code>*.tsv</code> or <code>*.tsv.gz</code></li>\n                                                    <li>HDF5 (10x or h5ad) - <code>*.h5</code> or <code>*.hdf5</code> or <code>*.h5ad</code></li>\n                                                </ul>\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper == 1 &&\n                                        <Callout intent=\"primary\">\n                                            <p>We currently support files in the Cellranger format -\n                                                namely, a Matrix Market file containing the count matrix.\n                                                We also recommend supplying the feature annotation\n                                                (<code>features.tsv.gz</code> or <code>genes.tsv.gz</code>).\n                                                Users may also provide a TSV file containing the barcode annotations, if any.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper == 2 &&\n                                        <Callout intent=\"primary\">\n                                            <p>At this step, we compute per-cell quality control (QC)\n                                                metrics such as the total count per cell, the total number\n                                                of detected features and (if the feature annotation is supplied)\n                                                the mitochondrial proportion in each cell.\n                                            </p>\n                                            <p>We remove low-quality\n                                                cells based on these metrics - specifically, cells with low total\n                                                counts/number of detected features or high mitochondrial proportions\n                                                are filtered out.\n                                            </p>\n                                            <p>We use an outlier-based approach to define the\n                                                filter threshold under the assumption that most cells in the\n                                                dataset are of acceptable quality.\n                                            </p>\n                                            <p>\n                                                <strong>Number of MADs</strong>:\n                                                Number of median absolute deviations (MADs) from the median,\n                                                used to define a filter threshold in the appropriate direction\n                                                for each QC metric. Increasing this value will reduce the stringency\n                                                of the filtering.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper == 3 &&\n                                        <Callout intent=\"primary\">\n                                            <p>\n                                                Identify highly variable genes while accounting\n                                                for the mean-variance relationship. We do so by\n                                                fitting a mean-dependent trend to the variances,\n                                                computed from the log-transformed normalized expression\n                                                values. The residuals from the trend are then used to\n                                                rank highly variable genes.\n                                            </p>\n                                            <p>\n                                                <strong>Lowess span</strong>:\n                                                The span of the LOWESS smoother for fitting the mean-variance trend.\n                                                Larger values increase the smoothness of the global trend at the\n                                                cost of decreasing sensitivity to local variations.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper == 4 &&\n                                        <Callout intent=\"primary\">\n                                            <p>\n                                                Perform a principal components analysis (PCA)\n                                                to obtain per-cell coordinates in a low-dimensional space.\n                                                This is used to compact the data for faster downstream computation,\n                                                as well as to remove uninteresting high-dimensional noise.\n                                            </p>\n                                            <p>\n                                                <strong>Number of HVGs</strong>:\n                                                Number of highly variable genes to use to perform the PCA. Larger values\n                                                will capture more biological signal at the cost of increasing\n                                                noise and computational work.\n                                            </p>\n                                            <p>\n                                                <strong>Number of PCs</strong>:\n                                                Number of principal components with the highest variance\n                                                to retain in downstream analyses. Larger values will capture\n                                                more biological signal at the cost of increasing noise and\n                                                computational work.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper == 5 &&\n                                        <Callout intent=\"primary\">\n                                            <p>\n                                                Cluster cells into discrete groupings based on their\n                                                relative similarity in the low-dimensional space.\n                                                The set of clusters serve as a summary of the cellular\n                                                heterogeneity in the population, allowing us to easily\n                                                perform further characterization on subpopulations of\n                                                interest.\n                                            </p>\n                                            <p>\n                                                <strong>Method</strong>:\n                                                Clustering algorithm to use. Currently, we use multi-level\n                                                community detection on an shared nearest neighbor (SNN)\n                                                graph where cells are the nodes and edges are created\n                                                between neighboring cells.\n                                            </p>\n                                            <p>\n                                                <strong>Number of neighbors</strong>:\n                                                Number of neighbors to use to construct the shared\n                                                nearest neighbor graph. Larger values result in broader clusters.\n                                            </p>\n                                            <p>\n                                                <strong>Use ANN ?</strong>:\n                                                Use an approximate method to speed up the nearest neighbor search.\n                                                This sacrifices some accuracy for speed in larger datasets.\n                                            </p>\n                                            <p>\n                                                <strong>Weighting scheme</strong>:\n                                                Weighting scheme to use for the edges of the shared nearest neighbor graph.\n                                                The Rank approach derives a weight from the rank of the closest shared neighbor;\n                                                the Number approach uses the number of shared neighbors; and the Jaccard approach\n                                                uses the Jaccard index of the neighbor sets.\n                                            </p>\n                                            <p>\n                                                <strong>Resolution</strong>:\n                                                Resolution parameter for the multi-level clustering, used to adjust\n                                                the modularity calculation during community optimization.\n                                                Larger values yield more fine-grained clusters.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper == 6 &&\n                                        <Callout intent=\"primary\">\n                                            <p>\n                                                Create a t-SNE plot to visualize cells in two dimensions, because our\n                                                feeble human minds cannot interpret high-dimensional spaces.\n                                                Cells that were neighbors in the original space are kept close\n                                                together in the 2D embedding, while dissimilar cells are placed\n                                                (arbitrarily) far away.\n                                            </p>\n                                            <p>\n                                                <strong>Perplexity</strong>:\n                                                Perplexity parameter, which determines the size of the neighborhood of each cell.\n                                                Larger values will favor preservation of global structure in the 2D embedding.\n                                            </p>\n                                            <p>\n                                                <strong>Iterations</strong>:\n                                                Number of t-SNE iterations. Doesn't usually have much of an effect if\n                                                you leave it as it is.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper == 7 &&\n                                        <Callout title=\"Visually important content\" intent=\"primary\">\n                                            <p>\n                                                Create a UMAP plot to visualize cells in two dimensions.\n                                                Like the t-SNE, this aims to map cells from a high-dimensional\n                                                space into a 2D embedding, where neighboring cells are kept close\n                                                together and dissimilar cells are placed far apart.\n                                            </p>\n                                            <p>\n                                                <strong>Number of neighbors</strong>:\n                                                Number of neighbors to use when defining the size of the local neighborhood.\n                                                Larger values will favor preservation of global structure.\n                                            </p>\n                                            <p>\n                                                <strong>Minimum distance</strong>:\n                                                Minimum distance between points. Smaller values result in more tightly\n                                                packed embedding and favor local structure.\n                                            </p>\n                                            <p>\n                                                <strong>Epochs</strong>:\n                                                Number of epochs to use for convergence. This doesn't really\n                                                change all too much.\n                                            </p>\n                                        </Callout>\n                                    }\n                                </div>\n                            </div>\n                        } />\n                        <Tab id=\"load\" title=\"Load saved analysis\" panel={\n                            <div className=\"inputs-container\">\n                                <div className='row-input'>\n                                    <div className=\"col\">\n                                        <div>\n                                            <H5><Tag round={true}>1</Tag>\n                                                <span className=\"row-tooltip\">\n                                                    Load analysis file\n                                                </span>\n                                            </H5>\n                                            <div className=\"row\">\n                                                <Label className=\"row-input\">\n                                                    <FileInput text={inputText.file} onInputChange={(msg) => { setInputText({ ...inputText, \"file\": msg.target.files[0].name }); setTmpInputFiles({ ...tmpInputFiles, \"file\": msg.target.files }) }} />\n                                                </Label>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    {\n                                        loadParams ?\n                                            <div className=\"col\">\n                                                <div>\n                                                    <H5><Tag round={true}>2</Tag>\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(2)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Quality control\n                                                        </span>\n                                                    </H5>\n                                                    <div className=\"row\">\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(2)}\n                                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                                    Number of MADs\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"3\" value={tmpInputParams[\"qc\"][\"qc-nmads\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"qc\": { ...tmpInputParams[\"qc\"], \"qc-nmads\": nval } }) }} />\n                                                        </Label>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            : \"\"\n                                    }\n\n                                    {\n                                        loadParams ?\n                                            <div className=\"col\">\n                                                <div>\n                                                    <H5><Tag round={true}>3</Tag>\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(3)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Feature Selection\n                                                        </span>\n                                                    </H5>\n                                                    <div className=\"row\">\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(3)}\n                                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                                    Lowess span\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"0.3\" value={tmpInputParams[\"fSelection\"][\"fsel-span\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"fSelection\": { ...tmpInputParams[\"fSelection\"], \"fsel-span\": nval } }) }} />\n                                                        </Label>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            : \"\"\n                                    }\n\n                                    {\n                                        loadParams ?\n                                            <div className=\"col\">\n                                                <div>\n                                                    <H5><Tag round={true}>4</Tag>\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(4)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Principal components analysis\n                                                        </span>\n                                                    </H5>\n                                                    <div className=\"row\">\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(4)}\n                                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                                    Number of HVGs\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"2500\" value={tmpInputParams[\"pca\"][\"pca-hvg\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"pca\": { ...tmpInputParams[\"pca\"], \"pca-hvg\": nval } }) }} />\n                                                        </Label>\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(4)}\n                                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                                    Number of PCs\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"25\" value={tmpInputParams[\"pca\"][\"pca-npc\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"pca\": { ...tmpInputParams[\"pca\"], \"pca-npc\": nval } }) }} />\n                                                        </Label>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            : \"\"\n                                    }\n\n                                    {\n                                        loadParams ?\n                                            <div className=\"col\">\n                                                <div>\n                                                    <H5><Tag round={true}>5</Tag>\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(5)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Clustering\n                                                        </span>\n                                                    </H5>\n                                                    <div className=\"row\">\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(5)}\n                                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                                    Method\n                                                                </span>\n                                                            </Text>\n                                                            <HTMLSelect defaultValue={tmpInputParams[\"cluster\"][\"clus-method\"]}>\n                                                                <option>{tmpInputParams[\"cluster\"][\"clus-method\"]}</option>\n                                                            </HTMLSelect>\n                                                        </Label>\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(5)}\n                                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                                    Number of neighbors\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"10\" value={tmpInputParams[\"cluster\"][\"clus-k\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-k\": nval } }) }} />\n                                                        </Label>\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(5)}\n                                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                                    Use ANN\n                                                                </span>\n                                                            </Text>\n                                                            <Switch style={{ marginTop: '10px' }} large={true} checked={tmpInputParams[\"cluster\"][\"clus-approx\"]}\n                                                                innerLabelChecked=\"true\" innerLabel=\"false\"\n                                                                onChange={(e) => { setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-approx\": e.target.checked } }) }} />\n                                                        </Label>\n\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(5)}\n                                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                                    Weighting scheme\n                                                                </span>\n                                                            </Text>\n                                                            <HTMLSelect onChange={(nval, val) => setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-scheme\": parseInt(nval?.currentTarget?.value) } })}>\n                                                                <option key=\"0\">Rank</option>\n                                                                <option key=\"1\">Number</option>\n                                                                <option key=\"2\">Jaccard</option>\n                                                            </HTMLSelect>\n                                                        </Label>\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(5)}\n                                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                                    Resolution\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"0.5\" value={tmpInputParams[\"cluster\"][\"clus-res\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-res\": nval } }) }} />\n                                                        </Label>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            : \"\"\n                                    }\n\n                                    {\n                                        loadParams ?\n                                            <div className=\"col\">\n                                                <div>\n                                                    <H5><Tag round={true}>6</Tag>\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(6)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            t-SNE\n                                                        </span>\n                                                    </H5>\n                                                    <div className=\"row\">\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(6)}\n                                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                                    Perplexity\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"30\" value={tmpInputParams[\"tsne\"][\"tsne-perp\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"tsne\": { ...tmpInputParams[\"tsne\"], \"tsne-perp\": nval } }) }} />\n                                                        </Label>\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(6)}\n                                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                                    Iterations\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"500\" value={tmpInputParams[\"tsne\"][\"tsne-iter\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"tsne\": { ...tmpInputParams[\"tsne\"], \"tsne-iter\": nval } }) }} />\n                                                        </Label>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            : \"\"\n                                    }\n\n                                    {\n                                        loadParams ?\n                                            <div className=\"col\">\n                                                <div>\n                                                    <H5><Tag round={true}>7</Tag>\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(7)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            UMAP\n                                                        </span>\n                                                    </H5>\n                                                    <div className=\"row\">\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(7)}\n                                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                                    Number of neighbors\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"15\" value={tmpInputParams[\"umap\"][\"umap-nn\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { ...tmpInputParams[\"umap\"], \"umap-nn\": nval } }) }} />\n                                                        </Label>\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(7)}\n                                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                                    Minimum distance\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"0.01\" value={tmpInputParams[\"umap\"][\"umap-min_dist\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { ...tmpInputParams[\"umap\"], \"umap-min_dist\": nval } }) }} />\n                                                        </Label>\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(7)}\n                                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                                    Epochs\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"500\" value={tmpInputParams[\"umap\"][\"umap-epoch\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { ...tmpInputParams[\"umap\"], \"umap-epoch\": nval } }) }} />\n                                                        </Label>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            : \"\"\n                                    }\n                                </div>\n                                <div className='row-input-tooltips'>\n                                    {\n                                        !tmpInputValid &&\n                                        <Callout intent=\"danger\"\n                                            title=\"Incorrect file format\"\n                                            style={{\n                                                marginBottom: '10px'\n                                            }}>\n                                        </Callout>\n                                    }\n                                    <Callout intent=\"primary\">\n                                        Import a saved analysis from <strong>kana</strong>. These files\n                                        are gzipped and are stored as <strong><code>*.kana.gz</code></strong>.\n                                    </Callout>\n                                </div>\n                            </div>\n                        } />\n                    </Tabs>\n                </div >\n\n                {\n                    includeFooter ? (\n                        <div className={Classes.DIALOG_FOOTER} >\n                            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                                <Tooltip2 content=\"Run Analysis\">\n                                    <Button disabled={!tmpInputValid} icon=\"function\" onClick={handleImport}>Analyze</Button>\n                                </Tooltip2>\n                            </div>\n                        </div>\n                    ) : (\n                        <div style={{ margin: \"0 20px\" }}>\n                        </div>\n                    )\n                }\n            </Dialog >\n        </>\n    );\n}\n\nexport default AnalysisDialog;\n","import { useContext } from 'react';\nimport { AppContext } from '../../context/AppContext';\n\nconst Stats = () => {\n    const { initDims, qcDims } = useContext(AppContext);\n\n    return (\n        <>\n            {\n                <span>\n                    : {initDims ? `${initDims}` : \" ???\"}\n                    {qcDims ?  ` (after QC: ${qcDims})` : \"\" }\n                </span>\n            }\n        </>\n    );\n};\n\nexport default Stats;\n","import {\n    Button,\n    Classes,\n    Drawer,\n    Position,\n} from \"@blueprintjs/core\";\nimport React, { useState, useContext } from 'react';\n\nimport { AppContext } from '../../context/AppContext';\n\nconst Logs = () => {\n    const { logs } = useContext(AppContext);\n\n    const [state, setState] = useState({\n        autoFocus: true,\n        canEscapeKeyClose: true,\n        canOutsideClickClose: true,\n        enforceFocus: true,\n        hasBackdrop: true,\n        isOpen: false,\n        position: Position.RIGHT,\n        size: undefined,\n        usePortal: true,\n    });\n\n    const handleOpen = () => setState({ isOpen: true });\n\n    const handleClose = () => setState({ isOpen: false });\n\n    return (\n        <>\n            <Button onClick={handleOpen} icon=\"wrench\" outlined={true}\n                intent=\"warning\"></Button>\n            <Drawer\n                icon=\"info-sign\"\n                onClose={handleClose}\n                title=\"What's happening ?\"\n                {...state}\n            >\n                <div className={Classes.DRAWER_BODY}>\n                    <div className={Classes.DIALOG_BODY}>\n                        <ul className=\"list\">\n                            {\n                                logs.map((x, i) => (\n                                    <li key={i}>{x}</li>\n                                ))\n                            }\n                        </ul>\n                    </div>\n                </div>\n            </Drawer>\n        </>\n    )\n}\n\nexport default Logs;\n","import {\n    Button, Classes, Dialog, H5, Card, Elevation\n} from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport React, { useContext, useState, useCallback } from \"react\";\n\nimport { AppContext } from \"../../context/AppContext\";\n\nfunction IntroDialog({\n    buttonText,\n    includeFooter,\n    ...props\n}) {\n    const { setOpenInput } = useContext(AppContext);\n\n    const [isOpen, setIsOpen] = useState(true);\n    const [showClose, setShowClose] = useState(false);\n\n    const handleButtonClick = useCallback(() => {\n        setIsOpen(!isOpen);\n        setShowClose(true);\n    }, [isOpen]);\n    const handleClose = useCallback(() => setIsOpen(false), []);\n\n    const handleInputs = () => {\n        setOpenInput(true);\n        handleClose();\n    }\n\n    return (\n        <>\n            <Button onClick={handleButtonClick} icon=\"info-sign\" intent=\"primary\" text=\"\" />\n            <Dialog {...props} isOpen={isOpen} onClose={handleClose}>\n                <div className={Classes.DIALOG_BODY}>\n                    <Card elevation={Elevation.ZERO}>\n                        <p><strong>kana</strong> performs a standard scRNA-seq data analysis directly inside the browser.</p>\n\n                        <p>With just a few clicks, you can get a UMAP/t-SNE and marker genes in an intuitive interface for further exploration.\n                            No need to transfer data, no need to install software, no need to configure a backend server -\n                            just point to a Matrix Market file and we'll analyze <em>your</em> data on <em>your</em> computer, no questions asked.\n                        </p>\n                        <p>Check out our <a href=\"https://github.com/jkanche/scran.js.app\" target=\"_blank\">GitHub page</a> for more details.\n                            Or you could just play around with the app to see what it can do - after all, it's totally free!\n                        </p>\n                        <H5>Authors</H5>\n                        Jayaram Kancherla (<a href=\"https://github.com/jkanche\" target=\"_blank\"><strong>@jkanche</strong></a>),\n                        Aaron Lun (<a href=\"https://github.com/LTLA\" target=\"_blank\"><strong>@LTLA</strong></a>)\n                    </Card>\n                </div>\n                <div className={Classes.DIALOG_FOOTER}>\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                        {\n                            showClose ? <Button icon=\"cross\" onClick={handleClose}>Close</Button>\n                                :\n                                <Tooltip2 content=\"行くぞ!\">\n                                    <Button icon=\"bring-data\" onClick={handleInputs}>Get started</Button>\n                                </Tooltip2>\n                        }\n                    </div>\n                </div>\n            </Dialog>\n        </>\n    );\n}\n\nexport default IntroDialog;\n","import {\n  Alignment,\n  Button,\n  Navbar,\n  NavbarDivider,\n  NavbarGroup,\n  NavbarHeading,\n  ButtonGroup,\n  Menu,\n  MenuItem,\n  EditableText\n} from \"@blueprintjs/core\";\n\nimport { Popover2, Tooltip2 } from \"@blueprintjs/popover2\";\n\nimport { useContext, useState } from 'react';\n\nimport AnalysisDialog from '../Analysis';\nimport Stats from '../Stats';\nimport Logs from '../Logs';\nimport IntroDialog from \"../Intro\";\n\nimport { AppContext } from \"../../context/AppContext\";\n\nconst Header = () => {\n  // state for dialogs\n  const [state] = useState({\n    autoFocus: true,\n    canEscapeKeyClose: true,\n    canOutsideClickClose: false,\n    enforceFocus: true,\n    shouldReturnFocusOnClose: true,\n  });\n\n  const { setExportState, datasetName, setDatasetName } = useContext(AppContext);\n\n  return (\n    <>\n      <Navbar className=\"bp3-dark\">\n        <NavbarGroup className=\"navbar-group\" align={Alignment.LEFT}>\n\n          <NavbarHeading>kana</NavbarHeading>\n\n          <NavbarDivider />\n          <span>Single cell RNA-seq analysis in the browser</span>\n          <NavbarDivider />\n\n          <AnalysisDialog\n            icon=\"document\"\n            title=\"Import dataset & update parameters (mouseover for info)\"\n            buttonText=\"Start Analysis\"\n            includeFooter={true}\n            {...state} />\n          <NavbarDivider />\n\n          <Tooltip2 content=\"Modify dataset title\">\n            <EditableText defaultValue={datasetName} intent=\"primary\"\n              onConfirm={(val) => { setDatasetName(val) }} />\n          </Tooltip2>\n\n          <Stats />\n          <NavbarDivider />\n\n          <ButtonGroup>\n            <Popover2 content={\n              <Menu>\n                <MenuItem text=\"Save\" icon=\"floppy-disk\" disabled={true} />\n                <MenuItem text=\"Download\" icon=\"download\"\n                  onClick={() => {\n                    setExportState(true);\n                  }} />\n              </Menu>\n            } placement=\"bottom-start\">\n              <Button intent=\"warning\" rightIcon=\"caret-down\" text=\"Export\" />\n            </Popover2>\n          </ButtonGroup>\n          <NavbarDivider />\n\n          <Logs />\n          <NavbarDivider />\n\n          <IntroDialog\n            icon=\"document\"\n            title=\"Single-cell RNA-seq analysis in the browser\"\n            isOpen={true}\n            {...state}\n          />\n        </NavbarGroup>\n      </Navbar>\n    </>\n  );\n};\n\nexport default Header;\n","import { useEffect, useRef } from \"react\";\nimport * as d3 from 'd3';\n\n// a typical d3 bar plot\nconst BarPlot = (props) => {\n    const container = useRef();\n\n    useEffect(() => {\n        let data = props?.data;\n        let propwidth = props?.width;\n        let color = props?.color;\n        let ymax = props?.ymax;\n\n        if (!ymax) {\n            ymax = Math.max(...data.map((d) => { return d.value; }));\n        }\n\n        if (!propwidth) {\n            propwidth = 325;\n        }\n\n        if (!color) {\n            color = \"#00B3A4\";\n        }\n\n        if (!data) return \"\";\n\n        let containerEl = container.current;\n        containerEl.innerHTML = \"\";\n\n        const margin = { top: 10, right: 30, bottom: 30, left: 40 },\n            width = propwidth - margin.left - margin.right,\n            height = 200 - margin.top - margin.bottom;\n\n        const svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                `translate(${margin.left},${margin.top})`);\n\n        var x = d3.scaleBand()\n            .range([0, width])\n            .domain(data.map((d) => { return d.key; }))\n            .padding(0.2);\n\n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x))\n            .selectAll(\"text\")\n            .attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n            .style(\"text-anchor\", \"end\");\n\n        var y = d3.scaleLinear()\n            .domain([0, ymax])\n            .range([height, 0]);\n\n        svg.append(\"g\")\n            .call(d3.axisLeft(y));\n\n        svg.selectAll(\"bars\")\n            .data(data)\n            .enter()\n            .append(\"rect\")\n            .attr(\"x\", (d) => { return x(d.key); })\n            .attr(\"y\", (d) => { return y(d.value); })\n            .attr(\"width\", x.bandwidth())\n            .attr(\"height\", (d) => { return height - y(d.value); })\n            .attr(\"fill\", (d, i) => {\n                if (Array.isArray(color)) {\n                    return color[i];\n                }\n                return color;\n            })\n    }, []);\n\n    return (\n        <div ref={container}></div>\n    );\n};\n\nexport default BarPlot;","import BarPlot from './BarPlot';\n\nconst PCABarPlot = (props) => {\n\n    let data = props?.pca?.var_exp;\n\n    if (!data) return \"\";\n\n    let chart_data = [];\n    Object.values(data)?.forEach((x, i) => {\n        chart_data.push({\n            key: i + 1,\n            value: x * 100\n        });\n    });\n\n    return (\n        <BarPlot data={chart_data} />\n    );\n};\n\nexport default PCABarPlot;","import { randomColor } from 'randomcolor';\nimport { useContext, useEffect, useState } from 'react';\nimport { AppContext } from '../../context/AppContext';\nimport BarPlot from './BarPlot';\n\nconst ClusterBarPlot = (props) => {\n\n    let data = props?.data?.clusters;\n\n    const { setClusterColors } = useContext(AppContext);\n    const [tmpColors, setTmpColors] = useState(null);\n\n    useEffect(() => {\n        let cluster_count = Object.keys(x).length;\n        let cluster_colors = null;\n        if (cluster_count > Object.keys(palette).length) {\n            cluster_colors = randomColor({ luminosity: 'dark', count: cluster_count + 1 });\n        } else {\n            cluster_colors = palette[cluster_count.toString()];\n        }\n        setTmpColors(cluster_colors);\n    }, []);\n\n    useEffect(() => {\n        setClusterColors(tmpColors);\n    }, [tmpColors]);\n\n    if (!data) return \"\";\n\n\n    const palette = {\n        1: ['#1b9e77'],\n        2: ['#1b9e77', '#d95f02'],\n        3: ['#1b9e77', '#d95f02', '#7570b3'],\n        4: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a'],\n        5: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e'],\n        6: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02'],\n        7: [\n            '#1b9e77',\n            '#d95f02',\n            '#7570b3',\n            '#e7298a',\n            '#66a61e',\n            '#e6ab02',\n            '#a6761d',\n        ],\n        8: [\n            '#1b9e77',\n            '#d95f02',\n            '#7570b3',\n            '#e7298a',\n            '#66a61e',\n            '#e6ab02',\n            '#a6761d',\n            '#666666',\n        ],\n        9: [\n            '#a6cee3',\n            '#1f78b4',\n            '#b2df8a',\n            '#33a02c',\n            '#fb9a99',\n            '#e31a1c',\n            '#fdbf6f',\n            '#ff7f00',\n            '#cab2d6',\n        ],\n        10: [\n            '#a6cee3',\n            '#1f78b4',\n            '#b2df8a',\n            '#33a02c',\n            '#fb9a99',\n            '#e31a1c',\n            '#fdbf6f',\n            '#ff7f00',\n            '#cab2d6',\n            '#6a3d9a',\n        ],\n        11: [\n            '#a6cee3',\n            '#1f78b4',\n            '#b2df8a',\n            '#33a02c',\n            '#fb9a99',\n            '#e31a1c',\n            '#fdbf6f',\n            '#ff7f00',\n            '#cab2d6',\n            '#6a3d9a',\n            '#ffff99',\n        ],\n        12: [\n            '#a6cee3',\n            '#1f78b4',\n            '#b2df8a',\n            '#33a02c',\n            '#fb9a99',\n            '#e31a1c',\n            '#fdbf6f',\n            '#ff7f00',\n            '#cab2d6',\n            '#6a3d9a',\n            '#ffff99',\n            '#b15928',\n        ],\n    };\n\n    let x = {};\n    for (var i = 0; i < data?.length; i++) {\n        var clus = data[i];\n        if (\"CLUS_\" + clus in x) {\n            x[\"CLUS_\" + clus]++;\n        } else {\n            x[\"CLUS_\" + clus] = 0;\n        }\n    }\n\n    let chart_data = [];\n    Object.values(x)?.forEach((z, i) => {\n        chart_data.push({\n            key: i + 1,\n            value: z\n        });\n    });\n\n    return (\n        tmpColors && <BarPlot data={chart_data} color={tmpColors} />\n    );\n};\n\nexport default ClusterBarPlot;","import { useEffect, useRef } from \"react\";\nimport * as d3 from 'd3';\n\nconst ViolinPlotBasic = (props) => {\n    const container = useRef();\n\n    useEffect(() => {\n\n        let data = props?.rdata;\n        let propwidth = props?.width;\n        let color = props?.color;\n\n        if (!propwidth) {\n            propwidth = 200;\n        }\n\n        if (!color) {\n            color = \"#00B3A4\";\n        }\n\n        if (!data) return \"\";\n\n        let containerEl = container.current;\n        containerEl.innerHTML = \"\";\n\n        const margin = { top: 10, right: 30, bottom: 30, left: 40 },\n            width = propwidth - margin.left - margin.right,\n            height = 200 - margin.top - margin.bottom;\n\n        const svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                `translate(${margin.left},${margin.top})`);\n\n        var y = d3.scaleLinear()\n            .domain(props?.range)\n            .range([height, 0]).nice();\n\n        svg.append(\"g\").call(\n            d3.axisLeft(y)\n                .tickFormat(function (d) {\n                    return props?.transform === \"log\" ? d3.format(\".2s\")(Math.pow(2, d)) : d3.format(\".2s\")(d * 100);\n                }));\n\n        var x = d3.scaleBand()\n            .range([0, width])\n            .domain([props?.showLabel])\n            .padding(0.05)\n\n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x))\n\n        var histogram = d3.bin()\n            .domain(y.domain())\n            .thresholds(y.ticks(10))\n            .value(d => d)\n\n        let bins = histogram(data);\n        var max_bin = d3.max(bins, (d) => { return d.length; })\n\n        var xNum = d3.scaleLinear()\n            .range([0, x.bandwidth()])\n            .domain([-1, 1]);\n\n        svg\n            .selectAll(\"violins\")\n            .data([props?.label])\n            .enter()\n            .append(\"g\")\n            .attr(\"transform\", (d) => { return (\"translate(\" + x(d) + \" ,0)\") })\n            .append(\"path\")\n            .datum(() => { return bins })\n            .style(\"stroke\", \"none\")\n            .style(\"fill\", color)\n            .attr(\"d\", d3.area()\n                .x0((d) => { return (xNum(-d.length / max_bin)) })\n                .x1((d) => { return (xNum(d.length / max_bin)) })\n                .y((d) => { return (y(d.x0)) })\n                .curve(d3.curveBasis)\n            );\n\n        svg\n            .selectAll(\"threshold\")\n            .data([props?.threshold])\n            .enter()\n            .append(\"line\")\n            .attr(\"transform\", () => { return (\"translate(\" + x(props?.label) + \" ,0)\") })\n            .attr(\"class\", \"threshold\")\n            .attr(\"x1\", 5)\n            .attr(\"y1\", (d) => y(d))\n            .attr(\"x2\", x.bandwidth() - 5)\n            .attr(\"y2\", (d) => y(d))\n            .attr(\"stroke-width\", 2)\n            .attr(\"stroke\", \"Orange\")\n            .on(\"mouseover\", function () {\n                var lines = d3.select(this);\n                lines.attr(\"stroke\", \"black\");\n                lines.attr(\"stroke-width\", \"8\");\n            })\n            .on(\"mouseout\", function () {\n                var lines = d3.select(this);\n                lines.attr(\"stroke\", \"Orange\");\n                lines.attr(\"stroke-width\", \"5\");\n            });\n    }, []);\n\n    return (\n        <div ref={container}></div>\n    );\n};\n\nexport default ViolinPlotBasic;","import ViolinPlotBasic from './ViolinPlotBasic';\nimport './QCPlots.css';\n\n// shows the QC plots for sums, detected and proportion\n// transforms data to a log scale or %\nconst QCPlotMgr = (props) => {\n\n    let qcData = props.data;\n\n    return (\n        <div className=\"qc-plots\">\n            {\n                [\"sums\", \"detected\", \"proportion\"].map(x => {\n                    const props2 = {\n                        \"threshold\": x !== \"proportion\" ?\n                        Math.log2(qcData?.[\"thresholds\"]?.[x]) : qcData?.[\"thresholds\"]?.[x] * 100,\n                        \"range\": x !== \"proportion\" ? \n                            qcData?.[\"ranges\"]?.[x].map((x) => Math.log2(x + 1)) :\n                            qcData?.[\"ranges\"]?.[x].map((x) => x * 100),\n                        \"label\": x,\n                        \"transform\": x !== \"proportion\" ? \"log\" : \"perc\",\n                        \"showLabel\": x !== \"proportion\" ? \n                        x: x,\n                        \"rdata\": x !== \"proportion\" ? \n                            qcData?.[\"data\"]?.[x].map((x) => Math.log2(x + 1)) :\n                            qcData?.[\"data\"]?.[x].map((x) => x * 100)\n                    }\n                    return (\n                        <div key={x}>\n                            <ViolinPlotBasic {...props2} />\n                        </div>)\n                })\n            }\n        </div>\n    );\n};\n\nexport default QCPlotMgr;","import { Button, Icon } from \"@blueprintjs/core\";\nimport { useEffect, useRef, useState, useContext } from \"react\";\nimport { AppContext } from \"../../context/AppContext\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\n\nimport './ImgPlot.css';\n\nconst ImgPlot = (props) => {\n    const container = useRef();\n    const [title, setTitle] = useState(null);\n\n    const { genesInfo, selectedClusterSummary } = useContext(AppContext);\n\n    let data = props?.data;\n    let propwidth = props?.width;\n    let propheight = props?.height;\n    let color = props?.color;\n\n    if (!propwidth) {\n        propwidth = 325;\n    }\n\n    if (!propheight) {\n        propheight = 200\n    }\n\n    if (!color) {\n        color = \"#00B3A4\";\n    }\n\n    useEffect(() => {\n        let containerEL = container.current;\n        if (containerEL) {\n\n            if (data?.image) {\n                let ctx = containerEL.getContext(\"2d\");\n\n                var img = new Image;\n                img.onload = function () {\n                    ctx.drawImage(img, 0, 0, propwidth, propheight);\n                };\n                img.src = data?.image;\n                // ctx.putImageData(data?.image, 0, 0);\n            }\n\n            let text = ` ${data?.config?.embedding} `\n            if (data?.config?.gene) {\n                text += `⊃ ${genesInfo[selectedClusterSummary?.[data?.config?.gene]?.row]} `\n            }\n\n            if (data?.config?.highlight) {\n                text += `⊃ Cluster ${parseInt(data?.config?.highlight + 1)} `\n            }\n\n            setTitle(text);\n        }\n    }, []);\n\n    return (\n        <div className=\"imgplot-container\">\n            <h5>{title}</h5>\n            <Button small={true} className=\"imgplot-save\" icon=\"download\"\n                onClick={() => {\n                    let tmpLink = document.createElement(\"a\");\n                    // var fileNew = new Blob([resp], {\n                    //     type: \"text/plain\"\n                    // });\n                    tmpLink.href = data?.image;\n                    tmpLink.download = `${title.replace(\"⊃\", \"\").split(\" \").join(\"_\")}.png`;\n                    tmpLink.click();\n                }}>Save</Button>\n            <canvas className=\"imgplot-canvas\" width={propwidth} height={propheight} ref={container}></canvas>\n        </div>\n    );\n};\n\nexport default ImgPlot;","import React from \"react\";\nimport PCABarPlot from \"../Plots/PCABarPlot\";\nimport ClusterBarPlot from \"../Plots/ClusterBarPlot\";\nimport { useContext } from 'react';\nimport { AppContext } from './../../context/AppContext';\nimport { Card, Elevation } from \"@blueprintjs/core\";\nimport QCPlotMgr from \"../Plots/QCPlotMgr\";\n\nimport './Gallery.css';\nimport ImgPlot from \"../Plots/ImgPlot\";\n\nconst Gallery = () => {\n  const { pcaVarExp, qcData, clusterData, savedPlot } = useContext(AppContext);\n\n  return (\n    <>\n      <div className=\"gallery-cont\">\n        {\n          qcData && qcData?.[\"thresholds\"] ?\n            <Card className=\"gallery-elem\" elevation={Elevation.ONE}>\n              <h5>QC Statistics</h5>\n              <QCPlotMgr data={qcData} />\n            </Card>\n            : \"\"\n        }\n        {\n          pcaVarExp ?\n            <Card className=\"gallery-elem\" elevation={Elevation.ONE}>\n              <h5>PCA (% variance explained)</h5>\n              <PCABarPlot pca={pcaVarExp} />\n            </Card>\n            : \"\"\n        }\n        {\n          clusterData ?\n            <Card className=\"gallery-elem\" elevation={Elevation.ONE}>\n              <h5># of cells per cluster</h5>\n              <ClusterBarPlot data={clusterData} />\n            </Card>\n            : \"\"\n        }\n        {\n          savedPlot ?\n            savedPlot.map((x, i) => (\n                <Card key={i} className=\"gallery-elem\" elevation={Elevation.ONE}>\n                  <ImgPlot data={x} />\n                </Card>\n              )\n            ) : \"\"\n        }\n      </div>\n    </>\n  );\n};\n\nexport default Gallery;\n","const getMinMax = (arr) => {\n    var max = -Number.MAX_VALUE,\n        min = Number.MAX_VALUE;\n    arr.forEach(function (x) {\n        if (max < x) {\n            max = x;\n        }\n        if (min > x) {\n            min = x;\n        }\n    });\n    return [min, max];\n}\n\nexport default getMinMax;","/*\nRainbowVis-JS \nReleased under Eclipse Public License - v 1.0\n*/\n\nexport default function Rainbow() {\n\t\"use strict\";\n\tvar gradients = null;\n\tvar minNum = 0;\n\tvar maxNum = 100;\n\tvar colours = ['ff0000', 'ffff00', '00ff00', '0000ff'];\n\tsetColours(colours);\n\n\tfunction setColours(spectrum) {\n\t\tif (spectrum.length < 2) {\n\t\t\tthrow new Error('Rainbow must have two or more colours.');\n\t\t} else {\n\t\t\tvar increment = (maxNum - minNum) / (spectrum.length - 1);\n\t\t\tvar firstGradient = new ColourGradient();\n\t\t\tfirstGradient.setGradient(spectrum[0], spectrum[1]);\n\t\t\tfirstGradient.setNumberRange(minNum, minNum + increment);\n\t\t\tgradients = [firstGradient];\n\n\t\t\tfor (var i = 1; i < spectrum.length - 1; i++) {\n\t\t\t\tvar colourGradient = new ColourGradient();\n\t\t\t\tcolourGradient.setGradient(spectrum[i], spectrum[i + 1]);\n\t\t\t\tcolourGradient.setNumberRange(minNum + increment * i, minNum + increment * (i + 1));\n\t\t\t\tgradients[i] = colourGradient;\n\t\t\t}\n\n\t\t\tcolours = spectrum;\n\t\t}\n\t}\n\n\tthis.setSpectrum = function () {\n\t\tsetColours(arguments);\n\t\treturn this;\n\t}\n\n\tthis.setSpectrumByArray = function (array) {\n\t\tsetColours(array);\n\t\treturn this;\n\t}\n\n\tthis.colourAt = function (number) {\n\t\tif (isNaN(number)) {\n\t\t\tthrow new TypeError(number + ' is not a number');\n\t\t} else if (gradients.length === 1) {\n\t\t\treturn gradients[0].colourAt(number);\n\t\t} else {\n\t\t\tvar segment = (maxNum - minNum) / (gradients.length);\n\t\t\tvar index = Math.min(Math.floor((Math.max(number, minNum) - minNum) / segment), gradients.length - 1);\n\t\t\treturn gradients[index].colourAt(number);\n\t\t}\n\t}\n\n\tthis.colorAt = this.colourAt;\n\n\tthis.setNumberRange = function (minNumber, maxNumber) {\n\t\tif (maxNumber > minNumber) {\n\t\t\tminNum = minNumber;\n\t\t\tmaxNum = maxNumber;\n\t\t\tsetColours(colours);\n\t\t} else {\n\t\t\tthrow new RangeError('maxNumber (' + maxNumber + ') is not greater than minNumber (' + minNumber + ')');\n\t\t}\n\t\treturn this;\n\t}\n}\n\nfunction ColourGradient() {\n\t\"use strict\";\n\tvar startColour = 'ff0000';\n\tvar endColour = '0000ff';\n\tvar minNum = 0;\n\tvar maxNum = 100;\n\n\tthis.setGradient = function (colourStart, colourEnd) {\n\t\tstartColour = getHexColour(colourStart);\n\t\tendColour = getHexColour(colourEnd);\n\t}\n\n\tthis.setNumberRange = function (minNumber, maxNumber) {\n\t\tif (maxNumber > minNumber) {\n\t\t\tminNum = minNumber;\n\t\t\tmaxNum = maxNumber;\n\t\t} else {\n\t\t\tthrow new RangeError('maxNumber (' + maxNumber + ') is not greater than minNumber (' + minNumber + ')');\n\t\t}\n\t}\n\n\tthis.colourAt = function (number) {\n\t\treturn calcHex(number, startColour.substring(0, 2), endColour.substring(0, 2))\n\t\t\t+ calcHex(number, startColour.substring(2, 4), endColour.substring(2, 4))\n\t\t\t+ calcHex(number, startColour.substring(4, 6), endColour.substring(4, 6));\n\t}\n\n\tfunction calcHex(number, channelStart_Base16, channelEnd_Base16) {\n\t\tvar num = number;\n\t\tif (num < minNum) {\n\t\t\tnum = minNum;\n\t\t}\n\t\tif (num > maxNum) {\n\t\t\tnum = maxNum;\n\t\t}\n\t\tvar numRange = maxNum - minNum;\n\t\tvar cStart_Base10 = parseInt(channelStart_Base16, 16);\n\t\tvar cEnd_Base10 = parseInt(channelEnd_Base16, 16);\n\t\tvar cPerUnit = (cEnd_Base10 - cStart_Base10) / numRange;\n\t\tvar c_Base10 = Math.round(cPerUnit * (num - minNum) + cStart_Base10);\n\t\treturn formatHex(c_Base10.toString(16));\n\t}\n\n\tfunction formatHex(hex) {\n\t\tif (hex.length === 1) {\n\t\t\treturn '0' + hex;\n\t\t} else {\n\t\t\treturn hex;\n\t\t}\n\t}\n\n\tfunction isHexColour(string) {\n\t\tvar regex = /^#?[0-9a-fA-F]{6}$/i;\n\t\treturn regex.test(string);\n\t}\n\n\tfunction getHexColour(string) {\n\t\tif (isHexColour(string)) {\n\t\t\treturn string.substring(string.length - 6, string.length);\n\t\t} else {\n\t\t\tvar name = string.toLowerCase();\n\t\t\tif (colourNames.hasOwnProperty(name)) {\n\t\t\t\treturn colourNames[name];\n\t\t\t}\n\t\t\tthrow new Error(string + ' is not a valid colour.');\n\t\t}\n\t}\n\n\t// Extended list of CSS colornames s taken from\n\t// http://www.w3.org/TR/css3-color/#svg-color\n\tvar colourNames = {\n\t\taliceblue: \"F0F8FF\",\n\t\tantiquewhite: \"FAEBD7\",\n\t\taqua: \"00FFFF\",\n\t\taquamarine: \"7FFFD4\",\n\t\tazure: \"F0FFFF\",\n\t\tbeige: \"F5F5DC\",\n\t\tbisque: \"FFE4C4\",\n\t\tblack: \"000000\",\n\t\tblanchedalmond: \"FFEBCD\",\n\t\tblue: \"0000FF\",\n\t\tblueviolet: \"8A2BE2\",\n\t\tbrown: \"A52A2A\",\n\t\tburlywood: \"DEB887\",\n\t\tcadetblue: \"5F9EA0\",\n\t\tchartreuse: \"7FFF00\",\n\t\tchocolate: \"D2691E\",\n\t\tcoral: \"FF7F50\",\n\t\tcornflowerblue: \"6495ED\",\n\t\tcornsilk: \"FFF8DC\",\n\t\tcrimson: \"DC143C\",\n\t\tcyan: \"00FFFF\",\n\t\tdarkblue: \"00008B\",\n\t\tdarkcyan: \"008B8B\",\n\t\tdarkgoldenrod: \"B8860B\",\n\t\tdarkgray: \"A9A9A9\",\n\t\tdarkgreen: \"006400\",\n\t\tdarkgrey: \"A9A9A9\",\n\t\tdarkkhaki: \"BDB76B\",\n\t\tdarkmagenta: \"8B008B\",\n\t\tdarkolivegreen: \"556B2F\",\n\t\tdarkorange: \"FF8C00\",\n\t\tdarkorchid: \"9932CC\",\n\t\tdarkred: \"8B0000\",\n\t\tdarksalmon: \"E9967A\",\n\t\tdarkseagreen: \"8FBC8F\",\n\t\tdarkslateblue: \"483D8B\",\n\t\tdarkslategray: \"2F4F4F\",\n\t\tdarkslategrey: \"2F4F4F\",\n\t\tdarkturquoise: \"00CED1\",\n\t\tdarkviolet: \"9400D3\",\n\t\tdeeppink: \"FF1493\",\n\t\tdeepskyblue: \"00BFFF\",\n\t\tdimgray: \"696969\",\n\t\tdimgrey: \"696969\",\n\t\tdodgerblue: \"1E90FF\",\n\t\tfirebrick: \"B22222\",\n\t\tfloralwhite: \"FFFAF0\",\n\t\tforestgreen: \"228B22\",\n\t\tfuchsia: \"FF00FF\",\n\t\tgainsboro: \"DCDCDC\",\n\t\tghostwhite: \"F8F8FF\",\n\t\tgold: \"FFD700\",\n\t\tgoldenrod: \"DAA520\",\n\t\tgray: \"808080\",\n\t\tgreen: \"008000\",\n\t\tgreenyellow: \"ADFF2F\",\n\t\tgrey: \"808080\",\n\t\thoneydew: \"F0FFF0\",\n\t\thotpink: \"FF69B4\",\n\t\tindianred: \"CD5C5C\",\n\t\tindigo: \"4B0082\",\n\t\tivory: \"FFFFF0\",\n\t\tkhaki: \"F0E68C\",\n\t\tlavender: \"E6E6FA\",\n\t\tlavenderblush: \"FFF0F5\",\n\t\tlawngreen: \"7CFC00\",\n\t\tlemonchiffon: \"FFFACD\",\n\t\tlightblue: \"ADD8E6\",\n\t\tlightcoral: \"F08080\",\n\t\tlightcyan: \"E0FFFF\",\n\t\tlightgoldenrodyellow: \"FAFAD2\",\n\t\tlightgray: \"D3D3D3\",\n\t\tlightgreen: \"90EE90\",\n\t\tlightgrey: \"D3D3D3\",\n\t\tlightpink: \"FFB6C1\",\n\t\tlightsalmon: \"FFA07A\",\n\t\tlightseagreen: \"20B2AA\",\n\t\tlightskyblue: \"87CEFA\",\n\t\tlightslategray: \"778899\",\n\t\tlightslategrey: \"778899\",\n\t\tlightsteelblue: \"B0C4DE\",\n\t\tlightyellow: \"FFFFE0\",\n\t\tlime: \"00FF00\",\n\t\tlimegreen: \"32CD32\",\n\t\tlinen: \"FAF0E6\",\n\t\tmagenta: \"FF00FF\",\n\t\tmaroon: \"800000\",\n\t\tmediumaquamarine: \"66CDAA\",\n\t\tmediumblue: \"0000CD\",\n\t\tmediumorchid: \"BA55D3\",\n\t\tmediumpurple: \"9370DB\",\n\t\tmediumseagreen: \"3CB371\",\n\t\tmediumslateblue: \"7B68EE\",\n\t\tmediumspringgreen: \"00FA9A\",\n\t\tmediumturquoise: \"48D1CC\",\n\t\tmediumvioletred: \"C71585\",\n\t\tmidnightblue: \"191970\",\n\t\tmintcream: \"F5FFFA\",\n\t\tmistyrose: \"FFE4E1\",\n\t\tmoccasin: \"FFE4B5\",\n\t\tnavajowhite: \"FFDEAD\",\n\t\tnavy: \"000080\",\n\t\toldlace: \"FDF5E6\",\n\t\tolive: \"808000\",\n\t\tolivedrab: \"6B8E23\",\n\t\torange: \"FFA500\",\n\t\torangered: \"FF4500\",\n\t\torchid: \"DA70D6\",\n\t\tpalegoldenrod: \"EEE8AA\",\n\t\tpalegreen: \"98FB98\",\n\t\tpaleturquoise: \"AFEEEE\",\n\t\tpalevioletred: \"DB7093\",\n\t\tpapayawhip: \"FFEFD5\",\n\t\tpeachpuff: \"FFDAB9\",\n\t\tperu: \"CD853F\",\n\t\tpink: \"FFC0CB\",\n\t\tplum: \"DDA0DD\",\n\t\tpowderblue: \"B0E0E6\",\n\t\tpurple: \"800080\",\n\t\tred: \"FF0000\",\n\t\trosybrown: \"BC8F8F\",\n\t\troyalblue: \"4169E1\",\n\t\tsaddlebrown: \"8B4513\",\n\t\tsalmon: \"FA8072\",\n\t\tsandybrown: \"F4A460\",\n\t\tseagreen: \"2E8B57\",\n\t\tseashell: \"FFF5EE\",\n\t\tsienna: \"A0522D\",\n\t\tsilver: \"C0C0C0\",\n\t\tskyblue: \"87CEEB\",\n\t\tslateblue: \"6A5ACD\",\n\t\tslategray: \"708090\",\n\t\tslategrey: \"708090\",\n\t\tsnow: \"FFFAFA\",\n\t\tspringgreen: \"00FF7F\",\n\t\tsteelblue: \"4682B4\",\n\t\ttan: \"D2B48C\",\n\t\tteal: \"008080\",\n\t\tthistle: \"D8BFD8\",\n\t\ttomato: \"FF6347\",\n\t\tturquoise: \"40E0D0\",\n\t\tviolet: \"EE82EE\",\n\t\twheat: \"F5DEB3\",\n\t\twhite: \"FFFFFF\",\n\t\twhitesmoke: \"F5F5F5\",\n\t\tyellow: \"FFFF00\",\n\t\tyellowgreen: \"9ACD32\"\n\t}\n}\n\n// if (typeof module !== 'undefined') {\n//   module.exports = Rainbow;\n// }\n","import { ScatterGL } from 'scatter-gl';\nimport { useEffect, useRef, useContext, useState } from 'react';\nimport {\n    ControlGroup, Button, Icon, ButtonGroup, Callout, RangeSlider,\n    Divider,\n    Label\n} from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\n\nimport { AppContext } from '../../context/AppContext';\nimport getMinMax from './utils';\n\nimport Rainbow from './rainbowvis';\nimport { randomColor } from 'randomcolor';\n\nimport \"./ScatterPlot.css\";\n\nconst DimPlot = () => {\n    const container = useRef();\n\n    // ref to the plot object\n    const [scatterplot, setScatterplot] = useState(null);\n    // set which cluster to highlight, also for custom selections\n    const [clusHighlight, setClusHighlight] = useState(null);\n    // show a gradient on the plot ?\n    const [showGradient, setShowGradient] = useState(false);\n    // expression min & max\n    const [exprMinMax, setExprMinMax] = useState(null);\n    // user selected min and max from UI\n    const [sliderMinMax, setSliderMinMax] = useState(exprMinMax);\n    // gradient scale\n    const [gradient, setGradient] = useState(null);\n\n    const { plotRedDims, redDims, defaultRedDims, setDefaultRedDims, clusterData,\n        tsneData, umapData, setPlotRedDims, clusterColors, setClusterColors,\n        gene, selectedClusterSummary,\n        customSelection, setCustomSelection,\n        setDelCustomSelection,\n        showAnimation, setTriggerAnimation,\n        savedPlot, setSavedPlot, selectedCluster } = useContext(AppContext);\n\n    // keeps track of what points were selected in lasso selections\n    const [selectedPoints, setSelectedPoints] = useState(null);\n    // set mode for plot\n    const [plotMode, setPlotMode] = useState('PAN');\n\n    const max = Math.max(...clusterData?.clusters);\n\n    // if either gene or expression changes, compute gradients and min/max\n    useEffect(() => {\n        if (gene === null) {\n            setShowGradient(false);\n            setGradient(null);\n        }\n\n        if (selectedClusterSummary?.[gene]?.expr) {\n            let exprMinMax = getMinMax(selectedClusterSummary?.[gene]?.expr);\n            let val = exprMinMax[1] === 0 ? 0.01 : exprMinMax[1];\n            let tmpgradient = new Rainbow();\n            tmpgradient.setSpectrum('#F5F8FA', \"#2965CC\");\n            tmpgradient.setNumberRange(0, val);\n            setShowGradient(true);\n            setGradient(tmpgradient);\n            setSliderMinMax([0, val]);\n            setExprMinMax([0, val]);\n        }\n    }, [selectedClusterSummary?.[gene]?.expr], gene);\n\n    // hook to also react when user changes the slider\n    useEffect(() => {\n\n        if (Array.isArray(sliderMinMax)) {\n            let tmpgradient = new Rainbow();\n            tmpgradient.setSpectrum('#F5F8FA', \"#2965CC\");\n            tmpgradient.setNumberRange(...sliderMinMax);\n            setGradient(tmpgradient);\n            setShowGradient(true);\n        }\n\n    }, [sliderMinMax]);\n\n    useEffect(() => {\n\n        const containerEl = container.current;\n\n        if (containerEl) {\n\n            let tmp_scatterplot = scatterplot;\n\n            // only create the plot object once\n            if (!tmp_scatterplot) {\n                const containerEl = container.current;\n\n                containerEl.style.width = \"95%\";\n                containerEl.style.height = \"95%\";\n\n                tmp_scatterplot = new ScatterGL(containerEl, {\n                    onSelect: (points) => {\n                        if (points.length !== 0) {\n                            setSelectedPoints(points);\n                        }\n                    },\n                    orbitControls: {\n                        zoomSpeed: 1.25,\n                    },\n                    styles: {\n                        point: {\n                            scaleDefault: 1,\n                            scaleSelected: 1.25,\n                            scaleHover: 1.25,\n                        }\n                    }\n                });\n\n                tmp_scatterplot.setPanMode();\n                setScatterplot(tmp_scatterplot);\n            }\n\n            let data = null;\n            if (defaultRedDims === \"TSNE\") {\n                data = tsneData;\n            } else if (defaultRedDims === \"UMAP\") {\n                data = umapData;\n            }\n\n            // if dimensions are available\n            if (data) {\n\n                let cluster_mappings = clusterData?.clusters;\n                const cluster_colors = clusterColors\n\n                let points = []\n                data.x.forEach((x, i) => {\n                    points.push([x, data.y[i]]);\n                });\n\n                let metadata = {\n                    clusters: cluster_mappings\n                };\n                const dataset = new ScatterGL.Dataset(points, metadata);\n                tmp_scatterplot.render(dataset);\n\n                // callback for coloring cells on the plot\n                // by default chooses the cluster assigned color for the plot\n                // if a gradient bar is available, sets gradient \n                // if a cluster is highlighted, grays out all other cells except the cells\n                // in the cluster or selection\n                // priority of rendering\n                // gradient selection > cluster selection > graying out\n                // an initial implementation also used a per cluster gradient to color cells\n                // by expression, commmented out\n                tmp_scatterplot.setPointColorer((i, selectedIndices, hoverIndex) => {\n\n                    if (selectedIndices.has(i)) {\n                        return \"#30404D\";\n                    }\n\n                    if (clusHighlight != null) {\n                        if (!String(clusHighlight).startsWith(\"cs\")) {\n                            if (clusHighlight !== cluster_mappings[i]) return '#D3D3D3';\n                        } else {\n                            if (!customSelection[clusHighlight].includes(i)) return '#D3D3D3';\n                        }\n                    }\n\n                    if (gene !== null && Array.isArray(selectedClusterSummary?.[gene]?.expr)) {\n\n                        return \"#\" + gradient.colorAt(selectedClusterSummary?.[gene]?.expr?.[i]);\n                        // if we want per cell gradient \n                        // let colorGradients = cluster_colors.map(x => {\n                        //     var gradient = new Rainbow();\n                        //     gradient.setSpectrum('#D3D3D3', x);\n                        //     let val = exprMinMax[1] === 0 ? 0.01 : exprMinMax[1];\n                        //     gradient.setNumberRange(0, val);\n                        //     return gradient;\n                        // });\n\n                        // return \"#\" + colorGradients[cluster_mappings[i]].colorAt(selectedClusterSummary?.[gene]?.expr?.[i])\n                    }\n\n                    if (clusHighlight != null && String(clusHighlight).startsWith(\"cs\")) {\n                        let tmpclus = parseInt(clusHighlight.replace(\"cs\", \"\"));\n                        return cluster_colors[max + tmpclus];\n                    } else {\n                        return cluster_colors[cluster_mappings[i]];\n                    }\n                });\n            }\n        }\n    }, [tsneData, umapData, defaultRedDims, gradient, clusHighlight]);\n\n    const setInteraction = (x) => {\n        if (x === \"PAN\") {\n            scatterplot.setPanMode();\n            setPlotMode(\"PAN\");\n        } else if (x === \"SELECT\") {\n            scatterplot.setSelectMode();\n            setPlotMode(\"SELECT\");\n        }\n    }\n\n    const clearPoints = () => {\n        setSelectedPoints(null);\n        scatterplot.select(null);\n    }\n\n    // save use selected selection of cells\n    const savePoints = () => {\n        // generate random color\n        let color = randomColor({ luminosity: 'dark', count: 1 });\n        let tmpcolor = [...clusterColors];\n        tmpcolor.push(color[0]);\n        setClusterColors(tmpcolor);\n\n        let cid = Object.keys(customSelection).length;\n        let tmpSelection = { ...customSelection };\n        tmpSelection[`cs${cid + 1}`] = selectedPoints;\n        setCustomSelection(tmpSelection);\n\n        setSelectedPoints(null);\n        scatterplot.select(null);\n    }\n\n    function handleSaveEmbedding() {\n        console.log(\"handleSaveEmbedding\");\n\n        const containerEl = container.current;\n        if (containerEl) {\n            // preserve drawing buffers is false, so render and capture state right away\n            scatterplot.renderScatterPlot();\n            const iData = scatterplot.scatterPlot.renderer.domElement.toDataURL();\n            \n            let tmp = [...savedPlot];\n\n            tmp.push({\n                \"image\": iData,\n                \"config\": {\n                    \"cluster\": selectedCluster,\n                    \"gene\": gene,\n                    \"highlight\": clusHighlight,\n                    \"embedding\": defaultRedDims\n                }\n            });\n\n            setSavedPlot(tmp);\n        }\n    }\n\n    return (\n        <div className=\"scatter-plot\">\n            <ButtonGroup style={{ minWidth: 75, minHeight: 150 }}\n                fill={false}\n                large={false}\n                minimal={false}\n                vertical={true}\n                className='left-sidebar'\n            >\n                <Button className='dim-button'\n                    disabled={redDims.indexOf(\"TSNE\") === -1}\n                    onClick={() => setDefaultRedDims(\"TSNE\")}\n                    intent={defaultRedDims === \"TSNE\" ? \"primary\" : \"\"}\n                >\n                    <Icon icon=\"database\"></Icon>\n                    <br />\n                    <span>TSNE</span>\n                </Button>\n                <Button className='dim-button'\n                    disabled={redDims.indexOf(\"UMAP\") === -1}\n                    onClick={() => setDefaultRedDims(\"UMAP\")}\n                    intent={defaultRedDims === \"UMAP\" ? \"primary\" : \"\"}\n                >\n                    <Icon icon=\"database\"></Icon><br />\n                    <span>UMAP</span>\n                </Button>\n            </ButtonGroup>\n            <div className=\"top-header\">\n                <ControlGroup fill={false} vertical={false}\n                    style={{\n                        marginRight: '4px'\n                    }}>\n                    <Tooltip2 content=\"Interactively visualize embeddings\">\n                        <Button icon=\"play\"\n                            onClick={() => setTriggerAnimation(true)}>Animate</Button>\n                    </Tooltip2>\n                    <Tooltip2 content=\"Save this embedding\">\n                        <Button icon=\"inheritance\"\n                            onClick={handleSaveEmbedding}>Save</Button>\n                    </Tooltip2>\n                </ControlGroup>\n                <ControlGroup fill={false} vertical={false}>\n                    <Button active={plotMode == \"PAN\"}\n                        intent={plotMode === \"PAN\" ? \"primary\" : \"none\"}\n                        icon=\"hand-up\" onClick={x => setInteraction(\"PAN\")}>Pan</Button>\n                    <Button active={plotMode == \"SELECT\"}\n                        intent={plotMode === \"SELECT\" ? \"primary\" : \"none\"}\n                        icon=\"widget\" onClick={x => setInteraction(\"SELECT\")}>Selection</Button>\n                </ControlGroup>\n            </div>\n            {\n                showAnimation ?\n                    <Label className='iter'>Iteration: {defaultRedDims === \"TSNE\" ? tsneData?.iteration : umapData?.iteration}</Label>\n                    : \"\"\n            }\n            <div className='dim-plot'>\n                {\n                    defaultRedDims ?\n                        <div ref={container} ></div> :\n                        \"Choose an Embedding... or Embeddings are being computed...\"\n                }\n            </div>\n            <div className='right-sidebar'>\n                <div style={{ width: '100%' }}>\n                    {\n                        <div className='right-sidebar-cluster'>\n                            <Callout title=\"CLUSTERS\">\n                                <ul>\n                                    {clusterColors?.map((x, i) => {\n                                        return i < clusterColors.length - Object.keys(customSelection).length ?\n                                            (<li key={i}\n                                                className={clusHighlight == i ? 'legend-highlight' : ''}\n                                                style={{ color: x }}\n                                                onClick={() => {\n                                                    if (i === clusHighlight) {\n                                                        setClusHighlight(null);\n                                                    } else {\n                                                        setClusHighlight(i);\n                                                    }\n                                                }}\n                                            > Cluster {i + 1} </li>)\n                                            : \"\"\n                                    })}\n                                </ul>\n                                {\n                                    Object.keys(customSelection).length > 0 ?\n                                        <div\n                                            style={{\n                                                paddingTop: '5px'\n                                            }}>\n                                            <span>Custom Selection &nbsp;\n                                                <Tooltip2 content=\"Custom selection of cells\" openOnTargetFocus={false}>\n                                                    <Icon icon=\"help\"></Icon>\n                                                </Tooltip2>\n                                            </span>\n                                            <ul>\n                                                {Object.keys(customSelection)?.map((x, i) => {\n                                                    return (<li key={x}\n                                                        className={clusHighlight == x ? 'legend-highlight' : ''}\n                                                        style={{ color: clusterColors[Math.max(...clusterData?.clusters) + 1 + i] }}\n                                                    >\n                                                        <div style={{\n                                                            display: 'inline-flex',\n                                                            alignItems: 'center',\n                                                            flexDirection: 'row'\n                                                        }}>\n                                                            <span\n                                                                style={{\n                                                                    alignSelf: 'center'\n                                                                }}\n                                                                onClick={() => {\n                                                                    if (x === clusHighlight) {\n                                                                        setClusHighlight(null);\n\n                                                                    } else {\n                                                                        setClusHighlight(x);\n                                                                    }\n                                                                }}>Custom Selection {x.replace(\"cs\", \"\")}\n                                                            </span>\n                                                            <Icon\n                                                                size={12}\n                                                                icon=\"trash\"\n                                                                style={{\n                                                                    paddingLeft: '2px'\n                                                                }}\n                                                                onClick={() => {\n                                                                    let tmpSel = { ...customSelection };\n                                                                    delete tmpSel[x];\n                                                                    setCustomSelection(tmpSel);\n\n                                                                    let tmpcolors = [...clusterColors];\n                                                                    tmpcolors = tmpcolors.slice(0, tmpcolors.length - 1);\n                                                                    setClusterColors(tmpcolors);\n\n                                                                    setDelCustomSelection(x);\n\n                                                                    if (clusHighlight === x) {\n                                                                        setClusHighlight(null);\n                                                                    }\n                                                                }}></Icon>\n                                                        </div>\n                                                    </li>)\n                                                })}\n                                            </ul>\n                                        </div>\n                                        :\n                                        \"\"\n                                }\n                            </Callout>\n                            {\n                                selectedPoints && selectedPoints.length > 0 ?\n                                    <div>\n                                        <Divider />\n                                        <span>Selection &nbsp;\n                                            <Tooltip2 content=\"save this selection of cells\" openOnTargetFocus={false}>\n                                                <Icon icon=\"help\"></Icon>\n                                            </Tooltip2>\n                                        </span>\n                                        <div className='selection-container'>\n                                            <span>{selectedPoints.length} cells selected</span>\n                                            <div className='selection-button-container'>\n                                                <Button small={true} intent='primary'\n                                                    onClick={savePoints}>Save</Button>\n                                                <Button small={true}\n                                                    onClick={clearPoints}>Clear</Button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    :\n                                    \"\"\n                            }\n                        </div>\n                    }\n                    {showGradient ?\n                        <div className='right-sidebar-slider'>\n                            <Divider />\n                            <Callout>\n                                <span>Customize Gradient &nbsp;\n                                    <Tooltip2 content=\"Use the slider to adjust the color gradient of the plot. Useful when data is skewed\n                                by either a few lowly or highly expressed cells\" openOnTargetFocus={false}>\n                                        <Icon icon=\"help\"></Icon>\n                                    </Tooltip2>\n                                </span>\n                                <div className='dim-slider-container'>\n                                    <div className='dim-slider-gradient'>\n                                        <span>{Math.round(exprMinMax[0])}</span>&nbsp;\n                                        <div\n                                            style={{\n                                                backgroundImage: `linear-gradient(to right, #F5F8FA ${(sliderMinMax[0] - exprMinMax[0]) * 100 / (exprMinMax[1] - exprMinMax[0])}%, ${((sliderMinMax[1] + sliderMinMax[0] - (2 * exprMinMax[0]))) * 100 / (2 * (exprMinMax[1] - exprMinMax[0]))}%, #2965CC ${(100 - (exprMinMax[1] - sliderMinMax[1]) * 100 / (exprMinMax[1] - exprMinMax[0]))}%)`,\n                                                width: '175px', height: '15px',\n                                            }}></div>&nbsp;\n                                        <span>{Math.round(exprMinMax[1])}</span>\n                                    </div>\n                                    <div className='dim-range-slider'>\n                                        <RangeSlider\n                                            min={Math.round(exprMinMax[0])}\n                                            max={Math.round(exprMinMax[1])}\n                                            stepSize={Math.round(exprMinMax[1] - exprMinMax[0]) / 25}\n                                            onChange={(range) => { setSliderMinMax(range) }}\n                                            value={[Math.round(sliderMinMax[0]), Math.round(sliderMinMax[1])]}\n                                            vertical={false}\n                                        />\n                                    </div>\n                                </div>\n                            </Callout>\n                        </div>\n                        :\n                        \"\"\n                    }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DimPlot;\n","import { useEffect, useRef } from \"react\";\nimport * as d3 from 'd3';\n\nconst StackedHistogram = (props) => {\n    const container = useRef();\n\n    useEffect(() => {\n\n        let data = props?.data;\n        let propwidth = props?.width;\n        let color = props?.color;\n        let clusters = props?.clusters;\n        let clusterlabel = props?.clusterlabel;\n\n        if (!propwidth) {\n            propwidth = 325;\n        }\n\n        if (!color) {\n            color = \"#00B3A4\";\n        }\n\n        if (!data) return \"\";\n\n        let containerEl = container.current;\n        containerEl.innerHTML = \"\";\n\n        const margin = { top: 10, right: 30, bottom: 30, left: 40 },\n            width = propwidth - margin.left - margin.right,\n            height = 150 - margin.top - margin.bottom;\n\n        const svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                `translate(${margin.left},${margin.top})`);\n\n        const x = d3.scaleLinear()\n            .domain(d3.extent(data))\n            .range([0, width]);\n\n        svg.append(\"g\")\n            .attr(\"transform\", `translate(0, ${height/2})`)\n            .call(d3.axisBottom(x)\n                .ticks(5)\n                .tickValues(d3.extent(data)));\n\n        const histogram = d3.bin()\n            .value((d) => { return d; })\n            .domain(x.domain())\n            .thresholds(d3.thresholdScott);\n\n        const bins = histogram(data);\n        const allCells = histogram(data.filter((d, i) => { return clusters?.[i] === 0 }));\n        const clusterCells = histogram(data.filter((d, i) => { return clusters?.[i] === 1 }));\n        const allCellsMax = d3.max(allCells, (d) => { return d.length; });\n        const clusterCellsMax = d3.max(clusterCells, (d) => { return d.length; });\n        \n        const y = d3.scaleLinear()\n            .range([height, 0])\n            .domain([-1, 1]);\n\n        // svg.append(\"g\")\n        //     .call(d3.axisLeft(y));\n\n        svg.selectAll(\"rectAll\")\n            .data(allCells)\n            .join(\"rect\")\n            .attr(\"x\", 1)\n            .attr(\"transform\", (d) => { return `translate(${x(d.x0)} , ${y(0)})` })\n            .attr(\"width\", (d) => { return x(d.x1) - x(d.x0) - 1; })\n            .attr(\"height\", (d) => { return y(-d.length/allCellsMax) - height/2; })\n            .style(\"fill\", \"#D3D3D3\")\n            .style(\"opacity\", 0.6)\n\n        svg.selectAll(\"rectCluster\")\n            .data(clusterCells)\n            .enter()\n            .append(\"rect\")\n            .attr(\"x\", 1)\n            .attr(\"transform\", (d) => { return `translate(${x(d.x0)}, ${y(d.length/clusterCellsMax)})` })\n            .attr(\"width\", (d) => { return x(d.x1) - x(d.x0) - 1; })\n            .attr(\"height\", (d) => { return height/2 - y(d.length/clusterCellsMax); })\n            .style(\"fill\", color)\n            .style(\"opacity\", 0.6)\n\n        // svg.append(\"circle\").attr(\"cx\", width - 50).attr(\"cy\", 5).attr(\"r\", 3).style(\"fill\", \"#D3D3D3\")\n        // svg.append(\"circle\").attr(\"cx\", width - 50).attr(\"cy\", 15).attr(\"r\", 3).style(\"fill\", color)\n        \n        svg.append(\"text\").attr(\"x\", width - 20).attr(\"y\", y(-0.5)).text(\"other cells\")\n            .style(\"font-size\", \"10px\").attr(\"alignment-baseline\", \"middle\");\n        svg.append(\"text\").attr(\"x\", width - 20).attr(\"y\", y(0.5)).text(clusterlabel)\n            .style(\"font-size\", \"10px\").attr(\"alignment-baseline\", \"middle\")\n            .style(\"fill\", color);\n    }, []);\n\n    return (\n        <div ref={container}></div>\n    );\n};\n\nexport default StackedHistogram;","import { useRef } from \"react\";\n\n// uses two divs to fill out bars given various props\nconst Cell = (props) => {\n    const container = useRef();\n\n    let propwidth = props?.width;\n    let minmax = props?.minmax;\n    let score = props?.score;\n    let colorscale = props?.colorscale;\n    let colorscore = props?.colorscore;\n    let color = props?.color;\n\n    let percWidth = ((score - minmax[0]) / (minmax[1] - minmax[0]));\n\n    if (!propwidth) {\n        propwidth = \"100%\";\n    }\n\n    if (!color) {\n        color = \"#00B3A4\";\n    }\n\n    return (\n        <div ref={container}\n            style={{\n                width: propwidth, height: '15px',\n                margin: '5px', border: '1px solid gainsboro',\n                alignItems: 'center'\n            }}>\n            {colorscale ?\n                <div style={{\n                    width: `${colorscore * 100}%`,\n                    backgroundColor: colorscale(colorscore),\n                    height: '100%'\n                }}></div>\n                :\n                <div style={{\n                    width: `${percWidth * 100}%`,\n                    backgroundColor: color,\n                    height: '100%'\n                }}>\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default Cell;","import { useRef } from \"react\";\nimport * as d3 from 'd3';\n\n// similar to cell, but fills the entire div, \n// width is not controlled in this case\nconst HeatmapCell = (props) => {\n    const container = useRef();\n\n    let propwidth = props?.width;\n    let score = props?.score;\n    let minmax = props?.minmax;\n\n    // inverted scale - blue for +ve, red for -ve\n    const detectedScale = d3.scaleSequential(d3.interpolateRdYlBu)\n        .domain([minmax[1], minmax[0]]);\n\n    if (!propwidth) {\n        propwidth = \"100%\";\n    }\n\n    return (\n        <div ref={container}\n            style={{\n                width: propwidth, height: '15px',\n                margin: '5px', border: '1px solid gainsboro',\n                alignItems: 'center',\n                backgroundColor: detectedScale(score)\n            }}>\n            <div style={{\n                width: '100%',\n                backgroundColor: detectedScale(score),\n                height: '100%'\n            }}></div>\n        </div>\n    );\n};\n\nexport default HeatmapCell;","import React, { useEffect, useContext, useState, useMemo } from 'react';\nimport {\n    Button, H4, H5, Icon, Collapse, InputGroup,\n    RangeSlider, Tag, HTMLSelect, Classes, Card, Elevation\n} from \"@blueprintjs/core\";\nimport { Tooltip2, Popover2 } from \"@blueprintjs/popover2\";\nimport { Virtuoso } from 'react-virtuoso';\nimport * as d3 from 'd3';\n\nimport { AppContext } from '../../context/AppContext';\nimport StackedHistogram from '../Plots/StackedHistogram';\nimport Histogram from '../Plots/Histogram';\n\nimport Cell from '../Plots/Cell.js';\nimport HeatmapCell from '../Plots/HeatmapCell';\n\nimport './markers.css';\n\nconst MarkerPlot = () => {\n\n    const {\n        genesInfo, clusterData, selectedClusterSummary, setSelectedClusterSummary,\n        selectedCluster, setSelectedCluster, setClusterRank,\n        setReqGene, clusterColors, gene, setGene,\n        customSelection } = useContext(AppContext);\n\n    // what cluster is selected\n    const [clusSel, setClusSel] = useState(null);\n    // binary vector for stacked histogram plots, this cluster (1) vs others (0)\n    const [clusArrayStacked, setClusArrayStacked] = useState(null);\n    // gene search\n    const [searchInput, setSearchInput] = useState(null);\n\n    // ranges for various marker stats\n    const [meanMinMax, setMeanMinMax] = useState(null);\n    const [deltaMinMax, setDeltaMinMax] = useState(null);\n    const [lfcMinMax, setLfcMinMax] = useState(null);\n    const [detectedMinMax, setDetectedMinMax] = useState(null);\n    const [minMaxs, setMinMaxs] = useState(null);\n\n    // params for filtering\n    const [means, setMeans] = useState(null);\n    const [deltas, setDeltas] = useState(null);\n    const [lfcs, setLfcs] = useState(null);\n    const [detects, setDetects] = useState(null);\n\n    // stores range filters from UI\n    const [markerFilter, setMarkerFilter] = useState({});\n    // records to show after filtering\n    const [prosRecords, setProsRecords] = useState(null);\n\n    // scale to use for detected on expression bar\n    const detectedScale = d3.interpolateRdYlBu; //d3.interpolateRdBu;\n    // d3.scaleSequential()\n    // .domain([0, 1])\n    // .range([\"red\", \"blue\"])\n    // .interpolate(d3.interpolateHcl);\n\n    // if a cluster changes, its summary data is requested from the worker\n    // pre-process results for UI\n    useEffect(() => {\n        if (!selectedClusterSummary) return selectedClusterSummary;\n\n        let trecs = selectedClusterSummary;\n\n        if (trecs.length === 0) return trecs;\n\n        let tmpmeans = trecs.map(x => x?.mean);\n        let tmeanMinMax = d3.extent(tmpmeans)\n        let tmeanval = tmeanMinMax[1] === 0 ? 0.01 : tmeanMinMax[1];\n        setMeanMinMax([parseFloat(tmeanMinMax[0].toFixed(2)), parseFloat(tmeanval.toFixed(2))]);\n        setMeans(tmpmeans);\n\n        let tmpdeltas = trecs.map(x => x?.delta);\n        let tdeltaMinMax = d3.extent(tmpdeltas)\n        let tdeltaval = tdeltaMinMax[1] === 0 ? 0.01 : tdeltaMinMax[1];\n        setDeltaMinMax([parseFloat(tdeltaMinMax[0].toFixed(2)), parseFloat(tdeltaval.toFixed(2))]);\n        setDeltas(tmpdeltas);\n\n        let tmplfcs = trecs.map(x => x?.lfc);\n        let tlfcsMinMax = d3.extent(tmplfcs)\n        let tlfcsval = tlfcsMinMax[1] === 0 ? 0.01 : tlfcsMinMax[1];\n        setLfcMinMax([parseFloat(tlfcsMinMax[0].toFixed(2)), parseFloat(tlfcsval.toFixed(2))]);\n        setLfcs(tmplfcs);\n\n        let tmpdetects = trecs.map(x => x?.detected);\n        let tdetectsMinMax = d3.extent(tmpdetects)\n        let tdetecval = tdetectsMinMax[1] === 0 ? 0.01 : tdetectsMinMax[1];\n        setDetectedMinMax([parseFloat(tdetectsMinMax[0].toFixed(2)), parseFloat(tdetecval.toFixed(2))]);\n        setDetects(tmpdetects);\n\n        setMinMaxs({\n            \"lfc\": [parseFloat(tlfcsMinMax[0].toFixed(2)), parseFloat(tlfcsval.toFixed(2))],\n            \"mean\": [parseFloat(tmeanMinMax[0].toFixed(2)), parseFloat(tmeanval.toFixed(2))],\n            \"detected\": [parseFloat(tdetectsMinMax[0].toFixed(2)), parseFloat(tdetecval.toFixed(2))],\n            \"delta\": [parseFloat(tdeltaMinMax[0].toFixed(2)), parseFloat(tdeltaval.toFixed(2))],\n        });\n\n        let sortedRows = [...trecs];\n\n        setProsRecords(sortedRows);\n\n    }, [selectedClusterSummary]);\n\n    // genes to show, hook for filters and input\n    const sortedRows = useMemo(() => {\n\n        if (!prosRecords) return [];\n\n        let sortedRows = prosRecords;\n        if (markerFilter) {\n            for (let key in markerFilter) {\n                let range = markerFilter[key];\n                if (range[0] == minMaxs[key][0] && range[1] == minMaxs[key][1]) continue;\n                sortedRows = sortedRows.filter((x) => x[key] >= range[0] && x[key] <= range[1]);\n            }\n        }\n\n        if (!searchInput || searchInput === \"\") return sortedRows;\n\n        sortedRows = sortedRows.filter((x) => genesInfo[x.row].toLowerCase().indexOf(searchInput.toLowerCase()) !== -1);\n        return sortedRows;\n    }, [prosRecords, searchInput, markerFilter]);\n\n    // update clusters when custom selection is made in the UI\n    useEffect(() => {\n        if (clusterData?.clusters) {\n            let max_clusters = Math.max(...clusterData.clusters);\n\n            let clus = [];\n            for (let i = 0; i < max_clusters + 1; i++) {\n                clus.push(i + 1);\n            }\n\n            clus = clus.concat(Object.keys(customSelection));\n\n            setClusSel(clus);\n            if (selectedCluster == null) {\n                setSelectedCluster(0);\n            }\n        }\n    }, [clusterData, customSelection, selectedCluster]);\n\n    // hook for figure out this vs other cells for stacked histograms\n    useEffect(() => {\n        var clusArray = [];\n        if (String(selectedCluster).startsWith(\"cs\")) {\n            clusterData?.clusters?.forEach((x, i) => customSelection[selectedCluster].includes(i) ? clusArray.push(1) : clusArray.push(0));\n        } else {\n            clusterData?.clusters?.forEach(x => x === selectedCluster ? clusArray.push(1) : clusArray.push(0));\n        }\n        setClusArrayStacked(clusArray);\n    }, [selectedCluster]);\n\n    const handleMarkerFilter = (val, key) => {\n\n        let tmp = { ...markerFilter };\n        tmp[key] = val;\n        setMarkerFilter(tmp);\n    }\n\n    return (\n        <div className='marker-container'>\n            <H4>Marker Genes</H4>\n            {\n                clusSel ?\n                    <HTMLSelect\n                        onChange={(x) => {\n                            setGene(null);\n                            let tmpselection = x.currentTarget?.value;\n                            if (tmpselection.startsWith(\"Cluster\")) {\n                                tmpselection = parseInt(tmpselection.replace(\"Cluster \", \"\")) - 1\n                            } else if (tmpselection.startsWith(\"Custom\")) {\n                                tmpselection = tmpselection.replace(\"Custom Selection \", \"\")\n                            }\n                            setSelectedCluster(tmpselection);\n\n                            setMarkerFilter({});\n                            setGene(null);\n                        }}>\n                        {\n                            clusSel.map((x, i) => (\n                                <option key={i}>{String(x).startsWith(\"cs\") ? \"Custom Selection\" : \"Cluster\"} {x}</option>\n                            ))\n                        }\n                    </HTMLSelect>\n                    : \"\"\n            }\n            {\n                selectedClusterSummary ?\n                    <div className='marker-table'>\n                        <div className='marker-header'>\n                            <InputGroup\n                                leftIcon=\"search\"\n                                small={true}\n                                placeholder=\"Search gene...\"\n                                type={\"text\"}\n                                onChange={(e) => setSearchInput(e.target.value)}\n                            />\n                            <span>\n                                <Icon icon=\"sort\" style={{\n                                    paddingRight: '5px'\n                                }}></Icon>\n                                <HTMLSelect\n                                    onChange={(x) => {\n                                        setClusterRank(x.currentTarget.value);\n                                    }} defaultValue={\"cohen-min-rank\"}>\n                                    <option>cohen-min</option>\n                                    <option>cohen-mean</option>\n                                    <option>cohen-min-rank</option>\n                                    <option>auc-min</option>\n                                    <option>auc-mean</option>\n                                    <option>auc-min-rank</option>\n                                    <option>lfc-min</option>\n                                    <option>lfc-mean</option>\n                                    <option>lfc-min-rank</option>\n                                    <option>delta-d-min</option>\n                                    <option>delta-d-mean</option>\n                                    <option>delta-d-min-rank</option>\n                                </HTMLSelect>\n                            </span>\n                        </div>\n                        <Virtuoso\n                            components={{\n                                Item: ({ children, ...props }) => {\n                                    return (\n                                        <div className='row-card' {...props}>\n                                            {children}\n                                        </div>\n                                    );\n                                },\n                                Header: () => {\n                                    return (<div className='row-container row-header'>\n                                        <span>Gene</span>\n                                        <span>Log-FC</span>\n                                        <span>Δ-detected</span>\n                                        <span>Expression &nbsp;\n                                            <Tooltip2 content=\"bar represents the mean expression of the gene and the color gradient represents detected.\" openOnTargetFocus={false}>\n                                                <Icon size={12} icon=\"help\"></Icon>\n                                            </Tooltip2>\n                                        </span>\n                                        <span></span>\n                                    </div>)\n                                }\n                            }}\n                            className='marker-list'\n                            totalCount={sortedRows.length}\n                            itemContent={index => {\n                                const row = sortedRows[index];\n                                const rowexp = row.expanded;\n                                const rowExpr = row.expr;\n\n                                return (\n                                    <div>\n                                        <div className='row-container'>\n                                            <span>{genesInfo[row.row]}</span>\n                                            {\n                                                <Popover2\n                                                    popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                                    hasBackdrop={false}\n                                                    interactionKind=\"hover\"\n                                                    placement='auto'\n                                                    hoverOpenDelay={500}\n                                                    modifiers={{\n                                                        arrow: { enabled: true },\n                                                        flip: { enabled: true },\n                                                        preventOverflow: { enabled: true },\n                                                    }}\n                                                    content={\n                                                        <Card elevation={Elevation.ZERO}>\n                                                            <table>\n                                                                <tr>\n                                                                    <td></td>\n                                                                    <th scope=\"col\">{genesInfo[row.row]}</th>\n                                                                    <th scope=\"col\">This cluster</th>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Log-FC</th>\n                                                                    <td>{row.lfc.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{lfcMinMax[0].toFixed(2)}, {lfcMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Δ-detected</th>\n                                                                    <td>{row.delta.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{deltaMinMax[0].toFixed(2)}, {deltaMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Detected</th>\n                                                                    <td>{row.detected.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{detectedMinMax[0].toFixed(2)}, {detectedMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Expression</th>\n                                                                    <td>{row.mean.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{meanMinMax[0].toFixed(2)}, {meanMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                            </table>\n                                                        </Card>\n                                                    }>\n                                                    <HeatmapCell minmax={lfcMinMax} colorscale={d3.interpolateRdBu} score={row.lfc} />\n                                                </Popover2>\n                                            }\n                                            {\n                                                <Popover2\n                                                    popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                                    hasBackdrop={false}\n                                                    interactionKind=\"hover\"\n                                                    placement='auto'\n                                                    hoverOpenDelay={500}\n                                                    modifiers={{\n                                                        arrow: { enabled: true },\n                                                        flip: { enabled: true },\n                                                        preventOverflow: { enabled: true },\n                                                    }}\n                                                    content={\n                                                        <Card elevation={Elevation.ZERO}>\n                                                            <table>\n                                                                <tr>\n                                                                    <td></td>\n                                                                    <th scope=\"col\">{genesInfo[row.row]}</th>\n                                                                    <th scope=\"col\">This cluster</th>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Δ-detected</th>\n                                                                    <td>{row.delta.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{deltaMinMax[0].toFixed(2)}, {deltaMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Detected</th>\n                                                                    <td>{row.detected.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{detectedMinMax[0].toFixed(2)}, {detectedMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Log-FC</th>\n                                                                    <td>{row.lfc.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{lfcMinMax[0].toFixed(2)}, {lfcMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Expression</th>\n                                                                    <td>{row.mean.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{meanMinMax[0].toFixed(2)}, {meanMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                            </table>\n                                                        </Card>\n                                                    }>\n                                                    <HeatmapCell minmax={deltaMinMax} colorscale={d3.interpolateRdBu} score={row.delta} />\n                                                </Popover2>}\n                                            {\n                                                <Popover2\n                                                    popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                                    hasBackdrop={false}\n                                                    interactionKind=\"hover\"\n                                                    placement='auto'\n                                                    hoverOpenDelay={500}\n                                                    modifiers={{\n                                                        arrow: { enabled: true },\n                                                        flip: { enabled: true },\n                                                        preventOverflow: { enabled: true },\n                                                    }}\n                                                    content={\n                                                        <Card elevation={Elevation.ZERO}>\n                                                            <table>\n                                                                <tr>\n                                                                    <td></td>\n                                                                    <th scope=\"col\">{genesInfo[row.row]}</th>\n                                                                    <th scope=\"col\">This cluster</th>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Expression</th>\n                                                                    <td>{row.mean.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{meanMinMax[0].toFixed(2)}, {meanMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Log-FC</th>\n                                                                    <td>{row.lfc.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{lfcMinMax[0].toFixed(2)}, {lfcMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Δ-detected</th>\n                                                                    <td>{row.delta.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{deltaMinMax[0].toFixed(2)}, {deltaMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Detected</th>\n                                                                    <td>{row.detected.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{detectedMinMax[0].toFixed(2)}, {detectedMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                            </table>\n                                                        </Card>\n                                                    }>\n                                                    <Cell minmax={meanMinMax} colorscale={detectedScale}\n                                                        score={row.mean} colorscore={row.detected}\n                                                    />\n                                                </Popover2>}\n                                            <div className='row-action'>\n                                                <Button icon={rowexp ? 'minus' : 'plus'} small={true} fill={false}\n                                                    className='row-action'\n                                                    onClick={() => {\n                                                        let tmp = [...selectedClusterSummary];\n                                                        tmp[row.index].expanded = !tmp[row.index].expanded;\n                                                        setSelectedClusterSummary(tmp);\n                                                        if (!rowExpr) {\n                                                            setReqGene(row.row);\n                                                        }\n                                                    }}\n                                                >\n                                                </Button>\n                                                <Button small={true} fill={false}\n                                                    className='row-action'\n                                                    onClick={() => {\n                                                        if (row.index === gene) {\n                                                            setGene(null);\n                                                        } else {\n                                                            setGene(row.index);\n                                                            if (!rowExpr) {\n                                                                setReqGene(row.row);\n                                                            }\n                                                        }\n                                                    }}\n                                                >\n                                                    <Icon icon={'tint'}\n                                                        color={row.index === gene ?\n                                                            String(selectedCluster).startsWith(\"cs\") ? clusterColors[Math.max(...clusterData?.clusters) + parseInt(selectedCluster.replace(\"cs\", \"\"))] : clusterColors[selectedCluster]\n                                                            : ''}\n                                                    ></Icon>\n                                                </Button>\n                                            </div>\n                                        </div>\n                                        <Collapse isOpen={rowexp}>\n                                            {/* <Histogram data={rowExpr} color={clusterColors[selectedCluster]} /> */}\n                                            {rowExpr && <StackedHistogram data={rowExpr}\n                                                color={String(selectedCluster).startsWith(\"cs\") ? clusterColors[Math.max(...clusterData?.clusters) + parseInt(selectedCluster.replace(\"cs\", \"\"))] : clusterColors[selectedCluster]}\n                                                clusterlabel={String(selectedCluster).startsWith(\"cs\") ? `Custom Selection ${selectedCluster}` : `Cluster ${parseInt(selectedCluster + 1)}`}\n                                                clusters={clusArrayStacked} />}\n                                        </Collapse>\n                                    </div>\n                                )\n                            }}\n                        />\n                        <div className='marker-footer'>\n                            <H5 className='marker-footer-title'>Filter Markers</H5>\n\n                            <div className='marker-filter-container'>\n                                <Tag className=\"marker-filter-container-tag\" minimal={true} intent='primary'>Log-FC</Tag>\n                                {/* <Histogram data={lfcs} height={35} minmax={lfcMinMax}/> */}\n                                {lfcMinMax &&\n                                    <div className='marker-slider-container'>\n                                        <div className='marker-filter-gradient'>\n                                            <div\n                                                style={{\n                                                    backgroundImage: `linear-gradient(to right, yellow 33%, red 50%, blue 100%)`,\n                                                    width: '100%', height: '5px',\n                                                }}></div>&nbsp;\n                                        </div>\n                                        <RangeSlider\n                                            className='marker-filter-slider'\n                                            min={lfcMinMax[0]}\n                                            max={lfcMinMax[1]}\n                                            labelValues={lfcMinMax}\n                                            stepSize={parseFloat((Math.abs(lfcMinMax[1] - lfcMinMax[0]) / 20).toFixed(2))}\n                                            onChange={(val) => handleMarkerFilter(val, \"lfc\")}\n                                            value={markerFilter?.[\"lfc\"] ? markerFilter?.[\"lfc\"] : [0, lfcMinMax[1]]}\n                                            vertical={false}\n                                        />\n                                    </div>}\n                            </div>\n\n                            <div className='marker-filter-container'>\n                                <Tag className=\"marker-filter-container-tag\" minimal={true} intent='primary'>Δ-detected</Tag>\n                                {/* <Histogram data={deltas} height={35} color=\"#4580E6\" minmax={deltaMinMax} /> */}\n                                {deltaMinMax &&\n                                    <div className='marker-slider-container'>\n                                        <div className='marker-filter-gradient'>\n                                            <div\n                                                style={{\n                                                    backgroundImage: `linear-gradient(to right, yellow 33%, red 50%, blue 100%)`,\n                                                    width: '100%', height: '5px',\n                                                }}></div>&nbsp;\n                                        </div>\n                                        <RangeSlider\n                                            className='marker-filter-slider'\n                                            min={deltaMinMax[0]}\n                                            max={deltaMinMax[1]}\n                                            labelValues={deltaMinMax}\n                                            stepSize={parseFloat((Math.abs(deltaMinMax[1] - deltaMinMax[0]) / 20).toFixed(2))}\n                                            onChange={(val) => handleMarkerFilter(val, \"delta\")}\n                                            value={markerFilter?.[\"delta\"] ? markerFilter?.[\"delta\"] : [0, deltaMinMax[1]]}\n                                            vertical={false}\n                                        />\n                                    </div>}\n                            </div>\n\n                            <div className='marker-filter-container'>\n                                <Tag className=\"marker-filter-container-tag\" minimal={true} intent='primary'>Mean</Tag>\n                                {/* <Histogram data={means} height={35} minmax={meanMinMax} /> */}\n                                {meanMinMax &&\n                                    <div className='marker-slider-container'>\n                                        {/* <div className='marker-filter-gradient'>\n                                            <div\n                                                style={{\n                                                    backgroundImage: `linear-gradient(to right, yellow 33%, red 50%, blue 100%)`,\n                                                    width: '100%', height: '5px',\n                                                }}></div>&nbsp;\n                                        </div> */}\n                                        <RangeSlider\n                                            className='marker-filter-slider'\n                                            min={meanMinMax[0]}\n                                            max={meanMinMax[1]}\n                                            labelValues={meanMinMax}\n                                            stepSize={parseFloat((Math.abs(meanMinMax[1] - meanMinMax[0]) / 20).toFixed(2))}\n                                            onChange={(val) => handleMarkerFilter(val, \"mean\")}\n                                            value={markerFilter?.[\"mean\"] ? markerFilter?.[\"mean\"] : meanMinMax}\n                                            vertical={false}\n                                        />\n                                    </div>}\n                            </div>\n\n                            <div className='marker-filter-container'>\n                                <Tag className=\"marker-filter-container-tag\" minimal={true} intent='primary'>Detected</Tag>\n                                {/* <Histogram data={detects} height={35} minmax={detectedMinMax} /> */}\n                                {detectedMinMax &&\n                                    <div className='marker-slider-container'>\n                                        {/* <div className='marker-filter-gradient'>\n                                            <div\n                                                style={{\n                                                    backgroundImage: `linear-gradient(to right, yellow 33%, red 50%, blue 100%)`,\n                                                    width: '100%', height: '5px',\n                                                }}></div>&nbsp;\n                                        </div> */}\n                                        <RangeSlider\n                                            className='marker-filter-slider'\n                                            min={detectedMinMax[0]}\n                                            max={detectedMinMax[1]}\n                                            labelValues={detectedMinMax}\n                                            stepSize={parseFloat((Math.abs(detectedMinMax[1] - detectedMinMax[0]) / 20).toFixed(2))}\n                                            onChange={(val) => handleMarkerFilter(val, \"detected\")}\n                                            value={markerFilter?.[\"detected\"] ? markerFilter?.[\"detected\"] : detectedMinMax}\n                                            vertical={false}\n                                        />\n                                    </div>}\n                            </div>\n                        </div>\n                    </div>\n                    : \"\"\n            }\n        </div>\n    );\n};\n\nexport default MarkerPlot;\n","import { useEffect, useRef } from \"react\";\n\nimport './Pong.css';\nimport './coffee.css';\nimport { Label } from \"@blueprintjs/core\";\n\nconst Pong = () => {\n    const container = useRef();\n\n    useEffect(() => {\n\n        const elem = container.current;\n\n        // Global Variables\n        var DIRECTION = {\n            IDLE: 0,\n            UP: 1,\n            DOWN: 2,\n            LEFT: 3,\n            RIGHT: 4\n        };\n\n        var rounds = [5, 5, 3, 3, 2];\n        var colors = ['#1abc9c', '#2ecc71', '#3498db', '#e74c3c', '#9b59b6'];\n\n        // The ball object (The cube that bounces back and forth)\n        var Ball = {\n            new: function (incrementedSpeed) {\n                return {\n                    width: 18,\n                    height: 18,\n                    x: (this.canvas.width / 2) - 9,\n                    y: (this.canvas.height / 2) - 9,\n                    moveX: DIRECTION.IDLE,\n                    moveY: DIRECTION.IDLE,\n                    speed: incrementedSpeed || 9\n                };\n            }\n        };\n\n        // The paddle object (The two lines that move up and down)\n        var Paddle = {\n            new: function (side) {\n                return {\n                    width: 18,\n                    height: 70,\n                    x: side === 'left' ? 150 : this.canvas.width - 150,\n                    y: (this.canvas.height / 2) - 35,\n                    score: 0,\n                    move: DIRECTION.IDLE,\n                    speed: 10\n                };\n            }\n        };\n\n        var Game = {\n            initialize: function () {\n                this.canvas = elem.querySelector('canvas');\n                this.context = this.canvas.getContext('2d');\n\n                this.canvas.width = 1400;\n                this.canvas.height = 1000;\n\n                this.canvas.style.width = (this.canvas.width / 2) + 'px';\n                this.canvas.style.height = (this.canvas.height / 2) + 'px';\n\n                this.player = Paddle.new.call(this, 'left');\n                this.paddle = Paddle.new.call(this, 'right');\n                this.ball = Ball.new.call(this);\n\n                this.paddle.speed = 8;\n                this.running = this.over = false;\n                this.turn = this.paddle;\n                this.timer = this.round = 0;\n                this.color = '#2c3e50';\n\n                Pong.menu();\n                Pong.listen();\n            },\n\n            endGameMenu: function (text) {\n                // Change the canvas font size and color\n                Pong.context.font = '50px Courier New';\n                Pong.context.fillStyle = this.color;\n\n                // Draw the rectangle behind the 'Press any key to begin' text.\n                Pong.context.fillRect(\n                    Pong.canvas.width / 2 - 350,\n                    Pong.canvas.height / 2 - 48,\n                    700,\n                    100\n                );\n\n                // Change the canvas color;\n                Pong.context.fillStyle = '#ffffff';\n\n                // Draw the end game menu text ('Game Over' and 'Winner')\n                Pong.context.fillText(text,\n                    Pong.canvas.width / 2,\n                    Pong.canvas.height / 2 + 15\n                );\n\n                setTimeout(function () {\n                    Pong = Object.assign({}, Game);\n                    Pong.initialize();\n                }, 3000);\n            },\n\n            menu: function () {\n                // Draw all the Pong objects in their current state\n                Pong.draw();\n\n                // Change the canvas font size and color\n                this.context.font = '50px Courier New';\n                this.context.fillStyle = this.color;\n\n                // Draw the rectangle behind the 'Press any key to begin' text.\n                this.context.fillRect(\n                    this.canvas.width / 2 - 350,\n                    this.canvas.height / 2 - 48,\n                    700,\n                    100\n                );\n\n                // Change the canvas color;\n                this.context.fillStyle = '#ffffff';\n\n                // Draw the 'press any key to begin' text\n                this.context.fillText('Press any key to begin',\n                    this.canvas.width / 2,\n                    this.canvas.height / 2 + 15\n                );\n            },\n\n            // Update all objects (move the player, paddle, ball, increment the score, etc.)\n            update: function () {\n                if (!this.over) {\n                    // If the ball collides with the bound limits - correct the x and y coords.\n                    if (this.ball.x <= 0) Pong._resetTurn.call(this, this.paddle, this.player);\n                    if (this.ball.x >= this.canvas.width - this.ball.width) Pong._resetTurn.call(this, this.player, this.paddle);\n                    if (this.ball.y <= 0) this.ball.moveY = DIRECTION.DOWN;\n                    if (this.ball.y >= this.canvas.height - this.ball.height) this.ball.moveY = DIRECTION.UP;\n\n                    // Move player if they player.move value was updated by a keyboard event\n                    if (this.player.move === DIRECTION.UP) this.player.y -= this.player.speed;\n                    else if (this.player.move === DIRECTION.DOWN) this.player.y += this.player.speed;\n\n                    // On new serve (start of each turn) move the ball to the correct side\n                    // and randomize the direction to add some challenge.\n                    if (Pong._turnDelayIsOver.call(this) && this.turn) {\n                        this.ball.moveX = this.turn === this.player ? DIRECTION.LEFT : DIRECTION.RIGHT;\n                        this.ball.moveY = [DIRECTION.UP, DIRECTION.DOWN][Math.round(Math.random())];\n                        this.ball.y = Math.floor(Math.random() * this.canvas.height - 200) + 200;\n                        this.turn = null;\n                    }\n\n                    // If the player collides with the bound limits, update the x and y coords.\n                    if (this.player.y <= 0) this.player.y = 0;\n                    else if (this.player.y >= (this.canvas.height - this.player.height)) this.player.y = (this.canvas.height - this.player.height);\n\n                    // Move ball in intended direction based on moveY and moveX values\n                    if (this.ball.moveY === DIRECTION.UP) this.ball.y -= (this.ball.speed / 1.5);\n                    else if (this.ball.moveY === DIRECTION.DOWN) this.ball.y += (this.ball.speed / 1.5);\n                    if (this.ball.moveX === DIRECTION.LEFT) this.ball.x -= this.ball.speed;\n                    else if (this.ball.moveX === DIRECTION.RIGHT) this.ball.x += this.ball.speed;\n\n                    // Handle paddle (AI) UP and DOWN movement\n                    if (this.paddle.y > this.ball.y - (this.paddle.height / 2)) {\n                        if (this.ball.moveX === DIRECTION.RIGHT) this.paddle.y -= this.paddle.speed / 1.5;\n                        else this.paddle.y -= this.paddle.speed / 4;\n                    }\n                    if (this.paddle.y < this.ball.y - (this.paddle.height / 2)) {\n                        if (this.ball.moveX === DIRECTION.RIGHT) this.paddle.y += this.paddle.speed / 1.5;\n                        else this.paddle.y += this.paddle.speed / 4;\n                    }\n\n                    // Handle paddle (AI) wall collision\n                    if (this.paddle.y >= this.canvas.height - this.paddle.height) this.paddle.y = this.canvas.height - this.paddle.height;\n                    else if (this.paddle.y <= 0) this.paddle.y = 0;\n\n                    // Handle Player-Ball collisions\n                    if (this.ball.x - this.ball.width <= this.player.x && this.ball.x >= this.player.x - this.player.width) {\n                        if (this.ball.y <= this.player.y + this.player.height && this.ball.y + this.ball.height >= this.player.y) {\n                            this.ball.x = (this.player.x + this.ball.width);\n                            this.ball.moveX = DIRECTION.RIGHT;\n\n                            // beep1.play();\n                        }\n                    }\n\n                    // Handle paddle-ball collision\n                    if (this.ball.x - this.ball.width <= this.paddle.x && this.ball.x >= this.paddle.x - this.paddle.width) {\n                        if (this.ball.y <= this.paddle.y + this.paddle.height && this.ball.y + this.ball.height >= this.paddle.y) {\n                            this.ball.x = (this.paddle.x - this.ball.width);\n                            this.ball.moveX = DIRECTION.LEFT;\n\n                            // beep1.play();\n                        }\n                    }\n                }\n\n                // Handle the end of round transition\n                // Check to see if the player won the round.\n                if (this.player.score === rounds[this.round]) {\n                    // Check to see if there are any more rounds/levels left and display the victory screen if\n                    // there are not.\n                    if (!rounds[this.round + 1]) {\n                        this.over = true;\n                        setTimeout(function () { Pong.endGameMenu('Winner!'); }, 1000);\n                    } else {\n                        // If there is another round, reset all the values and increment the round number.\n                        this.color = this._generateRoundColor();\n                        this.player.score = this.paddle.score = 0;\n                        this.player.speed += 0.5;\n                        this.paddle.speed += 1;\n                        this.ball.speed += 1;\n                        this.round += 1;\n\n                        // beep3.play();\n                    }\n                }\n                // Check to see if the paddle/AI has won the round.\n                else if (this.paddle.score === rounds[this.round]) {\n                    this.over = true;\n                    setTimeout(function () { Pong.endGameMenu('Game Over!'); }, 1000);\n                }\n            },\n\n            // Draw the objects to the canvas element\n            draw: function () {\n                // Clear the Canvas\n                this.context.clearRect(\n                    0,\n                    0,\n                    this.canvas.width,\n                    this.canvas.height\n                );\n\n                // Set the fill style to black\n                this.context.fillStyle = this.color;\n\n                // Draw the background\n                this.context.fillRect(\n                    0,\n                    0,\n                    this.canvas.width,\n                    this.canvas.height\n                );\n\n                // Set the fill style to white (For the paddles and the ball)\n                this.context.fillStyle = '#ffffff';\n\n                // Draw the Player\n                this.context.fillRect(\n                    this.player.x,\n                    this.player.y,\n                    this.player.width,\n                    this.player.height\n                );\n\n                // Draw the Paddle\n                this.context.fillRect(\n                    this.paddle.x,\n                    this.paddle.y,\n                    this.paddle.width,\n                    this.paddle.height\n                );\n\n                // Draw the Ball\n                if (Pong._turnDelayIsOver.call(this)) {\n                    this.context.fillRect(\n                        this.ball.x,\n                        this.ball.y,\n                        this.ball.width,\n                        this.ball.height\n                    );\n                }\n\n                // Draw the net (Line in the middle)\n                this.context.beginPath();\n                this.context.setLineDash([7, 15]);\n                this.context.moveTo((this.canvas.width / 2), this.canvas.height - 140);\n                this.context.lineTo((this.canvas.width / 2), 140);\n                this.context.lineWidth = 10;\n                this.context.strokeStyle = '#ffffff';\n                this.context.stroke();\n\n                // Set the default canvas font and align it to the center\n                this.context.font = '100px Courier New';\n                this.context.textAlign = 'center';\n\n                // Draw the players score (left)\n                this.context.fillText(\n                    this.player.score.toString(),\n                    (this.canvas.width / 2) - 300,\n                    200\n                );\n\n                // Draw the paddles score (right)\n                this.context.fillText(\n                    this.paddle.score.toString(),\n                    (this.canvas.width / 2) + 300,\n                    200\n                );\n\n                // Change the font size for the center score text\n                this.context.font = '30px Courier New';\n\n                // Draw the winning score (center)\n                this.context.fillText(\n                    'Round ' + (Pong.round + 1),\n                    (this.canvas.width / 2),\n                    35\n                );\n\n                // Change the font size for the center score value\n                this.context.font = '40px Courier';\n\n                // Draw the current round number\n                this.context.fillText(\n                    rounds[Pong.round] ? rounds[Pong.round] : rounds[Pong.round - 1],\n                    (this.canvas.width / 2),\n                    100\n                );\n            },\n\n            loop: function () {\n                Pong.update();\n                Pong.draw();\n\n                // If the game is not over, draw the next frame.\n                if (!Pong.over) requestAnimationFrame(Pong.loop);\n            },\n\n            listen: function () {\n                document.addEventListener('keydown', function (key) {\n                    // Handle the 'Press any key to begin' function and start the game.\n                    if (Pong.running === false) {\n                        Pong.running = true;\n                        window.requestAnimationFrame(Pong.loop);\n                    }\n\n                    // Handle up arrow and w key events\n                    if (key.keyCode === 38 || key.keyCode === 87) Pong.player.move = DIRECTION.UP;\n\n                    // Handle down arrow and s key events\n                    if (key.keyCode === 40 || key.keyCode === 83) Pong.player.move = DIRECTION.DOWN;\n                });\n\n                // Stop the player from moving when there are no keys being pressed.\n                document.addEventListener('keyup', function (key) { Pong.player.move = DIRECTION.IDLE; });\n            },\n\n            // Reset the ball location, the player turns and set a delay before the next round begins.\n            _resetTurn: function (victor, loser) {\n                this.ball = Ball.new.call(this, this.ball.speed);\n                this.turn = loser;\n                this.timer = (new Date()).getTime();\n\n                victor.score++;\n                // beep2.play();\n            },\n\n            // Wait for a delay to have passed after each turn.\n            _turnDelayIsOver: function () {\n                return ((new Date()).getTime() - this.timer >= 1000);\n            },\n\n            // Select a random color as the background of each level/round.\n            _generateRoundColor: function () {\n                var newColor = colors[Math.floor(Math.random() * colors.length)];\n                if (newColor === this.color) return Pong._generateRoundColor();\n                return newColor;\n            }\n        };\n\n        var Pong = Object.assign({}, Game);\n        Pong.initialize();\n    }, []);\n\n    return (\n        <div ref={container} className='pong-container'>\n            {/* <Label>Get some coffee or play pong while you wait for the analysis to finish..</Label> */}\n            <canvas></canvas>\n            <p className=\"credit\">Game Credits <a href=\"https://codepen.io/gdube/pen/JybxxZ\" target=\"_blank\">Pong Game</a></p>\n        </div>\n    );\n};\n\nexport default Pong;","import './Spinner2.css';\n\nconst Spinner2 = () => {\n    return (\n        <div className='dots-bars-5'></div>\n    )    \n}\n\nexport default Spinner2;","import './App.css';\nimport Header from \"./components/Header\";\nimport Gallery from './components/Gallery';\n\nimport { Button, Label, Overlay, Spinner } from \"@blueprintjs/core\";\n\nimport { useState, useEffect, useContext } from 'react';\nimport { AppContext } from './context/AppContext';\n\nimport DimPlot from './components/Plots/ScatterPlot.js';\nimport MarkerPlot from './components/Markers';\nimport Pong from './components/Spinners/Pong';\nimport Spinner2 from './components/Spinners/Spinner2';\n\n// App is the single point of contact with the web workers\n// All requests and responses are received here\n\nfunction App() {\n\n  // show loading screen ?\n  const [loading, setLoading] = useState(true);\n  // props for dialogs\n  const loadingProps = {\n    autoFocus: true,\n    canEscapeKeyClose: false,\n    canOutsideClickClose: false,\n    enforceFocus: true,\n    hasBackdrop: true,\n    usePortal: true,\n    useTallContent: false,\n  };\n\n  const { setWasmInitialized, setTsneData, setRedDims, redDims,\n    setGenesInfo, setInitDims, setQcDims, defaultRedDims, setDefaultRedDims,\n    setQcData, qcData, setClusterData, setFSelectionData,\n    setUmapData, setPcaVarExp, logs, setLogs,\n    selectedCluster, clusterRank,\n    selectedClusterSummary, setSelectedClusterSummary,\n    reqGene, customSelection, clusterData,\n    delCustomSelection, setDelCustomSelection,\n    setSelectedCluster, setShowGame, showGame, datasetName, setExportState,\n    setShowAnimation, triggerAnimation, setTriggerAnimation, params } = useContext(AppContext);\n\n  // initializes various things on the worker side\n  useEffect(() => {\n    window.scranWorker.postMessage({\n      \"type\": \"INIT\",\n      \"msg\": \"Initial Load\"\n    });\n  }, [])\n\n  // request worker for new markers \n  // if either the cluster or the ranking changes\n  useEffect(() => {\n\n    if (selectedCluster !== null) {\n      let type = String(selectedCluster).startsWith(\"cs\") ?\n        \"getMarkersForSelection\" : \"getMarkersForCluster\";\n      window.scranWorker.postMessage({\n        \"type\": type,\n        \"payload\": {\n          \"cluster\": selectedCluster,\n          \"rank_type\": clusterRank,\n        }\n      });\n    }\n  }, [selectedCluster, clusterRank]);\n\n  // compute markers in the worker \n  // when a new custom selection of cells is made through the UI\n  useEffect(() => {\n\n    if (customSelection !== null && Object.keys(customSelection).length > 0) {\n      let csLen = `cs${Object.keys(customSelection).length}`;\n      var cs = customSelection[csLen];\n      window.scranWorker.postMessage({\n        \"type\": \"computeCustomMarkers\",\n        \"payload\": {\n          \"selection\": cs,\n          \"id\": csLen\n        }\n      });\n    }\n  }, [customSelection]);\n\n  // Remove a custom selection from cache\n  useEffect(() => {\n    if (delCustomSelection !== null) {\n      window.scranWorker.postMessage({\n        \"type\": \"removeCustomMarkers\",\n        \"payload\": {\n          \"id\": delCustomSelection\n        }\n      });\n\n      setDelCustomSelection(null);\n    }\n  }, [delCustomSelection])\n\n  // get expression for a gene from worker\n  useEffect(() => {\n\n    reqGene !== null && window.scranWorker.postMessage({\n      \"type\": \"getGeneExpression\",\n      \"payload\": {\n        \"gene\": reqGene\n      }\n    });\n  }, [reqGene]);\n\n  useEffect(() => {\n    triggerAnimation && defaultRedDims && window.scranWorker.postMessage({\n      \"type\": \"animate\" + defaultRedDims,\n      payload: {\n        params: params[defaultRedDims.toLowerCase()]\n      }\n    });\n  }, [triggerAnimation]);\n\n  // callback for all responses from workers\n  // all interactions are logged and shown on the UI\n  window.scranWorker.onmessage = (msg) => {\n    const payload = msg.data;\n\n    if (payload?.msg) {\n      let tmp = [...logs];\n      let d = new Date();\n      tmp.push(`${d.getHours() + \":\" + d.getMinutes() + \":\" + d.getSeconds()} - ${payload?.type} - ${payload?.msg}`);\n\n      setLogs(tmp);\n    }\n\n    if (payload.type === \"INIT\") {\n      setLoading(false);\n      setWasmInitialized(true);\n    } else if (payload.type === \"inputs_DATA\") {\n      setInitDims(`${payload.resp.dimensions.num_genes} genes, ${payload.resp.dimensions.num_cells} cells`);\n      setGenesInfo(payload.resp.gene_names); \n    } else if (payload.type === \"quality_control_metrics_DATA\") {\n      const { resp } = payload;\n      setQcData(resp);\n    } else if (payload.type === \"quality_control_thresholds_DATA\") {\n      const { resp } = payload;\n      let tmp = { ...qcData };\n      tmp[\"thresholds\"] = resp;\n      setQcData(tmp);\n    } else if (payload.type === \"quality_control_filtered_DATA\") {\n      setQcDims(`${payload.resp.retained} cells`);\n    } else if (payload.type === \"feature_selection_DATA\") {\n      const { resp } = payload;\n      setFSelectionData(resp);\n    } else if (payload.type === \"pca_DATA\") {\n      const { resp } = payload;\n      setPcaVarExp(resp);\n    } else if (payload.type === \"snn_cluster_graph_DATA\") {\n      const { resp } = payload;\n      setClusterData(resp);\n\n      // show markers for the first cluster\n      setSelectedCluster(0);\n    } else if (payload.type === \"tsne_DATA\" || payload.type === \"tsne_iter\") {\n      const { resp } = payload;\n      setTsneData(resp);\n\n      setShowAnimation(true);\n\n      let tmp = [...redDims];\n      tmp.push(\"TSNE\");\n      // once t-SNE is available, set this as the default display\n      if (!defaultRedDims) {\n        setDefaultRedDims(\"TSNE\");\n      }\n\n      setRedDims(tmp);\n      // also don't show the pong game anymore\n      setShowGame(false);\n\n      // assuming the last response is _data\n      if (payload.type === \"tsne_DATA\") {\n        setShowAnimation(false);\n        setTriggerAnimation(false);\n      }\n    } else if (payload.type === \"umap_DATA\" || payload.type === \"umap_iter\") {\n      const { resp } = payload;\n      setUmapData(resp);\n\n      setShowAnimation(true);\n\n      // enable UMAP selection\n      let tmp = [...redDims];\n      tmp.push(\"UMAP\");\n      setRedDims(tmp);\n\n      // assuming the last response is _data\n      if (payload.type === \"umap_DATA\") {\n        setShowAnimation(false);\n        setTriggerAnimation(false);\n      }\n    } else if (payload.type === \"markerGene_DATA\") {\n    } else if (payload.type === \"setMarkersForCluster\"\n      || payload.type === \"setMarkersForCustomSelection\") {\n      const { resp } = payload;\n      let records = [];\n      resp.means.forEach((x, i) => {\n        records.push({\n          \"index\": i,\n          \"row\": resp?.ordering?.[i],\n          \"mean\": x,\n          \"delta\": resp?.delta_detected?.[i],\n          \"lfc\": resp?.lfc?.[i],\n          \"detected\": resp?.detected?.[i],\n          \"expanded\": false,\n          \"expr\": null,\n        });\n      });\n      setSelectedClusterSummary(records);\n    } else if (payload.type === \"setGeneExpression\") {\n      const { resp } = payload;\n      let tmp = [...selectedClusterSummary];\n      for (var i = 0; i < tmp.length; i++) {\n        if (resp.gene === tmp[i].row) {\n          tmp[i].expr = Object.values(resp.expr);\n          break;\n        }\n      }\n      setSelectedClusterSummary(tmp);\n    } else if (payload.type === \"exportState\") {\n      const { resp } = payload;\n\n      let tmpLink = document.createElement(\"a\");\n      var fileNew = new Blob([resp], {\n        type: \"text/plain\"\n      });\n      tmpLink.href = URL.createObjectURL(fileNew);\n      tmpLink.download = datasetName.split(' ').join('_') + \".kana.gz\";\n      tmpLink.click();\n\n      setExportState(false);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"App-content\">\n        <div className=\"plot\">\n          {\n            defaultRedDims ?\n              <DimPlot /> :\n              showGame ?\n                <div style={{\n                  height: '100%',\n                  width: '100%',\n                  display: 'flex',\n                  flexDirection: 'column',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  paddingTop: '50px'\n                }}>\n                  <Label>Get some coffee or play pong while you wait for the analysis to finish..</Label>\n                  <Button onClick={() => { setShowGame(false) }}>I'm good, go back</Button>\n                  <Pong />\n                </div>\n                :\n                <div style={{\n                  height: '100%',\n                  width: '100%',\n                  display: 'flex',\n                  flexDirection: 'column',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  paddingTop: '50px'\n                }}>\n                  <Spinner2 />\n                  <Label>Get some coffee or play pong while you wait for the analysis to finish..</Label>\n                  <Button onClick={() => { setShowGame(true) }}>Play Pong</Button>\n                </div>\n          }\n        </div>\n        <div className=\"marker\">\n          {clusterData ?\n            <MarkerPlot /> :\n            <div style={{\n              height: '100%',\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center'\n            }}>\n              <Spinner2 />\n              <Label>Generating nearest neighbor graph to compute clusters....</Label>\n            </div>}\n        </div>\n        <div className=\"analysis\">\n          <Gallery />\n        </div>\n      </div>\n      <Overlay\n        isOpen={loading}\n        {...loadingProps}\n      >\n        <div className=\"spinner\">\n          <Spinner size={100} />\n          <p>Initializing kana</p>\n        </div>\n      </Overlay>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport AppContext from \"./context/AppContext\";\n\nReactDOM.render(\n  // <React.StrictMode>\n    <AppContext>\n      <App />\n    </AppContext>,\n  //  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n// serviceWorkerRegistration.unregister();\n// serviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}