{"version":3,"file":"static/js/459.7c1dc0d9.chunk.js","mappings":"o/HAEO,SAASA,EAAUC,QACPC,IAAXD,GAAmC,OAAXA,GACxBA,EAAOE,OAKR,SAASC,EAAaC,GACzB,GAAI,aAAcA,EAAO,CACrB,cAAqBC,OAAOC,QAAQF,EAAMG,UAA1C,eAAqD,CAAhD,sBAAUC,GAAV,WACGA,aAAaC,EAAAA,IACbD,EAAEN,cAGHE,EAAMG,UAId,SAASG,EAAkBC,EAAGC,GACjC,OAAOC,KAAKC,UAAUH,IAAME,KAAKC,UAAUF,GAGxC,SAASG,EAAaC,GACzB,IAAIC,GAAOC,EAAAA,EAAUC,EAAMD,EAAAA,EAS3B,OARAF,EAAII,SAAQ,SAAUT,GACdM,EAAMN,IACNM,EAAMN,GAENQ,EAAMR,IACNQ,EAAMR,MAGP,CAACQ,EAAKF,GAGV,SAASI,EAAoBC,EAAMC,EAAMnB,GAAyB,IAAlBoB,EAAiB,uDAAV,SACtDC,GAAa,EACjB,GAAID,KAAQpB,EAAO,CACf,IAAIsB,EAAYtB,EAAMoB,GAClBE,EAAUJ,MAAQA,GAAQI,EAAUC,YAAYC,WAAaL,EAC7DG,EAAUxB,OAEVuB,GAAa,EAIrB,GAAIA,EACA,OAAQF,GACJ,IAAK,aACDnB,EAAMoB,GAAQ,IAAIf,EAAAA,GAAqBa,GACvC,MACJ,IAAK,aACDlB,EAAMoB,GAAQ,IAAIf,EAAAA,GAAqBa,GACvC,MACJ,IAAK,eACDlB,EAAMoB,GAAQ,IAAIf,EAAAA,GAAuBa,GACzC,MACJ,QAGI,KAAM,eAAiBC,EAAO,sBAI1C,OAAOnB,EAAMoB,GAGV,SAASK,EAAe7B,EAAQ8B,GACnC,GAAIC,MAAMC,QAAQhC,GAAS,CAAC,IAAD,YACDA,GADC,IACvB,2BAA8B,CAC1B6B,EAD0B,QACFC,IAFL,oCAIpB,GAAI9B,EAAO2B,aAAetB,OAC7B,cAA6BA,OAAOC,QAAQN,GAA5C,eAAqD,CAAhD,2BACD6B,EADC,KACuBC,QAEzB,GAAIG,YAAYC,OAAOlC,GAAS,CACnC,KAAOA,EAAOmC,kBAAkBF,aAC5B,KAAM,qDAEVH,EAAMM,KAAKpC,EAAOmC,S,kCC5EtB/B,EAAQ,GACRiC,EAAa,GACbC,EAAc,GAEPC,GAAU,EAErB,SAASC,EAAaC,GAClB,IAAIC,EAAM,IAAIjC,EAAAA,GAAqBL,EAAMuC,OAAOC,gBAChD,IACIxC,EAAMuC,OAAOE,YAAY,CAAEV,OAAQO,IAGnC,IADA,IAAII,EAAOJ,EAAIK,QACf,MAAyB1C,OAAOC,QAAQmC,GAAxC,eAAgD,CAG5C,IAHC,sBAAOO,EAAP,KAAYC,EAAZ,KACGC,EAAOD,EAAIE,QAENC,EAAI,EAAGA,EAAIN,EAAKO,OAAQD,IAC7BF,EAAKJ,EAAKM,IAAMH,EAAIG,GAExBX,EAAMO,GAAOE,GAVrB,QAaIR,EAAIxC,QAIZ,SAASoD,EAAWC,GAEhB,IADA,IAAId,EAAQ,GACHW,EAAI,EAAGA,EAAIG,EAAeH,IAC/BX,EAAML,KAAN,eAAmBgB,EAAI,IAE3B,MAAO,CAAE,GAAMX,GAInB,SAASe,EAAoBC,GACzBC,EAAgBtD,EAAMuC,QAGtB,IACIgB,EADYF,EAAMG,QAAO,SAAAjD,GAAC,MAAc,OAAVA,EAAEY,QACV,GACtBsC,EAAW,IAAIC,WAAWH,EAAUxB,QAEpC4B,EAAwB,MADlBJ,EAAUnC,KAAKwC,MAAM,KAAKC,MAKpC,GAHA7D,EAAMuC,OAASlC,EAAAA,GAAmDoD,EAAU,CAAE,WAAcE,IAGnE,IADrBG,EAAaT,EAAMG,QAAO,SAAAjD,GAAC,MAAc,SAAVA,EAAEY,SACtB8B,OAAa,CACxB,IAAIa,EAAaA,EAAW,GACxBC,EAAU,IAAIL,WAAWI,EAAW/B,QAE7B,MADD+B,EAAW1C,KAAKwC,MAAM,KAAKC,QAEjCE,EAAUC,EAAAA,GAAYD,IAG1B,IACIE,GADQ,IAAIC,aACIC,OAAOJ,GAEvBK,EADQC,EAAAA,EAAa,MACRC,UAAUL,GAC3B,GAAIG,EAAOnB,QAAUjD,EAAMuC,OAAOC,eAC9B,KAAM,iEAAmEsB,EAAW1C,KAAO,IAG/F,IAAImD,EAAM,GAAIC,EAAO,GACrBJ,EAAOpD,SAAQ,SAAAT,GACXgE,EAAIvC,KAAKzB,EAAE,IACXiE,EAAKxC,KAAKzB,EAAE,OAGhBP,EAAMqC,MAAQ,CAAE,GAAMkC,EAAK,OAAUC,QAErCxE,EAAMqC,MAAQa,EAAWlD,EAAMuC,OAAOC,gBAG1CJ,EAAapC,EAAMqC,OA8KvB,SAASoC,EAAmBC,GAEpB,IAAIC,EA1FZ,SAA4BD,GAIxB,IAA6B,GAHjBA,EAAEE,OAGJC,QAAQ,OACd,OAAO,KAGX,IAAIC,EAAOJ,EAAEK,IAAI,OACjB,KAAMD,aAAgBE,EAAAA,IAClB,OAAO,KAGX,IAAIC,EAAQH,EAAKF,OACjB,IAAgC,GAA5BK,EAAMJ,QAAQ,UACd,OAAO,KAGX,IAAIK,EAAQJ,EAAKC,IAAI,UACrB,KAAMG,aAAiBF,EAAAA,IACnB,OAAO,KAGX,IAvB2B,EAuBvBL,EAAS,CAAE,OAAUO,EAAMC,OAvBJ,UA0BTF,GA1BS,IA0B3B,2BAAyB,CAAC,IAAfrC,EAAc,QACrB,GAAW,UAAPA,IAIAA,EAAIwC,MAAM,UAAYxC,EAAIwC,MAAM,YAAY,CAC5C,IAAIC,EAAUP,EAAKC,IAAInC,GACnByC,aAAmBL,EAAAA,KACnBL,EAAOW,OAASD,EAAQF,SAlCT,8BAuC3B,OAAOR,EAmDUY,CAAmBb,GAChC,GAAe,OAAXC,EACA,OAAOA,EAKX,IAAIA,EAvDZ,SAA2BD,GAIvB,IAAgC,GAHpBA,EAAEE,OAGJC,QAAQ,UACd,OAAO,KAGX,IAAIW,EAAMd,EAAEK,IAAI,UAChB,KAAMS,aAAeR,EAAAA,IACjB,OAAO,KAIX,IAAkC,GADtBQ,EAAIZ,OACNC,QAAQ,YACd,OAAO,KAGX,IAAIY,EAAQD,EAAIT,IAAI,YACpB,KAAMU,aAAiBT,EAAAA,IACnB,OAAO,KAGX,IAAIU,EAAWD,EAAMb,OACrB,IAA+B,GAA3Bc,EAASb,QAAQ,MACjB,OAAO,KAGX,IAAIc,EAASF,EAAMV,IAAI,MACvB,KAAMY,aAAkBX,EAAAA,IACpB,OAAO,KAGX,IAAIL,EAAS,CAAEiB,GAAID,EAAOR,OAG1B,IAAmB,GADFO,EAASb,QAAQ,QACZ,CAClB,IAAIgB,EAAWJ,EAAMV,IAAI,QACrBc,aAAoBb,EAAAA,KACpBL,EAAOvD,KAAOyE,EAASV,OAI/B,OAAOR,EAYUmB,CAAkBpB,GAC/B,OAAe,OAAXC,EACOA,EAIR,KAGX,SAASoB,EAAY1C,GACjBC,EAAgBtD,EAAMuC,QAGtB,IAAIyD,EAAa3C,EAAM,GACnB4C,EAAU,iBACd,IACIjB,EAAAA,GAAAA,UAAkBiB,EAAS,IAAIvC,WAAWsC,EAAWjE,SACrD,IAAI2C,EAAI,IAAIM,EAAAA,GAAUiB,EAAS,KAC/B,IACI,IAAIC,EAvJhB,SAAmBxB,GACf,IAAIyB,EAAQzB,EAAEE,OACd,IAA2B,GAAvBuB,EAAMtB,QAAQ,KACd,MAAO,IACJ,IAAgC,GAA5BsB,EAAMtB,QAAQ,UACrB,MAAO,SAEP,IADG,EACCuB,EAAc,GACdC,EAAa,GAFd,UAKeF,GALf,IAKH,2BAAyB,CAAC,IAAfvD,EAAc,QACjByC,EAAUX,EAAEK,IAAInC,GACpB,GAAIyC,aAAmBL,EAAAA,GAAY,CAC/B,IAAIsB,EAAWjB,EAAQT,QACU,GAA7B0B,EAASzB,QAAQ,SAAiByB,EAASzB,QAAQ,YAAcyB,EAASzB,QAAQ,WAClFuB,EAAYpE,KAAKY,QAEdyC,aAAmBL,EAAAA,IAAwC,GAAxBK,EAAQkB,MAAMtD,QACxDoD,EAAWrE,KAAKY,IAbrB,8BAiBH,GAAIwD,EAAYnD,OACZ,OAAOmD,EAAY,GAChB,GAAIC,EAAWpD,OAClB,OAAOoD,EAAW,GAElB,KAAM,sEA2HKG,CAAU9B,GACrB1E,EAAMuC,OAASlC,EAAAA,GAA2CqE,EAAGwB,GAC7DlG,EAAMqC,MAAQoC,EAAmBC,GAHrC,QAKIA,EAAE+B,SARV,QAWIzB,EAAAA,GAAAA,OAAeiB,GAGC,OAAhBjG,EAAMqC,QACNrC,EAAMqC,MAAQa,EAAWlD,EAAMuC,OAAOC,iBAE1CJ,EAAapC,EAAMqC,OA0ChB,SAASqE,EAAQC,GACpB,OAAQA,EAAKC,QACT,IAAK,OA/Pb,SAA0BD,GAKtB,IAJA,IAAIE,EAAS,IAAIC,eAIRC,EAAK,EAAGA,EAAK,EAAGA,IAAM,CAC3B,IAEIC,EAFAC,EAAY,CAAE,KAAQ,eAAgB,MAAS,IAI/CD,EADM,GAAND,EACY,SAACrC,GAAD,OAAOA,EAAExD,MAET,SAACwD,GAAD,OAAOmC,EAAOK,kBAAkBxC,IAPrB,gBAUXiC,EAAKQ,KAVM,IAU3B,2BAA0B,CAAC,IAAhBzC,EAAe,QACtBuC,EAAU5D,MAAMrB,KAAK,CAAE,KAAQ,MAAO,KAAQ0C,EAAEtD,KAAM,OAAU4F,EAAUtC,MAXnD,8BAc3B,GAAkB,OAAdiC,EAAKS,KAAe,CACpB,GAAyB,IAArBT,EAAKS,KAAKnE,OACV,KAAM,sCAEV,IAAIa,EAAa6C,EAAKS,KAAK,GAC3BH,EAAU5D,MAAMrB,KAAK,CAAE,KAAQ,QAAS,KAAQ8B,EAAW1C,KAAM,OAAU4F,EAAUlD,KAGzF,GAAU,GAANiD,EAAS,CACT,IAAKzD,EAAwBpB,EAAa+E,GAEtC,YADA9E,GAAU,GAGVD,EAAc+E,EACd9E,GAAU,OAGdF,EAAagF,EACb7D,EAAoB6D,EAAU5D,cACvBrD,EAAMG,UA0NbkH,CAAiBV,EAAKtD,OACtB,MACJ,IAAK,OACL,IAAK,OACL,IAAK,QA7Cb,SAAkBsD,GAKd,IAJA,IAAIE,EAAS,IAAIC,eAIRC,EAAK,EAAGA,EAAK,EAAGA,IAAM,CAC3B,IAEIC,EAFAC,EAAY,CAAE,KAAQ,OAAQ,MAAS,IAIvCD,EADM,GAAND,EACY,SAACrC,GAAD,OAAOA,EAAExD,MAET,SAACwD,GAAD,OAAOmC,EAAOK,kBAAkBxC,IAPrB,gBAUXiC,EAAKW,MAVM,IAU3B,2BAA2B,CAAC,IAAjB5C,EAAgB,QACvBuC,EAAU5D,MAAMrB,KAAK,CAAE,KAAQ,KAAM,KAAQ0C,EAAEtD,KAAM,OAAU4F,EAAUtC,MAXlD,8BAc3B,GAAU,GAANqC,EAAS,CACT,IAAKzD,EAAwBpB,EAAa+E,GAEtC,YADA9E,GAAU,GAGVD,EAAc+E,EACd9E,GAAU,OAGdF,EAAagF,EACblB,EAAYkB,EAAU5D,cACfrD,EAAMG,UAgBboH,CAASZ,EAAKtD,OACd,MACJ,IAAK,OAED,MACJ,QACI,KAAM,mCAAqCsD,EAAKC,OAAS,KAK9D,SAASY,IACZ,IAAI7C,EAAS,CAAE,WAAc8C,KAM7B,OAJI9C,EAAOtC,MADP,aAAcrC,GACd,UAAoBA,EAAMG,SAASkC,QAEnC,UAAoBrC,EAAMqC,OAEvBsC,EAGJ,SAAS+C,IACZ,IAAIjE,EAAW,GACX,aAAczD,GACdyD,EAASpB,OAAT,UAAsBrC,EAAMG,SAASkC,OACrCoB,EAASkE,UAAY3H,EAAMG,SAASwH,YAEpClE,EAASpB,OAAT,UAAsBrC,EAAMqC,OAC5BoB,EAASkE,UAAY3H,EAAMuC,OAAOqF,mBAKtC,IAAIC,GAAW,UAAQ5F,GAGvB,OAFA4F,EAAYxE,MAAQpB,EAAWoB,MAAMyE,KAAI,SAAAvH,GAAO,OAAO,UAAKA,MAErD,CACL,WAAcsH,EACd,SAAYpE,GAIX,SAASsE,EAAYC,GACxB/F,EAAa+F,EAAM/F,WACnBjC,EAAMG,SAAW6H,EAAMvE,SAKpB,SAASwE,IAQZ,MAPI,aAAcjI,IACS,gBAAnBiC,EAAWd,KACXiC,EAAoBnB,EAAWoB,OAE/B0C,EAAY9D,EAAWoB,QAGxBrD,EAAMuC,OAGV,SAASkF,IACZ,MAAI,aAAczH,EACP,CAIH,UAAaC,OAAOiI,OAAOlI,EAAMG,SAASkC,OAAO,GAAGY,OACpD,UAAajD,EAAMG,SAASwH,WAGzB,CACH,UAAa3H,EAAMuC,OAAOC,eAC1B,UAAaxC,EAAMuC,OAAOqF,mBAK/B,SAASO,IACZ,MAAI,aAAcnI,EACPA,EAAMG,SAASkC,MAEfrC,EAAMqC,MCvad,IAAI+F,EAAO,GAClBA,EAAKC,QAAU,IAAIC,IAAI,CAAC,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,qBAAqB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,kBAAkB,oBACz6CF,EAAKG,OAAS,IAAID,IAAI,CAAC,QAAQ,UAAU,QAAQ,UAAU,SAAS,SAAS,QAAQ,QAAQ,QAAQ,SAAS,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,SAAS,SAAS,QAAQ,SAAS,QAAQ,UAAU,UAAU,SAAS,QAAQ,SAAS,QAAQ,SAAS,QAAQ,SAAS,SAAS,SAAS,SAAS,QAAQ,UAAU,QAAQ,QAAQ,UAAU,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,UAAU,SAAS,SAAS,QAAQ,QAAQ,UAAU,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,SAAS,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,SAAS,SAAS,QAAQ,QAAQ,QAAQ,UAAU,UAAU,YCC9oB,IAAItI,EAAQ,GACRiC,EAAa,GAENE,IAAU,EAErB,SAASqG,GAAW7B,GAChBrD,EAAgBtD,EAAMyI,KACtB,IAIIC,EAAUpF,EADC,GAHXkC,EAAMmD,KAIkCnG,eAA2B,aAAcxC,GACrF0I,EAAQE,KAAK,GAIb,IAFA,IAAIC,EAAYF,IACZG,EAAUJ,EAAQ/F,QACtB,MAAyB1C,OAAOC,QAAQ2I,GAAxC,eAAoD,CAA/C,sBAAYhG,GAAZ,WACD,GAAI8D,EAAKoC,iBACLlG,EAAI7B,SAAQ,SAACT,EAAGyC,IACRoF,EAAKG,OAAOS,IAAIzI,IAAM6H,EAAKC,QAAQW,IAAIzI,MACvCuI,EAAQ9F,GAAK,UAGlB,CACH,IAAIiG,EAAatC,EAAKuC,YAAYC,cAClCtG,EAAI7B,SAAQ,SAACT,EAAGyC,GACTzC,EAAE4I,cAAcC,WAAWH,KAC1BH,EAAQ9F,GAAK,OAM7B,IAAIwC,EAAMmD,IAEV3I,EAAMyI,IAAMpI,EAAAA,GAA8BmF,EAAKkD,UACxC1I,EAAMG,SAIjB,SAASkJ,KACL,IAAIC,EAAO,GACX,GAAI,aAActJ,EAAO,CACrB,IAAIuJ,EAAYvJ,EAAMG,SACtBmJ,EAAKE,KAAOD,EAAUC,KAAKzG,QAC3BuG,EAAKG,SAAWF,EAAUE,SAAS1G,QACnCuG,EAAKI,WAAaH,EAAUG,WAAW3G,YACpC,CACCwG,EAAYvJ,EAAMyI,IACtBa,EAAKE,KAAOD,EAAUC,OACtBF,EAAKG,SAAWF,EAAUE,WAC1BH,EAAKI,WAAaH,EAAUI,kBAAkB,GAElD,OAAOL,EAGJ,SAAS5C,GAAQC,GACfgC,GAAmBrF,EAAwBrB,EAAY0E,IAGxD6B,GAAW7B,GACX1E,EAAa0E,EACbxE,IAAU,GAJVA,IAAU,EASX,SAASqF,KACZ,IAAI8B,EAAOD,KAEPO,EAAS,GAKb,OAJAA,EAAOJ,KAAOlG,EAAmBgG,EAAKE,MACtCI,EAAOH,SAAWnG,EAAmBgG,EAAKG,UAC1CG,EAAOF,WAAapG,EAAmBgG,EAAKI,YAErC,CACH,KAAQJ,EACR,OAAUM,GAIX,SAASlC,KACZ,MAAO,CACL,WAAczF,EACd,SAAYoH,MAIX,SAAStB,GAAYC,GAIxB/F,EAAa+F,EAAM/F,WACnBjC,EAAMG,SAAW6H,EAAMvE,SAIpB,SAASoG,KAIZ,MAHI,aAAc7J,GACdwI,KAEGxI,EAAMyI,IAGV,SAASqB,KAAmC,IAAD,yDAAJ,GAAI,IAAtBC,OAAAA,OAAsB,SAC9C,MAAI,aAAc/J,EACPA,EAAMG,SAASqJ,KAIfxJ,EAAMyI,IAAIe,KAAK,CAAE1G,MAAOiH,IC/GvC,IAAI/J,GAAQ,GACRiC,GAAa,GAENE,IAAU,EAEd,SAASuE,GAAQC,GACpB,GAAKqD,IAAoB1G,EAAwBrB,GAAY0E,GAEtD,CACHrD,EAAgBtD,GAAMyI,KACtB,IAAIwB,EAAQD,KAEZhK,GAAMyI,IAAMpI,EAAAA,GAA8B4J,EAAO,CAAEC,aAAcvD,EAAKwD,QAEtE7G,EAAmBtD,IACnBmC,IAAU,EACVF,GAAa0E,OATbxE,IAAU,EAcX,SAASqF,KACZ,IAAI8B,EACJ,GAAI,aAActJ,GACdsJ,EAAO,CACH,KAAQtJ,GAAMG,SAASqJ,KACvB,SAAYxJ,GAAMG,SAASsJ,SAC3B,WAAczJ,GAAMG,SAASuJ,gBAE9B,CACH,IAAIU,EAAMpK,GAAMyI,IAChBa,EAAO,CACH,KAAQc,EAAIC,iBAAiB,GAC7B,SAAYD,EAAIE,qBAAqB,GACrC,WAAcF,EAAIG,4BAA4B,GAAG,IAGzD,OAAOjB,EAGJ,SAAS5B,KACZ,IAAIjE,EAAW+D,KAEf,OADA/D,EAAS+G,SAAWC,KACb,CACH,WAAcxI,GACd,SAAYwB,GAIb,SAASsE,GAAYC,GACxB/F,GAAa+F,EAAM/F,WAEnBqB,EAAmBtD,IACnBA,GAAMG,SAAW6H,EAAMvE,SAEvB,IAAIiH,EAAM,IAAIrK,EAAAA,GAAqBL,GAAMG,SAASqK,SAASvH,QAC3DyH,EAAIC,IAAI3K,GAAMG,SAASqK,UACvBxK,GAAMG,SAASqK,SAAWE,EAKvB,SAASE,KACZ,GAAI,aAAc5K,GACd,OAAOA,GAAMG,SAASqK,SAEtB,IAAIE,EAAM1K,GAAMyI,IAAIoC,eAAe,CAAE/H,MAAM,IAC3C,OAAO,IAAIzC,EAAAA,GAAqBqK,EAAIzH,OAAQyH,EAAII,YAIjD,SAASL,KAAwC,IAChDM,EAD+C,yDAAJ,GAAI,IAAvBhB,OAAAA,OAAuB,SAQnD,OALIgB,EADA,aAAc/K,GACRA,GAAMG,SAASqK,SAAS7H,QAExB3C,GAAMyI,IAAIoC,iBAGhBd,EAGOgB,EAEAA,EAAIhI,QCnFnB,IAAI/C,GAAQ,GACRiC,GAAa,GAENE,IAAU,EAErB,SAASqG,KACLlF,EAAgBtD,GAAMuC,QACtB,IAAIiD,EAAMmD,IAENqC,EAAOC,KACXjL,GAAMuC,OAASlC,EAAAA,GAAkBmF,EAAKwF,UAE/BhL,GAAMG,SAIV,SAASuG,GAAQC,GACfgC,GAAmBsC,IAAuB3H,EAAwBrB,GAAY0E,IAG/E6B,KACAvG,GAAa0E,EACbxE,IAAU,GAJVA,IAAU,EASX,SAASqF,KACZ,MAAO,CACL,SAAY0D,MAIX,SAASxD,KACZ,MAAO,CACH,WAAczF,GACd,SAAYuF,MAIb,SAASO,GAAYC,GACxB/F,GAAa+F,EAAM/F,WACnBjC,GAAMG,SAAW6H,EAAMvE,SAGvB,IAL+B,EAK3B+G,EAAWS,GAAyB,CAAElB,QAAQ,IAC9CoB,EAAW,EANgB,UAOfX,GAPe,IAO/B,2BAA0B,CACb,GADa,SAElBW,KATuB,8BAY/BnL,GAAMG,SAASgL,SAAWA,EAIvB,SAASC,KAIZ,MAHI,aAAcpL,IACdwI,KAEGxI,GAAMuC,OAGV,SAAS2I,KACZ,MAAI,aAAclL,GACPA,GAAMG,SAASgL,SAEfnL,GAAMuC,OAAOqF,kBClE5B,IAAI5H,GAAQ,GACRiC,GAAa,GAENE,IAAU,EAErB,SAASqG,KAWL,IAVA,IAAIhD,EAAMhC,KACNzB,EAASuB,EAA0BkC,EAAIoC,kBAAmB,eAAgB5H,IAG1EwJ,EAAOQ,GAAkB,CAAED,QAAQ,IACnCS,EAAWS,GAAyB,CAAElB,QAAQ,IAG9CsB,EAAetJ,EAAOY,QACtB2I,EAAI,EACCtI,EAAI,EAAGA,EAAIwH,EAASvH,SAAUD,EAC9BwH,EAASxH,KACVqI,EAAaC,GAAK9B,EAAKxG,GACvBsI,KAIR,GAAIA,GAAK9F,EAAIoC,kBACT,KAAM,8CAGVtE,EAAgBtD,GAAMuC,QACtBvC,GAAMuC,OAASlC,EAAAA,GAAoBmF,EAAK,CAAE+F,YAAaxJ,WAEhD/B,GAAMG,SAIV,SAASuG,GAAQC,GACfqD,IAAoBxG,IAAmBF,EAAwBrB,GAAY0E,IAG5E6B,KACAvG,GAAa0E,EACbxE,IAAU,GAJVA,IAAU,EASX,SAASqF,KACZ,MAAO,GAGJ,SAASE,KACZ,MAAO,CACH,WAAczF,GACd,SANG,IAUJ,SAAS8F,GAAYC,GACxB/F,GAAa+F,EAAM/F,WACnBjC,GAAMG,SAAW6H,EAAMvE,SAIpB,SAAS+H,KAIZ,MAHI,aAAcxL,IACdwI,KAEGxI,GAAMuC,OAGV,SAASkJ,GAAgBvG,GAC5B,IAAIM,EAAMgG,KACNzJ,EAASuB,EAA0BkC,EAAIoC,kBAAmB,eAAgB5H,IAE9E,OADAwF,EAAIkG,IAAIxG,EAAO,CAAEnD,OAAQA,IAClBA,EAAOgB,QC3ElB,IAAI/C,GAAQ,GACRiC,GAAa,GAENE,IAAU,EAYd,SAASuE,GAAQC,GACpB,GAAKgF,IAA0BrI,EAAwBrB,GAAY0E,GAE5D,CACH,IAAInB,EAAMmG,KACV3L,GAAMyI,IAAMpI,EAAAA,GAAmBmF,EAAK,CAAEoG,KAAMjF,EAAKiF,OAEjD5L,GAAM6L,iBAAmB7L,GAAMyI,IAAIqD,YAAY/I,QAC/C/C,GAAM6L,iBAAiBE,OAEvB9J,GAAa0E,SACN3G,GAAMG,SACbgC,IAAU,OAVVA,IAAU,EAeX,SAASqF,KACZ,MAAI,aAAcxH,GACP,CACH,MAASA,GAAMG,SAAS6L,MAAMjJ,QAC9B,KAAQ/C,GAAMG,SAAS2E,KAAK/B,QAC5B,OAAU/C,GAAMG,SAAS8L,OAAOlJ,QAChC,OAAU/C,GAAMG,SAAS+L,OAAOnJ,SAjC5C,WACI,IAAIoJ,EAAenM,GAAMyI,IACzB,MAAO,CACH,MAAS0D,EAAaH,QACtB,KAAQG,EAAaC,YACrB,OAAUD,EAAaF,SACvB,OAAUE,EAAaL,aA8BhBO,GAIR,SAAS3E,KACZ,MAAO,CACH,WAAczF,GACd,SAAYuF,MAIb,SAASO,GAAYC,GACxB/F,GAAa+F,EAAM/F,WACnBjC,GAAMG,SAAW6H,EAAMvE,SACvBzD,GAAM6L,iBAAmB7L,GAAMG,SAAS+L,OAAOnJ,QAC/C/C,GAAM6L,iBAAiBE,OAIpB,SAASO,KACZ,OAAOtM,GAAM6L,iBAGV,SAASU,KAAyC,IAAD,yDAAJ,GAAI,IAAvBxC,OAAAA,OAAuB,SACpD,MAAI,aAAc/J,GACPA,GAAMG,SAAS+L,OAEflM,GAAMyI,IAAIqD,UAAU,CAAEhJ,MAAOiH,ICnE5C,IAAI/J,GAAQ,GACRiC,GAAa,GAENE,IAAU,EAErB,SAASqK,KACL,GAAI,aAAcxM,GACd,OAAOA,GAAMG,SAASsM,IAEtB,IAAI/B,EAAM1K,GAAMyI,IAAIiE,oBAAoB,CAAE5J,MAAM,IAChD,OAAO,IAAIzC,EAAAA,GAAuBqK,EAAIzH,OAAQyH,EAAII,YAInD,SAASpE,GAAQC,GACpB,GAAKgF,IAA0BgB,IAAqBrJ,EAAwBrB,GAAY0E,GAEjF,CAEH,IAAIiG,EAAgBD,KAChBE,EAAeD,EAAcA,EAAc3J,OAAS0D,EAAKmG,UAEzDtH,EAAMmG,KACNoB,EAAMzJ,EAA0BkC,EAAIhD,eAAgB,aAAcxC,IAClEgN,EAAkBL,GAAwB,CAAE5C,QAAQ,IACxDgD,EAAIpK,QAAQ3B,SAAQ,SAACiM,EAAS/H,EAAOvC,GACjCA,EAAMuC,GAAS8H,EAAgB9H,IAAU2H,KAI7CvJ,EAAgBtD,GAAMyI,KACtBzI,GAAMyI,IAAMpI,EAAAA,GAAamF,EAAK,CAAE0H,SAAUH,EAAKI,YAAaxG,EAAKyG,UAEjE9J,EAAmBtD,IACnBmC,IAAU,EACVF,GAAa0E,OAnBbxE,IAAU,EAwBX,SAASqF,KACZ,IAAI6F,EAEJ,GAAI,aAAcrN,GACdqN,EAAUrN,GAAMG,SAASkN,QAAQtK,YAC9B,CACH,IAAIuK,EAAatN,GAAMyI,IACvB4E,EAAUC,EAAWC,oBACrB,IAAIC,EAAYF,EAAWG,gBAC3BJ,EAAQrM,SAAQ,SAACT,EAAGyC,GAChBqK,EAAQrK,GAAKzC,EAAEiN,KAIvB,MAAO,CAAE,QAAWH,GAGjB,SAAS3F,KACZ,IAAIgG,EAAUlG,KAEd,OADAkG,EAAQjB,IAAMD,KAAsBzJ,QAC7B,CACL,WAAcd,GACd,SAAYyL,GAIX,SAAS3F,GAAYC,GACxB/F,GAAa+F,EAAM/F,WAEnBqB,EAAmBtD,IACnBA,GAAMG,SAAW6H,EAAMvE,SAEvB,IAAIiH,EAAM,IAAIrK,EAAAA,GAAuBL,GAAMG,SAASsM,IAAIxJ,QACxDyH,EAAIC,IAAI3K,GAAMG,SAASsM,KACvBzM,GAAMG,SAASsM,IAAM/B,EAIlB,SAASiD,KACZ,IAAIlB,EAAMD,KACV,MAAO,CACH,IAAOC,EACP,QAAWxK,GAAWmL,QACtB,QAAWX,EAAIxJ,OAAShB,GAAWmL,SCpF3C,IAAIpN,GAAQ,GACRiC,GAAa,GAENE,IAAU,EAEd,SAASqG,GAAW7B,GACvBrD,EAAgBtD,GAAMyI,KACtB,IAAIgE,EAAMmB,KACV5N,GAAMyI,IAAMpI,EAAAA,GAA+BoM,EAAIA,IAAK,CAAEoB,aAAcpB,EAAIW,QAASU,cAAerB,EAAIsB,iBAC7F/N,GAAMG,SAIV,SAASuG,GAAQC,GACfiH,IAAgBtK,EAAwBrB,GAAY0E,IAGrD6B,KACAvG,GAAa0E,EACbxE,IAAU,GAJVA,IAAU,EASX,SAASqF,KACZ,MAAO,GAGJ,SAASE,KACZ,MAAO,CACL,WAAczF,GACd,SANK,IAUJ,SAAS8F,GAAYC,GACxB/F,GAAa+F,EAAM/F,WACnBjC,GAAMG,SAAW6H,EAAMvE,SAIpB,SAASuK,KAIZ,MAHI,aAAchO,IACdwI,KAEGxI,GAAMyI,IC7CjB,IAAIzI,GAAQ,GACRiC,GAAa,GAENE,IAAU,EAEd,SAASqG,GAAW7B,GACvBrD,EAAgBtD,GAAMyI,KACtB,IAAIwF,EAAW/I,KACflF,GAAMyI,IAAMpI,EAAAA,GAA2B4N,EAAUtH,EAAKuH,UAC/ClO,GAAMG,SAIV,SAASuG,GAAQC,GACfzB,IAAkB5B,EAAwBrB,GAAY0E,IAGvD6B,GAAW7B,GACX1E,GAAa0E,EACbxE,IAAU,GAJVA,IAAU,EASX,SAASqF,KACZ,MAAO,GAGJ,SAASE,KACZ,MAAO,CACH,WAAczF,GACd,SANG,IAUJ,SAAS8F,GAAYC,GACxB/F,GAAa+F,EAAM/F,WACnBjC,GAAMG,SAAW6H,EAAMvE,SAIpB,SAAS0K,KAIZ,MAHI,aAAcnO,IACdwI,GAAWvG,IAERjC,GAAMyI,IC7CjB,IAAIzI,GAAQ,GACRiC,GAAa,GAENE,IAAU,EAErB,SAASqG,GAAW7B,GAChBrD,EAAgBtD,GAAMyI,KACtB,IAAI2F,EAAMC,KACVrO,GAAMyI,IAAMpI,EAAAA,GAAoB+N,EAAK,CAAEE,OAAQ3H,EAAK2H,gBAC7CtO,GAAMG,SAIV,SAASuG,GAAQC,GACf0H,IAAsB/K,EAAwBrB,GAAY0E,IAG3D6B,GAAW7B,GACX1E,GAAa0E,EACbxE,IAAU,GAJVA,IAAU,EASX,SAASqF,KACZ,MAAO,GAGJ,SAASE,KACZ,MAAO,CACH,WAAczF,GACd,SANG,IAUJ,SAAS8F,GAAYC,GACxB/F,GAAa+F,EAAM/F,WACnBjC,GAAMG,SAAW6H,EAAMvE,SAIpB,SAAS8K,KAIZ,MAHI,aAAcvO,IACdwI,GAAWvG,IAERjC,GAAMyI,IC7CjB,IAAIzI,GAAQ,GACRiC,GAAa,GAENE,IAAU,EAEd,SAASqM,KACZ,GAAI,aAAcxO,GACd,OAAOA,GAAMG,SAASsO,SAEtB,IAAI/D,EAAM1K,GAAMyI,IAAIiG,WAAW,CAAE5L,MAAM,IACvC,OAAO,IAAIzC,EAAAA,GAAqBqK,EAAIzH,OAAQyH,EAAII,YAIjD,SAASpE,GAAQC,GACpB,GAAKgI,IAAkBrL,EAAwBrB,GAAY0E,GAEpD,CACHrD,EAAgBtD,GAAMyI,KACtB,IAAImG,EAAID,KACR3O,GAAMyI,IAAMpI,EAAAA,GAAsBuO,EAAG,CAAEC,WAAYlI,EAAKkI,aAExD5M,GAAa0E,EACbxE,IAAU,EACVmB,EAAmBtD,SARnBmC,IAAU,EAaX,SAASqF,KAEZ,MAAO,CAAE,SADMgH,KACezL,SAG3B,SAAS2E,KACZ,MAAO,CACL,WAAczF,GACd,SAAYuF,MAIX,SAASO,GAAYC,GACxB/F,GAAa+F,EAAM/F,WAEnBqB,EAAmBtD,IACnBA,GAAMG,SAAW6H,EAAMvE,SAEvB,IAAIsH,EAAM,IAAI1K,EAAAA,GAAqBL,GAAMG,SAASsO,SAASxL,QAC3D8H,EAAIJ,IAAI3K,GAAMG,SAASsO,UACvBzO,GAAMG,SAASsO,SAAW1D,ECjD9B,IAAI/K,GAAQ,GACRiC,GAAa,GAENE,IAAU,EAGd,SAASuE,GAAQC,GACpBxE,IAAU,EAELmB,EAAwBrB,GAAY0E,IAClB,aAAfA,EAAKmI,QAA0BC,KAC/B5M,IAAU,GAIdA,YACOnC,GAAMG,SACb8B,GAAa0E,EACbxE,IAAU,GAMX,SAASqF,KACZ,MAAO,GAGJ,SAASE,KACZ,MAAO,CACH,WAAczF,GACd,SANG,IAUJ,SAAS8F,GAAYC,GACxB/F,GAAa+F,EAAM/F,WACnBjC,GAAMG,SAAW6H,EAAMvE,SAKpB,SAAS+K,KAEZ,OAAOO,KC5CJ,SAASC,GAAiBd,GAC7B,IAAID,EAAW/I,KAEXP,EAAS,CAAE,QAAWsJ,EAASH,iBAC/BtG,EAAU,KAAMyH,EAAO,KAAMC,EAAO,KAAMC,EAAO,KACrD,IACI3H,EAAUnH,EAAAA,GAA2B4N,EAAUC,GAE/Ce,EAAO,IAAI5O,EAAAA,GAAqBmH,EAAQsG,iBACxCoB,EAAO,IAAI7O,EAAAA,GAAqBmH,EAAQtG,QACxCiO,EAAO,IAAI9O,EAAAA,GAAuBmH,EAAQtG,QAE1CsG,EAAQE,UAAU,CAAE0H,KAAMH,EAAMI,QAASH,EAAMI,UAAWH,IAC1DxK,EAAM,KAAW6C,EAAQtG,OACzByD,EAAM,KAAWsK,EAAKtM,QAAQI,QAC9B4B,EAAM,QAAcuK,EAAKvM,QAAQI,QACjC4B,EAAM,UAAgBwK,EAAKxM,QAAQI,QAXvC,QAcoB,OAAZyE,GACAA,EAAQ1H,OAEC,OAATmP,GACAA,EAAKnP,OAEI,OAAToP,GACAA,EAAKpP,OAEI,OAATqP,GACAA,EAAKrP,OAIb,OAAO6E,EAGJ,SAAS4K,GAASC,EAAQC,EAASzP,GAA4B,IAArB0P,EAAoB,uDAAJ,GACzD1M,EAAIhD,EAAM2P,QACVC,EAAI,IAAIC,SAAQ,SAACC,EAASC,GAC1B/P,EAAMgQ,SAAShN,GAAK,CAAE,QAAW8M,EAAS,OAAUC,MAKxD,OAHA/P,EAAM2P,UACNF,EAAQ7J,GAAK5C,EACbwM,EAAOS,YAAYR,EAASC,GACrBE,EAGJ,SAASM,GAAiBV,EAAQxP,GAwBrC,OAvBAwP,EAAOW,UAAY,SAAUC,GACzB,IAAIjP,EAAOiP,EAAI9G,KAAKnI,KACpB,GAAIA,EAAKkP,SAAS,SACdJ,YAAY,CACR,KAAQ9O,EACR,KAAQ,CACJ,EAAKiP,EAAI9G,KAAK/I,EACd,EAAK6P,EAAI9G,KAAK9I,EACd,UAAa4P,EAAI9G,KAAKgH,YAE3B,CAACF,EAAI9G,KAAK/I,EAAEwB,OAAQqO,EAAI9G,KAAK9I,EAAEuB,aARtC,CAYA,IAAI6D,EAAKwK,EAAI9G,KAAK1D,GACd2K,EAAMvQ,EAAMgQ,SAASpK,GACb,SAARzE,EACAoP,EAAIR,OAAOK,EAAI9G,KAAKkH,OAEpBD,EAAIT,QAAQM,EAAI9G,KAAKA,aAElBtJ,EAAMgQ,SAASpK,KAEnB2J,GAASC,EAAQ,CAAE,IAAO,QAAUxP,GAGxC,SAASyQ,GAAiBjB,EAAQ7I,EAAM+J,EAAQ1Q,GACnD,IAAI2Q,EAAU,CACV,IAAO,MACP,OAAUhK,GAGV+I,EAAgB,GAMpB,OALe,OAAXgB,IACAC,EAAQtC,UAAYqC,EACpBpN,EAAqBoN,EAAQhB,IAG1BH,GAASC,EAAQmB,EAAS3Q,EAAO0P,GAGrC,SAASkB,GAAoBpB,EAAQxP,GACxC,GAAI,aAAcA,EAAO,CAGrB,IAAI8C,GAAI,UAAQ9C,EAAMG,UAGtB,OAFA2C,EAAKvC,EAAIuC,EAAKvC,EAAEwC,QAChBD,EAAKtC,EAAIsC,EAAKtC,EAAEuC,QACT,IAAI8M,SAAQ,SAAAC,GAAO,OAAIA,EAAQhN,MAEtC,OAAO9C,EAAM6Q,IAAIC,MAAK,SAAAvQ,GAAC,OAAIgP,GAASC,EAAQ,CAAE,IAAO,SAAWxP,MCjGxE,IAAIA,GAAQ,CAAE,QAAW,EAAG,SAAY,IACpCiC,GAAa,GACbuN,GAAS,KAEN,SAASuB,KAEZ,OAAOC,GADPxB,GAAS,IAAIyB,OAAO,IAAIC,IAAI,kBAAsC,CAAE/P,UAAM,IACjCnB,IAGtC,IAAImC,IAAU,EAErB,SAASgP,GAAKxK,EAAMyK,GAChB,IAAIV,EAAS,KACTU,IAEAV,EAASM,GADD3Q,EAAAA,GAA4BsG,EAAK0K,cAS7CrR,GAAM6Q,IAAMG,GAA0BxB,GAAQ7I,EAAM+J,EAAQ1Q,IAIzD,SAAS0G,GAAQC,GACfzB,IAAkB5B,EAAwBrB,GAAY0E,IAM3DwK,GAAKxK,EADYzB,IAAiB5B,EAAwBrB,GAAWoP,WAAY1K,EAAK0K,aAGtFpP,GAAa0E,SACN3G,GAAMG,SACbgC,IAAU,GATNA,IAAU,EAaX,SAASqF,KACZ,OAAOwJ,GAA6BxB,GAAQxP,IAGzC,SAAe0H,KAAtB,8CAAO,OAAP,qBAAO,oGACkBsJ,GAA6BxB,GAAQxP,IADvD,cACCyD,EADD,yBAEI,CACH,WAAcxB,GACd,SAAYwB,IAJb,kEAQA,SAASsE,GAAYC,GACxB/F,GAAa+F,EAAM/F,WACnBjC,GAAMG,SAAW6H,EAAMvE,SAIpB,SAAS6N,KACZ,GAAI,aAActR,GAAO,CACrB,IAAIuR,GAAU,UAAQtP,IAMtB,OALAsP,EAAWD,SAAU,EACrBH,GAAKI,GAAY,UACVvR,GAAMG,SAGNH,GAAM6Q,IACRC,MAAK,SAAArN,GACF,MAAO,CACH,KAAQ,aACR,KAAQ,CAAE,OAAU,eAIhC,OAAOuN,GAAkBxB,GAAQ,CAAE,IAAO,SAAWxP,IC7E7D,IAAIA,GAAQ,CAAE,QAAW,EAAG,SAAY,IACpCiC,GAAa,GACbuN,GAAS,KAEN,SAASuB,KACZvB,GAAS,IAAIyB,OAAO,IAAIC,IAAI,kBAAsC,CAAE/P,UAAM,IAC1EnB,GAAMwR,YAAcR,GAA0BxB,GAAQxP,IAGnD,IAAImC,IAAU,EAErB,SAASgP,GAAKxK,EAAMyK,GAChB,IAAIV,EAAS,KACTU,IACAV,EAASM,GAA0BrK,EAAK8K,gBAQ5CzR,GAAM6Q,IAAMG,GAA0BxB,GAAQ7I,EAAM+J,EAAQ1Q,IAIzD,SAAS0G,GAAQC,GACfzB,IAAkB5B,EAAwBrB,GAAY0E,IAM3DwK,GAAKxK,EADYzB,IAAiB5B,EAAwBrB,GAAWwP,cAAe9K,EAAK8K,gBAGzFxP,GAAa0E,SACN3G,GAAMG,SACbgC,IAAU,GATNA,IAAU,EAYX,SAASqF,KACZ,OAAOwJ,GAA6BxB,GAAQxP,IAGzC,SAAe0H,KAAtB,8CAAO,OAAP,qBAAO,oGACkBsJ,GAA6BxB,GAAQxP,IADvD,cACCyD,EADD,yBAEI,CACH,WAAcxB,GACd,SAAYwB,IAJb,kEAQA,SAASsE,GAAYC,GACxB/F,GAAa+F,EAAM/F,WACnBjC,GAAMG,SAAW6H,EAAMvE,SAIpB,SAAS6N,KACZ,GAAI,aAActR,GAAO,CACrB,IAAIuR,GAAU,UAAQtP,IAMtB,OALAsP,EAAWD,SAAU,EACrBH,GAAKI,GAAY,UACVvR,GAAMG,SAGNH,GAAM6Q,IACRC,MAAK,SAAArN,GACF,MAAO,CACH,KAAQ,aACR,KAAQ,CAAE,OAAU,eAIhC,OAAOuN,GAAkBxB,GAAQ,CAAE,IAAO,SAAWxP,IC9EtD,SAAS0R,GAAoBtH,EAAKuH,GACrC,MAAO,CACH,MAASvH,EAAI4B,MAAM2F,GACnB,SAAYvH,EAAIX,SAASkI,GACzB,IAAO,CACH,IAAOvH,EAAIwH,IAAID,EAAO,CAAEE,QAAS,IACjC,KAAQzH,EAAIwH,IAAID,EAAO,CAAEE,QAAS,IAClC,WAAYzH,EAAIwH,IAAID,EAAO,CAAEE,QAAS,KAE1C,eAAkB,CACd,IAAOzH,EAAI0H,cAAcH,EAAO,CAAEE,QAAS,IAC3C,KAAQzH,EAAI0H,cAAcH,EAAO,CAAEE,QAAS,IAC5C,WAAYzH,EAAI0H,cAAcH,EAAO,CAAEE,QAAS,KAEpD,MAAS,CACL,IAAOzH,EAAI2H,MAAMJ,EAAO,CAAEE,QAAS,IACnC,KAAQzH,EAAI2H,MAAMJ,EAAO,CAAEE,QAAS,IACpC,WAAYzH,EAAI2H,MAAMJ,EAAO,CAAEE,QAAS,KAE5C,IAAO,CACH,IAAOzH,EAAI4H,IAAIL,EAAO,CAAEE,QAAS,IACjC,KAAQzH,EAAI4H,IAAIL,EAAO,CAAEE,QAAS,IAClC,WAAYzH,EAAI4H,IAAIL,EAAO,CAAEE,QAAS,MAU3C,SAASI,GAAkBzK,EAASrH,EAAU+R,EAAWP,GACvDO,QAA2BrS,IAAdqS,IACdA,EAAY,kBAEhB,IAEIC,EAIIC,EANJC,OAA6BxS,IAAbM,EAOZmS,GAAa,EAEjB,GAAID,EAAc,CACd,IAQIE,EARAV,EAAU,OASd,GARIK,EAAU9M,MAAM,SAChByM,EAAU,MACHK,EAAU9M,MAAM,gBACvBkN,GAAa,EACbT,EAAU,YAIVK,EAAU9M,MAAM,WAChBmN,EAAS,aACN,GAAIL,EAAU9M,MAAM,SACvBmN,EAAS,WACN,GAAIL,EAAU9M,MAAM,SACvBmN,EAAS,UACN,KAAIL,EAAU9M,MAAM,aAGvB,KAAM,sBAAwB8M,EAAY,IAF1CK,EAAS,iBAKbH,EAAUjS,EAASwR,GAAOY,GAAQV,OAC/B,CACH,IAAI3M,EAAQ,EAQZ,GAPIgN,EAAU9M,MAAM,SAChBF,EAAQ,EACDgN,EAAU9M,MAAM,gBACvBkN,GAAa,EACbpN,EAAQ,GAGRgN,EAAU9M,MAAM,WAChBgN,EAAU5K,EAAQuK,MAAMJ,EAAO,CAAEE,QAAS3M,EAAOpC,MAAM,SACpD,GAAIoP,EAAU9M,MAAM,SACvBgN,EAAU5K,EAAQwK,IAAIL,EAAO,CAAEE,QAAS3M,EAAOpC,MAAM,SAClD,GAAIoP,EAAU9M,MAAM,SACvBgN,EAAU5K,EAAQoK,IAAID,EAAO,CAAEE,QAAS3M,EAAOpC,MAAM,QAClD,KAAIoP,EAAU9M,MAAM,aAGvB,KAAM,sBAAwB8M,EAAY,IAF1CE,EAAU5K,EAAQsK,cAAcH,EAAO,CAAEE,QAAS3M,EAAOpC,MAAM,KAOvEqP,EAAW,IAAIK,WAAWJ,EAAQnP,QAClC,IAAK,IAAID,EAAI,EAAGA,EAAImP,EAASlP,OAAQD,IACjCmP,EAASnP,GAAKA,EAEdsP,EACAH,EAASpG,MAAK,SAACrH,EAAG+N,GAAJ,OAAWL,EAAQ1N,GAAK0N,EAAQK,MAE9CN,EAASpG,MAAK,SAACrH,EAAG+N,GAAJ,OAAWL,EAAQK,GAAKL,EAAQ1N,MAKtD,IAQIgO,EAAeC,EAAWC,EAAUC,EARpCC,EAAU,SAAS7I,GAEnB,IADA,IAAI8I,EAAQ,IAAIC,aAAa/I,EAAMhH,QAC1BD,EAAI,EAAGA,EAAImP,EAASlP,OAAQD,IACjC+P,EAAM/P,GAAKiH,EAAMkI,EAASnP,IAE9B,OAAO+P,GAIX,GAAIV,EAAc,CACd,IAAIhN,EAAUlF,EAASwR,GACvBgB,EAAYG,EAAQzN,EAAQ2G,OAC5B0G,EAAgBI,EAAQzN,EAAQoE,UAChCmJ,EAAWE,EAAQzN,EAAQuM,IAAR,MACnBiB,EAAeC,EAAQzN,EAAQ4N,eAAR,WAEvBP,EAAgBI,EAAQtL,EAAQiC,SAASkI,EAAO,CAAE7O,MAAM,KACxD6P,EAAYG,EAAQtL,EAAQwE,MAAM2F,EAAO,CAAE7O,MAAM,KACjD8P,EAAWE,EAAQtL,EAAQoK,IAAID,EAAO,CAAEE,QAAS,EAAG/O,MAAM,KAC1D+P,EAAeC,EAAQtL,EAAQsK,cAAcH,EAAO,CAAEE,QAAS,EAAG/O,MAAM,KAG5E,MAAO,CACH,SAAYqP,EACZ,MAASQ,EACT,SAAYD,EACZ,IAAOE,EACP,eAAkBC,GC5H1B,IAAI7S,GAAQ,GACRiC,GAAa,GAENE,IAAU,EAEd,SAASuE,GAAQC,GACpB,GAAKgF,IAA0BuH,IAAmB5P,EAAwBrB,GAAY0E,GAE/E,CACHrD,EAAgBtD,GAAMyI,KACtB,IAAIjD,EAAMmG,KACN8C,EAAWyE,KAEflT,GAAMyI,IAAMpI,EAAAA,GAAmBmF,EAAKiJ,GAEpCxM,GAAa0E,SACN3G,GAAMG,SACbgC,IAAU,OAVVA,IAAU,EAeX,SAASqF,KACZ,MAAO,GAGJ,SAASE,KAEZ,GAAI,aAAc1H,GACdyD,EAAWzD,GAAMG,cAIjB,IAFA,IAAIsD,EAAW,GACX0P,EAAMnT,GAAMyI,IAAI2K,iBACXpQ,EAAI,EAAGA,EAAImQ,EAAKnQ,IACrBS,EAASzB,KAAKqR,GAA4BrT,GAAMyI,IAAKzF,IAG7D,MAAO,CACH,WAAcf,GACd,SAAYwB,GAIb,SAASsE,GAAYC,GACxB/F,GAAa+F,EAAM/F,WACnBjC,GAAMG,SAAW6H,EAAMvE,SAIpB,SAASwO,GAAkBC,EAAWP,GACzC,OAAO0B,GAA0BrT,GAAMyI,IAAKzI,GAAMG,SAAU+R,EAAWP,GClD3E,ICNI2B,GDMAtT,GAAQ,CAAE,QAAW,IACrBiC,GAAa,CAAE,WAAc,IAEtBE,IAAU,EAEd,SAASuE,GAAQC,GAIpB,GAAInD,GAAgB,CAChBvB,GAAWsR,WAAa,GACxB,cAAyBtT,OAAOC,QAAQF,GAAMwH,SAA9C,eAAwD,CAAnD,2BACDlE,EADC,KACmBmF,KAExBzI,GAAMwH,QAAU,GASpBrF,IAAU,EAIP,SAASqF,KACZ,MAAO,GAGJ,SAASE,KAGZ,IAFA,IAAIF,EAAU,GAEd,MAAyBvH,OAAOC,QAAQF,GAAMwH,SAA9C,eAAwD,CAAnD,sBAAO5E,EAAP,KAAYC,EAAZ,KAEG2E,EAAQ5E,GADR,aAAcC,EACCA,EAAI1C,SAEJkT,GAA4BxQ,EAAI4F,IAAK,GAI5D,MAAO,CACH,WAAcxG,GACd,SAAY,CAAE,QAAWuF,IAI1B,SAASO,GAAYC,GACxB/F,GAAa+F,EAAM/F,WACnB,cAAyBhC,OAAOC,QAAQ8H,EAAMvE,UAA9C,eAAyD,CAApD,sBAAOb,EAAP,KAAYC,EAAZ,KACD7C,GAAMwH,QAAQ5E,GAAO,CAAE,SAAYC,IAKpC,SAAS2Q,GAAa5N,EAAI6N,GAC7B,IAAIjO,EAAMmG,KAEN5J,EAASuB,EAA0BkC,EAAIoC,kBAAmB,aAAc5H,IAC5E+B,EAAO6G,KAAK,GACZ,IAAI8B,EAAM3I,EAAOY,QACjB8Q,EAAUzS,SAAQ,SAAAiM,GAAavC,EAAIuC,GAAW,KAG9C,IAAImB,EAAM/N,EAAAA,GAAmBmF,EAAKzD,GAG9B6D,KAAM5F,GAAMwH,UACZlE,EAAgBtD,GAAMwH,QAAQ5B,GAAI6C,YAC3BzI,GAAMwH,QAAQ5B,IAGzB5F,GAAMwH,QAAQ5B,GAAM,CAAE,IAAOwI,GAC7BnM,GAAWsR,WAAW3N,GAAM6N,EAGzB,SAASC,GAAgB9N,GAC5BtC,EAAgBtD,GAAMwH,QAAQ5B,GAAI6C,YAC3BzI,GAAMwH,QAAQ5B,UACd3D,GAAWsR,WAAW3N,GAG1B,SAASyD,GAAazD,EAAIsM,GAC7B,IAAI7M,EAAUrF,GAAMwH,QAAQ5B,GAC5B,OAAOyN,GAA0BhO,EAAQoD,IAAKpD,EAAQlF,SAAU+R,EAAW,GC1F/E,IAAIyB,GAAO,KA4CX,SAASC,GAAmB9D,GAAwB,IAAfpO,EAAc,uDAAN,KAC3B,OAAVA,IACAA,EAAQ4R,GAAOO,OACVC,YAAY,CAAC,iBAAkB,YAC/BC,YAAY,kBAGrB,IAAIC,EAActS,EAAMuS,SAExBD,EAAYE,UAAY,WACpB,IAAIC,EAAOH,EAAYH,OACvBM,EAAKnT,SAAQ,SAAAT,UAAcA,EAAE8C,SAC7ByM,EAAQqE,IAEZH,EAAYI,QAAU,WAClBtE,EAAQ,OAIQ,SACTuE,GAAY,EAAZA,GAAAA,OAAAA,GAAAA,MAAAA,KAAAA,WAAAA,SAAAA,KAAf,OAAeA,IAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA2BzO,EAAIlE,GAA/B,0FACW,IAAImO,SAAQ,SAAAC,GACf,IAAIwE,EAAU5S,EAAMqD,IAAIa,GACxB0O,EAAQJ,UAAY,gBACOrU,IAAnByU,EAAQT,OACR/D,EAAQwE,EAAQT,QAEhB/D,EAAQ,OAGhBwE,EAAQF,QAAU,WACdtE,EAAQ,WAXpB,kEAgBA,SAASyE,GAAMvE,GACX,OAAOH,QAAQ2E,WAAWxE,GACrBc,MAAK,SAAAqD,GAAS,IAAD,YACMA,GADN,IACV,2BAAsB,CAClB,IADkB,QAEd,OAAO,GAHL,8BAMV,OAAO,KAIZ,SAAeM,KAAtB,gCAOiC,SAAjC,KAPO,OAOP,qBAPO,8FACGd,GADH,gCAEI,IAAI9D,SAAQ,SAAAC,GACf8D,GAAmB9D,OAHpB,kEAQA,SAAe4E,GAAtB,mDAAO,OAAP,qBAAO,WAAwB9O,EAAI7D,GAA5B,mGACG4R,GADH,cAECgB,EAAQrB,GAAOO,OAAOC,YAAY,CAAC,OAAQ,aAAc,aACzDc,EAAaD,EAAMZ,YAAY,QAC/Bc,EAAaF,EAAMZ,YAAY,aAJhC,SAMcM,GAAYzO,EAAIiP,GAN9B,cAMCC,EAND,OASCC,EADS,OAATD,EACW,EAEAA,EAAI,MAEnBC,IAEIC,EAAc,IAAInF,SAAQ,SAAAC,GAC1B,IAAImF,EAAaL,EAAWM,IAAI,CAAE,GAAMtP,EAAI,QAAW7D,IACvDkT,EAAWf,UAAY,SAAUiB,GAC7BrF,GAAQ,IAEZmF,EAAWb,QAAU,SAAUe,GAC3BrF,GAAQ,OAIZsF,EAAa,IAAIvF,SAAQ,SAAAC,GACzBgF,EAAKO,MAAQN,EACb,IAAIE,EAAaJ,EAAWK,IAAIJ,GAChCG,EAAWf,UAAY,SAAUiB,GAC7BrF,GAAQ,IAEZmF,EAAWb,QAAU,SAAUe,GAC3BrF,GAAQ,OAhCb,kBAoCIyE,GAAM,CAACS,EAAaI,KApCxB,mEAuCA,SAAeE,GAAtB,uDAAO,OAAP,qBAAO,WAA4B1P,EAAI2P,EAAOlS,EAAOmS,GAA9C,iGACG7B,GADH,UAECgB,EAAQrB,GAAOO,OAAOC,YAAY,CAAC,WAAY,iBAAkB,aACjE2B,EAAiBd,EAAMZ,YAAY,YACnCc,EAAaF,EAAMZ,YAAY,iBAEzB,MAANnO,EAND,iCAOqB,IAAIiK,SAAQ,SAAAC,GAAO,OAAI8D,GAAmB9D,EAAS+E,MAPxE,OAOKa,EAPL,OAQC9P,EAAK+P,OAAOD,EAAQzS,QARrB,eAWC+R,EAAc,IAAInF,SAAQ,SAAAC,GAC1B,IAAImF,EAAaQ,EAAeP,IAAI,CAAE,GAAMtP,EAAI,QAAW2P,IAC3DN,EAAWf,UAAY,SAAUiB,GAC7BrF,GAAQ,IAEZmF,EAAWb,QAAU,SAAUe,GAC3BrF,GAAQ,OAIZ8F,EAAY,IAAI/F,SAAQ,SAAAC,GACxB,IAAImF,EAAaJ,EAAWK,IAAI,CAAE,GAAMtP,EAAI,MAASvC,EAAO,KAAQwS,OAAO,IAAIC,MAAS,MAASN,IACjGP,EAAWf,UAAY,SAAUiB,GAC7BrF,GAAQ,IAEZmF,EAAWb,QAAU,SAAUe,GAC3BrF,GAAQ,OA3Bb,UA+BOyE,GAAM,CAACS,EAAaY,IA/B3B,6DAgCQhQ,GAhCR,iCAkCQ,MAlCR,mEAuCA,SAAemQ,GAAtB,iDAAO,OAAP,qBAAO,WAAwBnQ,GAAxB,yFACG+N,GADH,cAECiB,EAAatB,GAAOO,OACnBC,YAAY,CAAC,QAAS,YACtBC,YAAY,QAJd,SAMcM,GAAYzO,EAAIgP,GAN9B,cAMCE,EAND,yBAOIA,EAAI,SAPR,kEAmB0B,SAAjC,KATO,OASP,qBATO,WAA4BlP,GAA5B,yFACG+N,GADH,cAEC8B,EAAiBnC,GAAOO,OACvBC,YAAY,CAAC,YAAa,YAC1BC,YAAY,YAJd,SAKcM,GAAYzO,EAAI6P,GAL9B,cAKCX,EALD,yBAMIA,EAAI,SANR,kEAUA,SAAekB,GAAtB,iDAAO,OAAP,qBAAO,WAA0BpQ,GAA1B,iGACG+N,GADH,cAECgB,EAAQrB,GAAOO,OAAOC,YAAY,CAAC,OAAQ,aAAc,aACzDc,EAAaD,EAAMZ,YAAY,QAC/Bc,EAAaF,EAAMZ,YAAY,aAJhC,SAMcM,GAAYzO,EAAIiP,GAN9B,cAMCC,EAND,OAOCC,EAAWD,EAAI,MACnBC,IACI/E,EAAW,GAEC,GAAZ+E,GACA/E,EAAShO,KAAK,IAAI6N,SAAQ,SAAAC,GACtB,IAAIwE,EAAUM,EAAWqB,OAAOrQ,GAChC0O,EAAQF,QAAU,SAAUe,GACxBrF,GAAQ,IAEZwE,EAAQJ,UAAY,SAAUiB,GAC1BrF,GAAQ,QAGhBE,EAAShO,KAAK,IAAI6N,SAAQ,SAAAC,GACtB,IAAIwE,EAAUO,EAAWqB,OAAOtQ,GAChC0O,EAAQF,QAAU,SAAUe,GACxBrF,GAAQ,IAEZwE,EAAQJ,UAAY,SAAUiB,GAC1BrF,GAAQ,SAIhBE,EAAShO,KAAK,IAAI6N,SAAQ,SAAAC,GACtBgF,EAAKO,MAAQN,EACb,IAAIT,EAAUO,EAAWK,IAAIJ,GAC7BR,EAAQJ,UAAY,SAAUiB,GAC1BrF,GAAQ,IAEZwE,EAAQF,QAAU,SAAUe,GACxBrF,GAAQ,QAtCjB,kBA2CIyE,GAAMvE,IA3CV,mEA8CP,cAAO,OAAP,qBAAO,WAA8BpK,GAA9B,qGACG+N,GADH,cAECgB,EAAQrB,GAAOO,OAAOC,YAAY,CAAC,WAAY,iBAAkB,aACjE2B,EAAiBd,EAAMZ,YAAY,YACnCc,EAAaF,EAAMZ,YAAY,kBAE/B/D,EAAW,IAENhO,KAAK,IAAI6N,SAAQ,SAAAC,GACtB,IAAIwE,EAAUmB,EAAeS,OAAOtQ,GACpC0O,EAAQJ,UAAY,SAAUiB,GAC1BrF,GAAQ,IAEZwE,EAAQF,QAAU,SAAUe,GACxBrF,GAAQ,QAdb,SAmBcuE,GAAYzO,EAAIiP,GAnB9B,OAmBCC,EAnBD,iBAoBaA,EAAI,OApBjB,IAoBH,2BAAWpQ,EAAoB,QAC3BsL,EAAShO,KAAKgU,GAAWtR,IArB1B,qCAwBHsL,EAAShO,KAAK,IAAI6N,SAAQ,SAAAC,GACtB,IAAIwE,EAAUO,EAAWqB,OAAOtQ,GAChC0O,EAAQJ,UAAY,SAAUiB,GAC1BrF,GAAQ,IAEZwE,EAAQF,QAAU,SAAUe,GACxBrF,GAAQ,QA9Bb,kBAkCIyE,GAAMvE,IAlCV,mE,ICiJHmG,G,WC7XJ,SAASC,GAAqBxW,GAC1B,GAAI+B,MAAMC,QAAQhC,GACd,IAAK,IAAIoD,EAAI,EAAGA,EAAIpD,EAAOqD,OAAQD,IAC/BpD,EAAOoD,GAAKoT,GAAqBxW,EAAOoD,SAEzC,GAAInB,YAAYC,OAAOlC,GAC1BA,EAAS,CACL,kBAAqBA,EAAO2B,YAAYH,KACxC,mBAAsBO,MAAM0U,KAAKzW,SAElC,GAAIA,aAAkBK,OAGzB,cAA6BA,OAAOC,QAAQN,GAA5C,eAAqD,CAAhD,sBAAOgD,EAAP,KAAYqK,EAAZ,KACDrN,EAAOgD,GAAOwT,GAAqBnJ,GAG3C,OAAOrN,EAGX,SAAS0W,GAAmB1W,GACxB,GAAI+B,MAAMC,QAAQhC,GACd,IAAK,IAAIoD,EAAI,EAAGA,EAAIpD,EAAOqD,OAAQD,IAC/BpD,EAAOoD,GAAKsT,GAAmB1W,EAAOoD,SAEvC,GAAIpD,aAAkBK,OACzB,GAAI,sBAAuBL,EAAQ,CAC/B,IAAI2W,EAAM3W,EAAO,CAAC,sBACduU,EAAOvU,EAAO,CAAC,uBACnB,OAAQ2W,GACJ,IAAK,aAML,IAAK,aACD3W,EAAS,IAAI8D,WAAWyQ,EAAKlR,QAC7B,MALJ,IAAK,YACDrD,EAAS,IAAI4W,UAAUrC,EAAKlR,QAC5B,MAIJ,IAAK,cACDrD,EAAS,IAAI6W,YAAYtC,EAAKlR,QAC9B,MACJ,IAAK,aACDrD,EAAS,IAAI8W,WAAWvC,EAAKlR,QAC7B,MACJ,IAAK,cACDrD,EAAS,IAAI+W,YAAYxC,EAAKlR,QAC9B,MACJ,IAAK,aACDrD,EAAS,IAAI4S,WAAW2B,EAAKlR,QAC7B,MACJ,IAAK,cACDrD,EAAS,IAAIgX,YAAYzC,EAAKlR,QAC9B,MACJ,IAAK,aACDrD,EAAS,IAAIiX,WAAW1C,EAAKlR,QAC7B,MACJ,IAAK,eACDrD,EAAS,IAAIkX,aAAa3C,EAAKlR,QAC/B,MACJ,IAAK,eACDrD,EAAS,IAAIoT,aAAamB,EAAKlR,QAC/B,MACJ,QACI,KAAM,kCAAoCsT,EAElD3W,EAAO+K,IAAIwJ,QAEX,cAA6BlU,OAAOC,QAAQN,GAA5C,eAAqD,CAAhD,sBAAOgD,EAAP,KAAYqK,EAAZ,KACDrN,EAAOgD,GAAO0T,GAAmBrJ,GAI7C,OAAOrN,EAGX,SAASmX,GAAeC,GAOpB,IAHA,IAAIrS,EAAS,IAAIjB,WAAW,GAExBV,EAAI,EACDgU,EAAS,GACZrS,EAAO3B,GAAKgU,EAAS,IACrBA,EAASC,KAAKC,MAAMF,EAAS,KAC7BhU,IAGJ,OAAO2B,EAGX,SAASwS,GAAepV,GACpB,IAD4B,EACxB4C,EAAS,EACTyS,EAAa,EAFW,UAGZrV,GAHY,IAG5B,2BAAwB,CACpB4C,GAAUyS,EADU,QAEpBA,GAAc,KALU,8BAO5B,OAAOzS,EAGJ,SAAe0S,GAAtB,iDAAO,OAAP,qBAAO,WAAoB5T,GAApB,gIAA8B6T,EAA9B,+BAAqC,OAEpCC,EAAW9T,EAASkF,OAAO1G,WAAWoB,MACtCmU,EAAc,GACdC,EAAY,EAGJ,QAARH,EAPD,gBAQCI,EAlHsB,EAmHtBH,EAASvW,SAAQ,SAACT,EAAGyC,GACjB,IAAIH,EAAMtC,EAAEwB,OACZyV,EAAYxV,KAAKa,GACjB0U,EAASvU,GAAGjB,OAAS,CAAE,OAAU0V,EAAW,KAAQ5U,EAAI8U,YACxDF,GAAa5U,EAAI8U,cAbtB,0BAgBgB,UAARL,EAhBR,iBAmBCI,EA5HuB,EAyGxB,UAoBiBH,GApBjB,kEAoBYhX,EApBZ,kBAqBqBqX,GAAAA,GAAa,IAAIlU,WAAWnD,EAAEwB,SArBnD,eAqBS8V,EArBT,OAsBSjS,EAAKrF,EAAEY,KAAO,IAAMZ,EAAEa,KAAO,IAAMb,EAAEwB,OAAO4V,WAAa,IAAME,EAtBxE,UAuBoBC,GAAiBlS,EAAIrF,EAAEwB,QAvB3C,wCAyBe,wBAA0B6D,EAAK,cAzB9C,QA2BKrF,EAAEwB,OAAS6D,EACX4R,EAAYxV,KAAK4D,GA5BtB,8KAgCO,oBAAsB0R,EAhC7B,WAoCH7T,EAAW2S,GAAqB3S,GAG5BsU,EAAWtX,KAAKC,UAAU+C,GACxBuU,EAAYhU,EAAAA,GAAU+T,GAGxBE,EAAW,IAAIpW,YAAY,GAAKmW,EAAU/U,OAASwU,GACnDS,EAAe,IAAIxU,WAAWuU,GAC9BE,EAAS,EAETvR,EAASmQ,GAAeW,GAC5BQ,EAAavN,IAAI/D,EAAQuR,GACzBA,GAAUvR,EAAO3D,OAEbmV,EAAUrB,GA3JK,GA4JnBmB,EAAavN,IAAIyN,EAASD,GAC1BA,GAAUC,EAAQnV,OAEdoV,EAAWtB,GAAeiB,EAAU/U,QACxCiV,EAAavN,IAAI0N,EAAUF,GAGb,KAFdA,GAAUE,EAASpV,QAzDhB,sBA4DO,qDA5DP,WA+DHiV,EAAavN,IAAIqN,EAAWG,GAC5BA,GAAUH,EAAU/U,OAER,QAARqU,EAlED,2BAmEmBE,GAnEnB,IAmEC,2BAAWlV,EAAoB,QACrBoI,EAAM,IAAIhH,WAAWpB,GAC3B4V,EAAavN,IAAID,EAAKyN,GACtBA,GAAUzN,EAAIzH,OAtEnB,uDAwEQgV,GAxER,WA0EgB,UAARX,EA1ER,0CA2EQ,CAAE,SAAYE,EAAa,MAASS,IA3E5C,aA8EO,oBAAsBX,EA9E7B,0FAkFA,SAAegB,GAAtB,iDAAO,OAAP,qBAAO,WAAoBvW,GAApB,sFACCoW,EAAS,EACTvR,EAASuQ,GAAe,IAAIzT,WAAW3B,EAAQoW,EAAQ,IAC3DA,GAAU,EAEIhB,GAAe,IAAIzT,WAAW3B,EAAQoW,EAAQ,IAC5DA,GAAU,EAENE,EAAWlB,GAAe,IAAIzT,WAAW3B,EAAQoW,EAAQ,IAC7DA,GAAU,EAEN1U,EAAWO,EAAAA,GAAY,IAAIN,WAAW3B,EAAQoW,EAAQE,GAAW,CAAE,GAAM,WAE7E5U,EAAW6S,GADX7S,EAAWhD,KAAK8X,MAAM9U,IAEtB0U,GAAUE,EAENd,EAAW9T,EAASkF,OAAO1G,WAAWoB,MA5MhB,GA6MtBuD,EAjBD,iBAkBC2Q,EAASvW,SAAQ,SAACT,EAAGyC,GACjB,IAAIwV,EAAUjY,EAAEwB,OACZ0W,EAAS,IAAI/U,WAAW3B,EAAQoW,EAASK,EAAQL,OAAQK,EAAQtX,MACjEwJ,EAAM,IAAI7I,YAAY2W,EAAQtX,MACjC,IAAIwC,WAAWgH,GAAMC,IAAI8N,GAC1BlB,EAASvU,GAAGjB,OAAS2I,KAvB1B,2BA3LwB,GAqNhB9D,EA1BR,wBA2BK8R,EAAY,GAChBnB,EAASvW,SAAQ,SAACT,EAAGyC,GACjB,IAAI4C,EAAKrF,EAAEwB,OACX2W,EAAU1W,KAAK8V,GAAiBlS,OA9BrC,UAiCsBiK,QAAQ8I,IAAID,GAjClC,QAiCKE,EAjCL,OAkCCrB,EAASvW,SAAQ,SAACT,EAAGyC,GACjB,GAAoB,OAAhB4V,EAAS5V,GACT,KAAM,sCAAwCzC,EAAEwB,OAAS,IAE7DxB,EAAEwB,OAAS6W,EAAS5V,MAtCzB,6BA0CO,0BA1CP,iCA6CIS,GA7CJ,mED1KP,SAASoV,GAAaC,EAAMC,EAAMC,GAC9B,IAAIC,EAAe,GACnB3V,EAAqBwV,EAAMG,GAC3BhJ,YAAY,CACR9O,KAAK,GAAD,OAAK4X,EAAL,SACJG,KAAMJ,EACN1I,IAAK,YAAc4I,GACpBC,GAGP,SAASE,KAAyC,IAC1CC,EADa9B,EAA4B,uDAArB,MAAO/B,EAAc,uDAAN,KAEvC,GAAa,cAAT+B,EACA8B,EAAW,OACR,CACH,GAAa,MAAT7D,EACA,KAAM,wDAEG,gBAAT+B,IACA8B,EAAW,CAAE,OAAU,KAK/B,IAAIC,EAAc,SAAUC,EAAWP,EAAMC,IACrCM,EAAUnX,SAAmB,eAARmV,IACrBuB,GAAaS,EAAU9R,UAAWuR,EAAMC,IAI5CO,EAAmB,SAAUD,EAAWP,EAAMC,IAC1CM,EAAUnX,SAAmB,eAARmV,IACrBgC,EAAU9R,UACLsJ,MAAK,SAAA1C,GACFyK,GAAazK,EAAK2K,EAAMC,OAKpCQ,EAAc,SAAU5Z,EAAQ6Z,EAAUtU,GAEtCvF,EAAO6Z,GADPA,KAAY7Z,GACZ,kBAAwBA,EAAO6Z,IAActU,GAE1BA,GAMnB4T,EAAO,SACE,cAATzB,EACA8B,EAASL,GAAQpQ,KAEL,OAAR2O,EACA3O,EAAe,CACX,OAAU4M,EAAMlS,MAAMuD,OACtB,MAAS2O,EAAMlS,MAAMA,SAGzBsF,EAAmB4M,EAAMwD,IACzBK,EAAQ,MAAY,CAChB,OAAU,OACV,MAAS,KAGjBC,EAAY1Q,EAAQoQ,EAAM,wBAK9B,IAAIA,EAAO,0BACE,cAATzB,EACA8B,EAASL,GAAQ/O,MAEL,OAARsN,EACAtN,GAAgB,CACZ,iBAAoBuL,EAAMmE,OAAOC,GAAG,qBACpC,YAAepE,EAAMmE,OAAOC,GAAG,cAGnC3P,GAAoBuL,EAAMwD,IAC1BS,EAAYJ,EAAQ,OAAY,KAAM,CAClC,oBAAqB7D,EAAMwD,GAAM9W,WAAW8G,iBAC5C,UAAWwM,EAAMwD,GAAM9W,WAAWiH,eAG1CmQ,EAAYrP,EAAS+O,EAAM,wBAK/B,IAAIA,EAAO,6BACE,cAATzB,EACA8B,EAASL,GAAQ9N,MAEL,OAARqM,EACArM,GAAmB,CACf,MAASsK,EAAMmE,OAAOC,GAAG,eAG7B1O,GAAuBsK,EAAMwD,IAC7BS,EAAYJ,EAAQ,OAAY,KAAM,CAClC,WAAY7D,EAAMwD,GAAM9W,WAAWkI,SAG3CkP,EAAYpO,EAAY8N,EAAM,2BAKlC,IAAIA,EAAO,2BACC,aAARzB,EACA8B,EAASL,GAAQvV,MAEL,OAAR8T,EACA9T,GAAe,IAEfA,GAAmB+R,EAAMwD,IAE7BM,EAAY7V,EAAQuV,EAAM,2BAK9B,IAAIA,EAAO,gBACC,aAARzB,EACA8B,EAASL,GAAQpN,MAEL,OAAR2L,EACA3L,GAAsB,IAEtBA,GAA0B4J,EAAMwD,IAEpCM,EAAY1N,EAAeoN,EAAM,gCAKrC,IAAIA,EAAO,oBACC,aAARzB,EACA8B,EAASL,GAAQpM,MAEL,OAAR2K,EACA3K,GAAiB,CACb,KAAQ4I,EAAMmE,OAAOE,WAAW,gBAGpCjN,GAAqB4I,EAAMwD,IAC3BS,EAAYJ,EAAQ,OAAY,aAAc,CAC1C,YAAa7D,EAAMwD,GAAM9W,WAAW2J,QAG5CyN,EAAY1M,EAAUoM,EAAM,iCAKhC,IAAIA,EAAO,MACC,aAARzB,EACA8B,EAASL,GAAQnL,MAEL,OAAR0J,EACA1J,GAAY,CACR,SAAY2H,EAAMmE,OAAO9L,IAAI,WAC7B,QAAW2H,EAAMmE,OAAO9L,IAAI,cAGhCA,GAAgB2H,EAAMwD,IACtBS,EAAYJ,EAAQ,OAAY,MAAO,CACnC,UAAW7D,EAAMwD,GAAM9W,WAAW6K,SAClC,UAAWyI,EAAMwD,GAAM9W,WAAWmL,WAG1CiM,EAAYzL,EAAKmL,EAAM,4CAK3B,IAoBAc,EApBId,EAAO,iBACC,aAARzB,EACA8B,EAASL,GAAQ7T,MAEL,OAARoS,EACApS,GAAc,CACV,YAAeqQ,EAAMmE,OAAO3K,QAAQ,kBAGxC7J,GAAkBqQ,EAAMwD,IACxBS,EAAYJ,EAAQ,OAAY,UAAW,CACvC,cAAe7D,EAAMwD,GAAM9W,WAAW6X,eAG9CT,EAAYnU,EAAO6T,EAAM,sCAQ7B,IAsBAgB,EAtBIhB,EAAO,OACC,aAARzB,EACAuC,EAAWG,MAEC,OAAR1C,EACA0C,GAAa,CACT,WAAczE,EAAMmE,OAAOM,KAAK,aAChC,WAAczE,EAAMmE,OAAOM,KAAK,aAChC,QAAWzE,EAAMmE,OAAOM,KAAb,WAGfA,GAAiBzE,EAAMwD,IACvBS,EAAYJ,EAAQ,OAAY,OAAQ,CACtC,YAAa7D,EAAMwD,GAAM9W,WAAWoP,WACpC,YAAakE,EAAMwD,GAAM9W,WAAWgY,WACpC,QAAW1E,EAAMwD,GAAM9W,WAAWqP,WAGxCiI,EAAiBS,EAAMjB,EAAM,oBAMjC,IAAIA,EAAO,OACC,aAARzB,EACAyC,EAAWG,MAEC,OAAR5C,EACA4C,GAAa,CACT,WAAc3E,EAAMmE,OAAOQ,KAAK,eAChC,cAAiB3E,EAAMmE,OAAOQ,KAAK,WACnC,SAAY3E,EAAMmE,OAAOQ,KAAK,iBAC9B,QAAW3E,EAAMmE,OAAOQ,KAAb,WAGfA,GAAiB3E,EAAMwD,IACvBS,EAAYJ,EAAQ,OAAY,OAAQ,CACpC,WAAc7D,EAAMwD,GAAM9W,WAAWkY,WACrC,cAAiB5E,EAAMwD,GAAM9W,WAAWwP,cACxC,SAAY8D,EAAMwD,GAAM9W,WAAWmY,SACnC,QAAW7E,EAAMwD,GAAM9W,WAAWqP,WAG1CiI,EAAiBW,EAAMnB,EAAM,mBAMjC,IAAIA,EAAO,qBACC,aAARzB,EACA8B,EAASL,GAAQsB,MAEL,OAAR/C,EACA+C,GAAsB,CAClB,EAAK9E,EAAMmE,OAAO3K,QAAQ,aAG9BsL,GAA0B9E,EAAMwD,IAChCS,EAAYJ,EAAQ,OAAY,UAAW,CACvC,SAAU7D,EAAMwD,GAAM9W,WAAWiM,KAGzCmL,EAAYgB,EAAetB,EAAM,6CAKrC,IAAIA,EAAO,kBACC,aAARzB,EACA8B,EAASL,GAAQuB,MAEL,OAARhD,EACAgD,GAAkB,CACd,OAAU/E,EAAMmE,OAAO3K,QAAQ,kBAGnCuL,GAAsB/E,EAAMwD,IAC5BS,EAAYJ,EAAQ,OAAY,UAAW,CACvC,cAAe7D,EAAMwD,GAAM9W,WAAWqM,UAG9C+K,EAAYiB,EAAWvB,EAAM,8CAKjC,IAAIA,EAAO,oBACC,aAARzB,EACA8B,EAASL,GAAQwB,MAEL,OAARjD,EACAiD,GAAoB,CAChB,WAAchF,EAAMmE,OAAO3K,QAAQ,eAGvCwL,GAAwBhF,EAAMwD,IAC9BS,EAAYJ,EAAQ,OAAY,UAAW,CACvC,WAAY7D,EAAMwD,GAAM9W,WAAW4M,cAG3CwK,EAAYkB,EAAaxB,EAAM,gDAKnC,IAAIA,EAAO,oBACC,aAARzB,EACA8B,EAASL,GAAQyB,MAEL,OAARlD,EACAkD,GAAuB,CACnB,OAAUjF,EAAMmE,OAAO3K,QAAQ,kBAGnCyL,GAA2BjF,EAAMwD,IACjCS,EAAYJ,EAAQ,OAAY,UAAW,CACvC,cAAe7D,EAAMwD,GAAM9W,WAAW6M,UAG9CuK,EAAYmB,EAAgBzB,EAAM,kCAKtC,IAAIA,EAAO,mBACC,aAARzB,EACA8B,EAASL,GAAQ0B,MAEL,OAARnD,EACAmD,GAAwB,IAExBA,GAA4BlF,EAAMwD,IAEtCM,EAAYoB,EAAiB1B,EAAM,8BAKvC,IAAIA,EAAO,2BAaf,MAZgB,aAARzB,EACA8B,EAASL,GAAQ2B,MAEL,OAARpD,EACAoD,KAEAA,GAA2BnF,EAAMwD,IAErCM,EAAYqB,EAAgB3B,EAAM,uCAI9B,aAARzB,EACOzH,QAAQ8I,IAAI,CAACkB,EAAUE,IACzBjJ,MAAK,SAAA6J,GAGF,OAFAvB,EAASY,KAAOW,EAAK,GACrBvB,EAASc,KAAOS,EAAK,GACdvB,KAGRA,EAOfjJ,UAAY,SAAUC,GAClB,IAAMX,EAAUW,EAAI9G,KACpB,GAAoB,QAAhBmG,EAAQtO,KAAgB,CACxB,IAAIyZ,EAAW3D,KAAK4D,MAAsC,EAAhCC,UAAUC,oBAA0B,GAC1DC,EAAa3a,EAAAA,GAAiB,CAAE4a,gBAAiBL,IACrDI,EACKlK,MAAK,SAAAvQ,GACF0P,YAAY,CACR9O,KAAMsO,EAAQtO,KACdiP,IAAI,yCAIhB,IAAI8K,EDhZRvH,GAAO,IAAI9D,SAAQ,SAAAC,IAEfwD,GAAS6H,UAAUC,KAAK,SAAU,IAE3BC,gBAAkB,SAACC,GACtB,IAAIC,EAAeD,EAAE7C,OAAO5E,OAI5B,IACI0H,EAAaC,kBAAkB,YACjC,MAAOF,IACT,IACIC,EAAaC,kBAAkB,iBACjC,MAAOF,IACT,IACIC,EAAaC,kBAAkB,QACjC,MAAOF,IACT,IACIC,EAAaC,kBAAkB,aACjC,MAAOF,IAETC,EAAaE,kBAAkB,WAAY,CAAEC,QAAS,OACtDH,EAAaE,kBAAkB,gBAAiB,CAAEC,QAAS,OAC3DH,EAAaE,kBAAkB,OAAQ,CAAEC,QAAS,OAClDH,EAAaE,kBAAkB,YAAa,CAAEC,QAAS,QAI3DpI,GAAOY,UAAY,WACfN,GAAmB9D,IAGvBwD,GAAOc,QAAU,WACbtE,EAAQ,UC+WZoL,EACKpK,MAAK,SAAA+C,GACa,OAAXA,EACA5D,YAAY,CACR9O,KAAM,eACN+X,KAAMrF,EACNzD,IAAK,aAGTuL,QAAQC,IAAIpL,OACZP,YAAY,CACR9O,KAAM,eACNiP,IAAI,mCAKpB,IAAIyL,EAAY7B,KACZ8B,EAAY5B,KAEhB/D,GAAStG,QAAQ8I,IAAI,CACjBqC,EACAE,EACAW,EACAC,SAGD,GAAoB,OAAhBrM,EAAQtO,KACfgV,GACKrF,MAAK,SAAAvQ,GACF4Y,GAAY,MAAO1J,EAAQA,YAE9BsM,OAAM,SAAAvL,GACHmL,QAAQC,IAAIpL,GACZP,YAAY,CACR9O,KAAM,YACNiP,IAAKI,EAAMwL,qBAKpB,GAAoB,QAAhBvM,EAAQtO,MACf,GAAoC,QAAhCsO,EAAQA,QAAQpM,MAAMuD,OAAkB,CACxC,IAAMC,EAAS,IAAIC,eACfpC,EAAI+K,EAAQA,QAAQpM,MAAMA,MAAMiE,KAAK,GACzC6O,GACKrF,KADL,mCACU,WAAOvQ,GAAP,yFACmB0b,GAAqBpV,EAAOK,kBAAkBxC,IADjE,OACEjB,EADF,OAEE2V,EAAWD,GAAY,cAAe1V,GAC1CwM,YAAY,CACR9O,KAAM,mBACN+X,KAAME,IALR,2CADV,uDASK2C,OAAM,SAAAvL,GACHmL,QAAQC,IAAIpL,GACZP,YAAY,CACR9O,KAAM,aACNiP,IAAKI,EAAMwL,qBAIpB,GAAoC,UAAhCvM,EAAQA,QAAQpM,MAAMuD,OAAoB,EDtRtD,SAAP,oCCwRYkR,CADIlS,EAAK6J,EAAQA,QAAQpM,MAAMA,MAAMiE,MAEhCwJ,KADL,mCACU,WAAO1C,GAAP,4EACS,MAAPA,EADF,gBAEE6B,YAAY,CACR9O,KAAM,eACNiP,IAAI,kCAAD,OAAoCxK,EAApC,OAJT,uCAOuBqW,GAAqB7N,GAP5C,cAOM3K,EAPN,gBAQuB0V,GAAY,cAAe1V,GARlD,OAQM2V,EARN,OASEnJ,YAAY,CACR9O,KAAM,mBACN+X,KAAME,IAXZ,4CADV,uDAgBK2C,OAAM,SAAAvL,GACHmL,QAAQC,IAAIpL,GACZP,YAAY,CACR9O,KAAM,aACNiP,IAAKI,EAAMwL,sBAKxB,GAAoB,UAAhBvM,EAAQtO,KACfgV,GACKrF,KADL,mCACU,WAAOvQ,GAAP,yFACgB4Y,GAAY,aAD5B,cACE5D,EADF,gBAEiB0G,GAAqB1G,EAAO,QAF7C,OAEE5Q,EAFF,OAGFsL,YAAY,CACR9O,KAAM,cACN+X,KAAMvU,EACNyL,IAAK,uCACN,CAACzL,IAPF,2CADV,uDAUKoX,OAAM,SAAAvL,GACHmL,QAAQC,IAAIpL,GACZP,YAAY,CACR9O,KAAM,eACNiP,IAAKI,EAAMwL,qBAIpB,GAAoB,WAAhBvM,EAAQtO,KAAmB,CAClC,IAAIqU,EAAQ/F,EAAQA,QAAQ+F,MAC5BW,GACKrF,KADL,mCACU,WAAOvQ,GAAP,6FACgB4Y,GAAY,aAD5B,cACE5D,EADF,gBAEiB0G,GAAqB1G,EAAO,UAF7C,cAEE5Q,EAFF,gBAGamT,GAAqB,KAAMnT,EAAO4Q,MAAO5Q,EAAOuX,SAAU1G,GAHvE,UAIS,QADP5P,EAHF,0CAKmBkS,KALnB,QAKMqE,EALN,OAMElM,YAAY,CACR9O,KAAM,eACN+X,KAAMiD,EACN/L,IAAI,qCAAD,OAAuCxK,EAAvC,OATT,wBAYE+V,QAAQC,IAAIpL,OACZP,YAAY,CACR9O,KAAM,eACNiP,IAAI,wCAAD,OAA0CxK,EAA1C,OAfT,4CADV,uDAoBKmW,OAAM,SAAAvL,GACHmL,QAAQC,IAAIpL,GACZP,YAAY,CACR9O,KAAM,eACNiP,IAAKI,EAAMwL,qBAIpB,GAAoB,aAAhBvM,EAAQtO,KAAqB,CACpC,IAAIyE,GD3SL,SAAP,oCC4SQkS,CADIlS,EAAK6J,EAAQA,QAAQ7J,IAEpBkL,KADL,mCACU,WAAO+C,GAAP,2EACEA,EADF,gCAEmBiE,KAFnB,OAEMqE,EAFN,OAGElM,YAAY,CACR9O,KAAM,eACN+X,KAAMiD,EACN/L,IAAI,qCAAD,OAAuCxK,EAAvC,OANT,sBASE+V,QAAQC,IAAIpL,OACZP,YAAY,CACR9O,KAAM,eACNiP,IAAI,wCAAD,OAA0CxK,EAA1C,OAZT,2CADV,2DAmBuB,wBAAhB6J,EAAQtO,KACfgV,GAAOrF,MAAK,SAAAvQ,GACR,IAAIwO,EAAUU,EAAQA,QAAQV,QAE1BmK,EAAOuB,GADKhL,EAAQA,QAAQyC,UACwBnD,GAEpDW,EAAgB,GACpBpM,EAAqB4V,EAAMxJ,GAC3BO,YAAY,CACR9O,KAAM,uBACN+X,KAAMA,EACN9I,IAAK,iCACNV,MAGgB,qBAAhBD,EAAQtO,KACfgV,GAAOrF,MAAK,SAAAvQ,GACR,IAAI6b,EAAU3M,EAAQA,QAAQrI,KAC1BiV,EAAM1Q,GAA8ByQ,GACxCnM,YAAY,CACR9O,KAAM,oBACN+X,KAAM,CACF9R,KAAMgV,EACNE,KAAMD,GAEVjM,IAAK,qCACN,CAACiM,EAAIta,YAGW,wBAAhB0N,EAAQtO,KACfgV,GAAOrF,MAAK,SAAAvQ,GACRma,GAA4BjL,EAAQA,QAAQ7J,GAAI6J,EAAQA,QAAQgE,WAChExD,YAAY,CACR9O,KAAM,uBACNiP,IAAK,4CAIU,0BAAhBX,EAAQtO,KACfgV,GAAOrF,MAAK,SAAAvQ,GACR,IAAI2Y,EAAOwB,GAA4BjL,EAAQA,QAAQV,QAASU,EAAQA,QAAQyC,WAC5ExC,EAAgB,GACpBpM,EAAqB4V,EAAMxJ,GAC3BO,YAAY,CACR9O,KAAM,+BACN+X,KAAMA,EACN9I,IAAK,iCACNV,MAGgB,uBAAhBD,EAAQtO,KACfgV,GAAOrF,MAAK,SAAAvQ,GACRma,GAA+BjL,EAAQA,QAAQ7J,OAG5B,eAAhB6J,EAAQtO,KACfgV,GAAOrF,KAAP,mCAAY,WAAOvQ,GAAP,iFACFyZ,KADE,uBAEQA,KAFR,OAGRnB,GAHQ,OAGU,OAAQ,+BAHlB,2CAAZ,uDAMuB,eAAhBpJ,EAAQtO,KACfgV,GAAOrF,KAAP,mCAAY,WAAOvQ,GAAP,iFACF2Z,KADE,uBAEQA,KAFR,OAGRrB,GAHQ,OAGU,OAAQ,8BAHlB,2CAAZ,uDAOA8C,QAAQC,IAAI,+BEznBhBW,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqB5c,IAAjB6c,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,IAOV,OAHAE,EAAoBJ,GAAUG,EAAQA,EAAOD,QAASH,GAG/CI,EAAOD,QAIfH,EAAoBM,EAAID,EAGxBL,EAAoBjc,EAAI,WAGvB,IAAIwc,EAAsBP,EAAoBQ,OAAEnd,EAAW,CAAC,IAAI,MAAM,WAAa,OAAO2c,EAAoB,SAE9G,OADAO,EAAsBP,EAAoBQ,EAAED,I,WChC7C,IAAIE,EAAW,GACfT,EAAoBQ,EAAI,SAASnJ,EAAQqJ,EAAUC,EAAIC,GACtD,IAAGF,EAAH,CAMA,IAAIG,EAAevc,EAAAA,EACnB,IAASkC,EAAI,EAAGA,EAAIia,EAASha,OAAQD,IAAK,CACrCka,EAAWD,EAASja,GAAG,GACvBma,EAAKF,EAASja,GAAG,GACjBoa,EAAWH,EAASja,GAAG,GAE3B,IAJA,IAGIsa,GAAY,EACPhS,EAAI,EAAGA,EAAI4R,EAASja,OAAQqI,MACpB,EAAX8R,GAAsBC,GAAgBD,IAAand,OAAO2E,KAAK4X,EAAoBQ,GAAGO,OAAM,SAAS3a,GAAO,OAAO4Z,EAAoBQ,EAAEpa,GAAKsa,EAAS5R,OAC3J4R,EAASM,OAAOlS,IAAK,IAErBgS,GAAY,EACTF,EAAWC,IAAcA,EAAeD,IAG7C,GAAGE,EAAW,CACbL,EAASO,OAAOxa,IAAK,GACrB,IAAIya,EAAIN,SACEtd,IAAN4d,IAAiB5J,EAAS4J,IAGhC,OAAO5J,EAzBNuJ,EAAWA,GAAY,EACvB,IAAI,IAAIpa,EAAIia,EAASha,OAAQD,EAAI,GAAKia,EAASja,EAAI,GAAG,GAAKoa,EAAUpa,IAAKia,EAASja,GAAKia,EAASja,EAAI,GACrGia,EAASja,GAAK,CAACka,EAAUC,EAAIC,I,GCJ/BZ,EAAoBkB,EAAI,SAASd,GAChC,IAAIe,EAASf,GAAUA,EAAOgB,WAC7B,WAAa,OAAOhB,EAAgB,SACpC,WAAa,OAAOA,GAErB,OADAJ,EAAoBqB,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,GCLRnB,EAAoBqB,EAAI,SAASlB,EAASoB,GACzC,IAAI,IAAInb,KAAOmb,EACXvB,EAAoBwB,EAAED,EAAYnb,KAAS4Z,EAAoBwB,EAAErB,EAAS/Z,IAC5E3C,OAAOge,eAAetB,EAAS/Z,EAAK,CAAEsb,YAAY,EAAMnZ,IAAKgZ,EAAWnb,MCJ3E4Z,EAAoB9X,EAAI,GAGxB8X,EAAoBlB,EAAI,SAAS6C,GAChC,OAAOtO,QAAQ8I,IAAI1Y,OAAO2E,KAAK4X,EAAoB9X,GAAG0Z,QAAO,SAASpO,EAAUpN,GAE/E,OADA4Z,EAAoB9X,EAAE9B,GAAKub,EAASnO,GAC7BA,IACL,MCNJwM,EAAoB6B,EAAI,SAASF,GAEhC,MAAO,aAAeA,EAAU,IAAM,CAAC,IAAM,WAAW,IAAM,WAAW,IAAM,WAAW,IAAM,WAAW,IAAM,YAAYA,GAAW,aCFzI3B,EAAoB8B,SAAW,SAASH,KCDxC3B,EAAoB5N,EAAI,WACvB,GAA0B,kBAAf2P,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,GACd,MAAOnD,GACR,GAAsB,kBAAXoD,OAAqB,OAAOA,QALjB,GCAxBlC,EAAoBwB,EAAI,SAAS5T,EAAKuU,GAAQ,OAAO1e,OAAO2e,UAAUC,eAAeC,KAAK1U,EAAKuU,ICC/FnC,EAAoBiB,EAAI,SAASd,GACX,qBAAXoC,QAA0BA,OAAOC,aAC1C/e,OAAOge,eAAetB,EAASoC,OAAOC,YAAa,CAAE7Z,MAAO,WAE7DlF,OAAOge,eAAetB,EAAS,aAAc,CAAExX,OAAO,KCLvDqX,EAAoB5M,EAAI,S,WCAxB4M,EAAoByC,EAAIC,KAAKC,SAAW,aAIxC,IAAIC,EAAkB,CACrB,IAAK,GAkBN5C,EAAoB9X,EAAE1B,EAAI,SAASmb,EAASnO,GAEvCoP,EAAgBjB,IAElBkB,cAAc7C,EAAoB5M,EAAI4M,EAAoB6B,EAAEF,KAK/D,IAAImB,EAAqBJ,KAAuB,iBAAIA,KAAuB,kBAAK,GAC5EK,EAA6BD,EAAmBtd,KAAKwd,KAAKF,GAC9DA,EAAmBtd,KAzBA,SAASsH,GAC3B,IAAI4T,EAAW5T,EAAK,GAChBmW,EAAcnW,EAAK,GACnBoW,EAAUpW,EAAK,GACnB,IAAI,IAAImT,KAAYgD,EAChBjD,EAAoBwB,EAAEyB,EAAahD,KACrCD,EAAoBM,EAAEL,GAAYgD,EAAYhD,IAIhD,IADGiD,GAASA,EAAQlD,GACdU,EAASja,QACdmc,EAAgBlC,EAASrZ,OAAS,EACnC0b,EAA2BjW,I,cCrB5B,IAAIqW,EAAOnD,EAAoBjc,EAC/Bic,EAAoBjc,EAAI,WACvB,OAAOsP,QAAQ8I,IAAI,CAClB6D,EAAoBlB,EAAE,KACtBkB,EAAoBlB,EAAE,OACpBxK,KAAK6O,I,GCJiBnD,EAAoBjc,I","sources":["workers/_utils.js","workers/_inputs.js","workers/mito.js","workers/_qc_metrics.js","workers/_qc_thresholds.js","workers/_qc_filter.js","workers/_normalization.js","workers/_model_gene_var.js","workers/_pca.js","workers/_neighbor_index.js","workers/_snn_neighbors.js","workers/_snn_graph.js","workers/_snn_cluster.js","workers/_choose_clustering.js","workers/_utils_viz_parent.js","workers/_tsne_monitor.js","workers/_umap_monitor.js","workers/_utils_markers.js","workers/_score_markers.js","workers/_custom_markers.js","workers/KanaDBHandler.js","workers/scran.worker.js","workers/_utils_serialize.js","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["import * as scran from \"scran.js\";\n\nexport function freeCache(object) {\n    if (object !== undefined && object !== null) {\n        object.free();\n    }\n    return;\n}\n\nexport function freeReloaded(cache) {\n    if (\"reloaded\" in cache) {\n        for (const [k, v] of Object.entries(cache.reloaded)) {\n            if (v instanceof scran.WasmArray) {\n                v.free();\n            }\n        }\n        delete cache.reloaded;\n    }\n}\n\nexport function changedParameters(x, y) {\n    return JSON.stringify(x) != JSON.stringify(y);\n}\n\nexport function computeRange(arr) {\n    var max = -Infinity, min = Infinity;\n    arr.forEach(function (x) {\n        if (max < x) {\n            max = x;\n        }\n        if (min > x) {\n            min = x;\n        }\n    });\n    return [min, max];\n}\n\nexport function allocateCachedArray(size, type, cache, name = \"buffer\") {\n    var reallocate = true;\n    if (name in cache) {\n        var candidate = cache[name];\n        if (candidate.size != size || candidate.constructor.className != type) {\n            candidate.free();\n        } else {\n            reallocate = false;\n        }\n    }\n  \n    if (reallocate) {\n        switch (type) {\n            case \"Uint8Array\":\n                cache[name] = new scran.Uint8WasmArray(size);\n                break;\n            case \"Int32Array\":\n                cache[name] = new scran.Int32WasmArray(size);\n                break;\n            case \"Float64Array\":\n                cache[name] = new scran.Float64WasmArray(size);\n                break;\n            default:\n                // We only ever use one of the three above types in our \n                // internal data stores, so no need to go all-out here.\n                throw \"allocating '\" + type + \"' not yet supported\";\n        }\n    }\n\n    return cache[name];\n}\n\nexport function extractBuffers(object, store) {\n    if (Array.isArray(object)) {\n        for (const element of object) {\n            extractBuffers(element, store);\n        }\n    } else if (object.constructor == Object) {\n        for (const [key, element] of Object.entries(object)) {\n            extractBuffers(element, store);\n        }\n    } else if (ArrayBuffer.isView(object)) {\n        if (! (object.buffer instanceof ArrayBuffer)) {\n            throw \"only ArrayBuffers should be in the message payload\";\n        }\n        store.push(object.buffer);\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./_utils.js\";\nimport * as hdf5 from \"h5wasm\";\nimport * as d3 from \"d3-dsv\";\nimport * as pako from \"pako\";\n\nvar cache = {};\nvar parameters = {};\nvar abbreviated = {};\n\nexport var changed = false;\n\nfunction permuteGenes(genes) {\n    var buf = new scran.Int32WasmArray(cache.matrix.numberOfRows());\n    try {\n        cache.matrix.permutation({ buffer: buf });\n\n        let perm = buf.array();\n        for (const [key, val] of Object.entries(genes)) {\n            let copy = val.slice();\n\n            for (var i = 0; i < perm.length; i++) {\n                copy[perm[i]] = val[i];\n            }\n            genes[key] = copy;\n        }\n    } finally {\n        buf.free();\n    }\n}\n\nfunction dummyGenes(numberOfRowss) {\n    let genes = []\n    for (let i = 0; i < numberOfRowss; i++) {\n        genes.push(`Gene ${i + 1}`);\n    }\n    return { \"id\": genes };\n}\n\n/** Matrix Market **/\nfunction loadMatrixMarketRaw(files) {\n    utils.freeCache(cache.matrix);\n\n    // In theory, this section may support multiple files (e.g., for multiple samples).\n    var mtx_files = files.filter(x => x.type == \"mtx\");\n    var first_mtx = mtx_files[0];\n    var contents = new Uint8Array(first_mtx.buffer);\n    var ext = first_mtx.name.split('.').pop();\n    var is_compressed = (ext == \"gz\");\n    cache.matrix = scran.initializeSparseMatrixFromMatrixMarketBuffer(contents, { \"compressed\": is_compressed });\n\n    var genes_file = files.filter(x => x.type == \"genes\");\n    if (genes_file.length == 1) {\n        var genes_file = genes_file[0] \n        var content = new Uint8Array(genes_file.buffer);\n        var ext = genes_file.name.split('.').pop();\n        if (ext == \"gz\") {\n            content = pako.ungzip(content);\n        }\n\n        const dec = new TextDecoder();\n        let genes_str = dec.decode(content);\n        const tsv = d3.dsvFormat(\"\\t\");\n        let parsed = tsv.parseRows(genes_str);\n        if (parsed.length != cache.matrix.numberOfRows()) {\n            throw \"number of matrix rows is not equal to the number of genes in '\" + genes_file.name + \"'\";\n        }\n\n        var ids = [], symb = [];\n        parsed.forEach(x => {\n            ids.push(x[0]);\n            symb.push(x[1]);\n        });\n\n        cache.genes = { \"id\": ids, \"symbol\": symb };\n    } else {\n        cache.genes = dummyGenes(cache.matrix.numberOfRows());\n    }\n\n    permuteGenes(cache.genes);\n    return;\n}\n\nfunction loadMatrixMarket(args) {\n    var reader = new FileReaderSync();\n\n    // First pass computes an abbreviated version to quickly check for changes.\n    // Second pass does the actual readArrayBuffer.\n    for (var it = 0; it < 2; it++) {\n        var formatted = { \"type\": \"MatrixMarket\", \"files\": [] };\n\n        var bufferFun;\n        if (it == 0) {\n            bufferFun = (f) => f.size;\n        } else {\n            bufferFun = (f) => reader.readAsArrayBuffer(f);\n        }\n\n        for (const f of args.mtx) {\n            formatted.files.push({ \"type\": \"mtx\", \"name\": f.name, \"buffer\": bufferFun(f) });\n        }\n\n        if (args.gene !== null) {\n            if (args.gene.length !== 1) {\n                throw \"expected no more than one gene file\";\n            }\n            var genes_file = args.gene[0];\n            formatted.files.push({ \"type\": \"genes\", \"name\": genes_file.name, \"buffer\": bufferFun(genes_file) });\n        }\n\n        if (it == 0) {\n            if (!utils.changedParameters(abbreviated, formatted)) {\n                changed = false;\n                return;\n            } else {\n                abbreviated = formatted;\n                changed = true;\n            }\n        } else {\n            parameters = formatted;\n            loadMatrixMarketRaw(formatted.files);\n            delete cache.reloaded;\n        }\n    }\n\n    return;\n}\n\n/** HDF5 **/\n\nfunction guessPath(f) {\n    var fkeys = f.keys();\n    if (fkeys.indexOf(\"X\") != -1) {\n        return \"X\";\n    } else if (fkeys.indexOf(\"matrix\") != -1) {\n        return \"matrix\";\n    } else {\n        var sparse_opts = [];\n        var dense_opts = [];\n\n        // Try to pick out sparse formats.\n        for (const key of fkeys) {\n            var current = f.get(key);\n            if (current instanceof hdf5.Group) {\n                var cur_keys = current.keys();\n                if (cur_keys.indexOf(\"data\") != -1 && cur_keys.indexOf(\"indices\") && cur_keys.indexOf(\"indptr\")) {\n                    sparse_opts.push(key);\n                }\n            } else if (current instanceof hdf5.Dataset && current.shape.length == 2) {\n                dense_opts.push(key);\n            }\n        }\n\n        if (sparse_opts.length) {\n            return sparse_opts[0];\n        } else if (dense_opts.length) {\n            return dense_opts[0];\n        } else {\n            throw \"could not automatically find a suitable 'path' inside the HDF5 file\";\n        }\n    }\n\n    return null;\n}\n\nfunction guessGenesFromH5AD(f) {\n    var fkeys = f.keys();\n\n    // Does it have a 'var' group?\n    if (fkeys.indexOf(\"var\") == -1) {\n        return null;\n    }\n\n    var vars = f.get(\"var\");\n    if (!(vars instanceof hdf5.Group)) {\n        return null;\n    }\n\n    var vkeys = vars.keys();\n    if (vkeys.indexOf(\"_index\") == -1) {\n        return null;\n    }\n\n    let index = vars.get(\"_index\");\n    if (!(index instanceof hdf5.Dataset)) {\n        return null;\n    }\n\n    let output = { \"_index\": index.value };\n\n    // Also include anything else that might be a gene symbol.\n    for (const key of vkeys) {\n        if (key == \"_index\") {\n            continue;\n        }\n\n        if (key.match(/name/i) || key.match(/symbol/i)) {\n            let current = vars.get(key);\n            if (current instanceof hdf5.Dataset) {\n                output[field] = current.value;\n            }\n        }\n    }\n\n    return output;\n}\n\nfunction guessGenesFrom10x(f) {\n    var fkeys = f.keys();\n    \n    // Does it have a 'matrix' group with a \"features\" subgroup?\n    if (fkeys.indexOf(\"matrix\") == -1) {\n        return null;\n    }\n\n    var mat = f.get(\"matrix\");\n    if (!(mat instanceof hdf5.Group)) {\n        return null;\n    }\n\n    var mkeys = mat.keys();\n    if (mkeys.indexOf(\"features\") == -1) {\n        return null;\n    }\n\n    var feats = mat.get(\"features\");\n    if (!(feats instanceof hdf5.Group)) {\n        return null;\n    }\n\n    var featkeys = feats.keys();\n    if (featkeys.indexOf(\"id\") == -1) {\n        return null;\n    }\n\n    var featid = feats.get(\"id\");\n    if (!(featid instanceof hdf5.Dataset)) {\n        return null;\n    }\n\n    var output = { id: featid.value };\n\n    var name_index = featkeys.indexOf(\"name\");\n    if (name_index != -1) {\n        var featname = feats.get(\"name\");\n        if (featname instanceof hdf5.Dataset) {\n            output.name = featname.value;\n        }\n    }\n    \n    return output;\n}\n\nfunction guessGenesFromHDF5(f) {\n    {\n        let output = guessGenesFromH5AD(f);\n        if (output !== null) {\n            return output;\n        }\n    }\n\n    {\n        let output = guessGenesFrom10x(f);\n        if (output !== null) {\n            return output;\n        }\n    }\n\n    return null;\n}\n\nfunction loadHDF5Raw(files) {\n    utils.freeCache(cache.matrix);\n\n    // In theory, we could support multiple HDF5 buffers.\n    var first_file = files[0];\n    var tmppath = \"rabbit-temp.h5\";\n    try {\n        hdf5.FS.writeFile(tmppath, new Uint8Array(first_file.buffer));\n        var f = new hdf5.File(tmppath, \"r\");\n        try {\n            var path = guessPath(f); \n            cache.matrix = scran.initializeSparseMatrixFromHDF5Buffer(f, path);\n            cache.genes = guessGenesFromHDF5(f);\n        } finally {\n            f.close();\n        }\n    } finally {\n        hdf5.FS.unlink(tmppath);\n    }\n\n    if (cache.genes === null) {\n        cache.genes = dummyGenes(cache.matrix.numberOfRows());\n    }\n    permuteGenes(cache.genes);\n    return;\n}\n\nfunction loadHDF5(args) {\n    var reader = new FileReaderSync();\n\n    // First pass computes an abbreviated version to quickly check for changes.\n    // Second pass does the actual readArrayBuffer.\n    for (var it = 0; it < 2; it++) {\n        var formatted = { \"type\": \"HDF5\", \"files\": [] };\n\n        var bufferFun;\n        if (it == 0) {\n            bufferFun = (f) => f.size;\n        } else {\n            bufferFun = (f) => reader.readAsArrayBuffer(f);\n        }\n\n        for (const f of args.file) {\n            formatted.files.push({ \"type\": \"h5\", \"name\": f.name, \"buffer\": bufferFun(f) });\n        }\n\n        if (it == 0) {\n            if (!utils.changedParameters(abbreviated, formatted)) {\n                changed = false;\n                return;\n            } else {\n                abbreviated = formatted;\n                changed = true;\n            }\n        } else {\n            parameters = formatted;\n            loadHDF5Raw(formatted.files);\n            delete cache.reloaded;\n        }\n    }\n\n    return;\n}\n\n/** Public functions (standard) **/\nexport function compute(args) {\n    switch (args.format) {\n        case \"mtx\":\n            loadMatrixMarket(args.files);\n            break;\n        case \"hdf5\":\n        case \"tenx\":\n        case \"h5ad\":\n            loadHDF5(args.files);\n            break;\n        case \"kana\":\n            // do nothing, this is handled by unserialize.\n            break;\n        default:\n            throw \"unknown matrix file extension: '\" + args.format + \"'\";\n    }\n    return;\n}\n\nexport function results() {\n    var output = { \"dimensions\": fetchDimensions() }\n    if (\"reloaded\" in cache) {\n        output.genes = { ...cache.reloaded.genes };\n    } else {\n        output.genes = { ...cache.genes };\n    }\n    return output;\n}\n\nexport function serialize() {\n    var contents = {};\n    if (\"reloaded\" in cache) {\n        contents.genes = { ...cache.reloaded.genes };\n        contents.num_cells = cache.reloaded.num_cells;\n    } else {\n        contents.genes = { ...cache.genes };\n        contents.num_cells = cache.matrix.numberOfColumns();\n    }\n\n    // Making a deep-ish clone of the parameters so that any fiddling with\n    // buffers during serialization does not compromise internal state.\n    var parameters2 = { ...parameters };\n    parameters2.files = parameters.files.map(x => { return { ...x }; });\n\n    return {\n      \"parameters\": parameters2,\n      \"contents\": contents\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\n/** Public functions (custom) **/\nexport function fetchCountMatrix() {\n    if (\"reloaded\" in cache) {\n        if (parameters.type == \"MatrixMarket\") {\n            loadMatrixMarketRaw(parameters.files); \n        } else {\n            loadHDF5Raw(parameters.files);\n        }\n    }\n    return cache.matrix;\n}\n\nexport function fetchDimensions() {\n    if (\"reloaded\" in cache) {\n        return {\n            // This should contain at least one element,\n            // and all of them should have the same length,\n            // so indexing by the first element is safe.\n            \"num_genes\": Object.values(cache.reloaded.genes)[0].length,\n            \"num_cells\": cache.reloaded.num_cells\n        };\n    } else {\n        return {\n            \"num_genes\": cache.matrix.numberOfRows(),\n            \"num_cells\": cache.matrix.numberOfColumns()\n        };\n    }\n}\n\nexport function fetchGenes() {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.genes;\n    } else {\n        return cache.genes;\n    }\n}\n","/* Derived from scran.js's blacklists.js.R. */\n\nexport var mito = {};\nmito.ensembl = new Set([\"ENSMUSG00000064336\",\"ENSMUSG00000064337\",\"ENSMUSG00000064338\",\"ENSMUSG00000064339\",\"ENSMUSG00000064340\",\"ENSMUSG00000064341\",\"ENSMUSG00000064342\",\"ENSMUSG00000064343\",\"ENSMUSG00000064344\",\"ENSMUSG00000064345\",\"ENSMUSG00000064346\",\"ENSMUSG00000064347\",\"ENSMUSG00000064348\",\"ENSMUSG00000064349\",\"ENSMUSG00000064350\",\"ENSMUSG00000064351\",\"ENSMUSG00000064352\",\"ENSMUSG00000064353\",\"ENSMUSG00000064354\",\"ENSMUSG00000064355\",\"ENSMUSG00000064356\",\"ENSMUSG00000064357\",\"ENSMUSG00000064358\",\"ENSMUSG00000064359\",\"ENSMUSG00000064360\",\"ENSMUSG00000064361\",\"ENSMUSG00000064363\",\"ENSMUSG00000064364\",\"ENSMUSG00000064365\",\"ENSMUSG00000064366\",\"ENSMUSG00000064367\",\"ENSMUSG00000064368\",\"ENSMUSG00000064369\",\"ENSMUSG00000064370\",\"ENSMUSG00000064371\",\"ENSMUSG00000064372\",\"ENSMUSG00000065947\",\"ENSG00000198695\",\"ENSG00000198712\",\"ENSG00000198727\",\"ENSG00000198763\",\"ENSG00000198786\",\"ENSG00000198804\",\"ENSG00000198840\",\"ENSG00000198886\",\"ENSG00000198888\",\"ENSG00000198899\",\"ENSG00000198938\",\"ENSG00000209082\",\"ENSG00000210049\",\"ENSG00000210077\",\"ENSG00000210082\",\"ENSG00000210100\",\"ENSG00000210107\",\"ENSG00000210112\",\"ENSG00000210117\",\"ENSG00000210127\",\"ENSG00000210135\",\"ENSG00000210140\",\"ENSG00000210144\",\"ENSG00000210151\",\"ENSG00000210154\",\"ENSG00000210156\",\"ENSG00000210164\",\"ENSG00000210174\",\"ENSG00000210176\",\"ENSG00000210184\",\"ENSG00000210191\",\"ENSG00000210194\",\"ENSG00000210195\",\"ENSG00000210196\",\"ENSG00000211459\",\"ENSG00000212907\",\"ENSG00000228253\"]);\nmito.symbol = new Set([\"mt-Tf\",\"mt-Rnr1\",\"mt-Tv\",\"mt-Rnr2\",\"mt-Tl1\",\"mt-Nd1\",\"mt-Ti\",\"mt-Tq\",\"mt-Tm\",\"mt-Nd2\",\"mt-Tw\",\"mt-Ta\",\"mt-Tn\",\"mt-Tc\",\"mt-Ty\",\"mt-Co1\",\"mt-Ts1\",\"mt-Td\",\"mt-Co2\",\"mt-Tk\",\"mt-Atp8\",\"mt-Atp6\",\"mt-Co3\",\"mt-Tg\",\"mt-Nd3\",\"mt-Tr\",\"mt-Nd4\",\"mt-Th\",\"mt-Ts2\",\"mt-Tl2\",\"mt-Nd5\",\"mt-Nd6\",\"mt-Te\",\"mt-Cytb\",\"mt-Tt\",\"mt-Tp\",\"mt-Nd4l\",\"MT-ND6\",\"MT-CO2\",\"MT-CYB\",\"MT-ND2\",\"MT-ND5\",\"MT-CO1\",\"MT-ND3\",\"MT-ND4\",\"MT-ND1\",\"MT-ATP6\",\"MT-CO3\",\"MT-TL1\",\"MT-TF\",\"MT-TV\",\"MT-RNR2\",\"MT-TI\",\"MT-TQ\",\"MT-TM\",\"MT-TW\",\"MT-TA\",\"MT-TN\",\"MT-TC\",\"MT-TY\",\"MT-TS1\",\"MT-TD\",\"MT-TK\",\"MT-TG\",\"MT-TR\",\"MT-TH\",\"MT-TS2\",\"MT-TL2\",\"MT-TE\",\"MT-TT\",\"MT-TP\",\"MT-RNR1\",\"MT-ND4L\",\"MT-ATP8\"]);\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as inputs from \"./_inputs.js\";\nimport { mito } from \"./mito.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nfunction rawCompute(args) {\n    utils.freeCache(cache.raw);\n    var mat = inputs.fetchCountMatrix();\n\n    // TODO: add more choices.\n    var nsubsets = 1;\n    var subsets = utils.allocateCachedArray(mat.numberOfRows() * nsubsets, \"Uint8Array\", cache);\n    subsets.fill(0);\n\n    var gene_info = inputs.fetchGenes();\n    var sub_arr = subsets.array();\n    for (const [key, val] of Object.entries(gene_info)) {\n        if (args.use_mito_default) {\n            val.forEach((x, i) => {\n                if (mito.symbol.has(x) || mito.ensembl.has(x)) {\n                    sub_arr[i] = 1;\n                }\n            });\n        } else {\n            var lower_mito = args.mito_prefix.toLowerCase();\n            val.forEach((x, i) => {\n                if(x.toLowerCase().startsWith(lower_mito)) {\n                    sub_arr[i] = 1;\n                }\n            });\n        }\n    }\n\n    var mat = inputs.fetchCountMatrix();\n\n    cache.raw = scran.computePerCellQCMetrics(mat, subsets);\n    delete cache.reloaded;\n    return;\n}\n\nfunction fetchResults() {\n    var data = {};\n    if (\"reloaded\" in cache) {\n        var qc_output = cache.reloaded;\n        data.sums = qc_output.sums.slice();\n        data.detected = qc_output.detected.slice();\n        data.proportion = qc_output.proportion.slice();\n    } else {\n        var qc_output = cache.raw;\n        data.sums = qc_output.sums();\n        data.detected = qc_output.detected();\n        data.proportion = qc_output.subsetProportions(0);\n    }\n    return data;\n}\n\nexport function compute(args) {\n    if (!inputs.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        rawCompute(args);\n        parameters = args;\n        changed = true;\n    }\n    return;\n}\n\nexport function results() {\n    var data = fetchResults();\n\n    var ranges = {};\n    ranges.sums = utils.computeRange(data.sums);\n    ranges.detected = utils.computeRange(data.detected);\n    ranges.proportion = utils.computeRange(data.proportion);\n\n    return { \n        \"data\": data, \n        \"ranges\": ranges \n    };\n}\n\nexport function serialize() {\n    return {\n      \"parameters\": parameters,\n      \"contents\": fetchResults()\n    };\n}\n\nexport function unserialize(saved) {\n    /* TODO: reconstutite a fully-formed QCMetrics object so that\n     * fetchQCMetrics() doesn't have to recompute it.\n     */\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\nexport function fetchQCMetrics() {\n    if (\"reloaded\" in cache) {\n        rawCompute();\n    }\n    return cache.raw;\n}\n\nexport function fetchSums({ unsafe = true } = {}) {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.sums;\n    } else {\n        // Unsafe, because we're returning a raw view into the Wasm heap,\n        // which might be invalidated upon further allocations.\n        return cache.raw.sums({ copy: !unsafe });\n    }\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as metrics from \"./_qc_metrics.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nexport function compute(args) {\n    if (!metrics.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        utils.freeCache(cache.raw);\n        var stats = metrics.fetchQCMetrics();\n\n        cache.raw = scran.computePerCellQCFilters(stats, { numberOfMADs: args.nmads });\n\n        utils.freeReloaded(cache);\n        changed = true;\n        parameters = args;\n    }\n    return;\n}\n\nexport function results() {\n    let data;\n    if (\"reloaded\" in cache) {\n        data = {\n            \"sums\": cache.reloaded.sums,\n            \"detected\": cache.reloaded.detected,\n            \"proportion\": cache.reloaded.proportion\n        };\n    } else {\n        var obj = cache.raw;\n        data = {\n            \"sums\": obj.thresholdsSums()[0],\n            \"detected\": obj.thresholdsDetected()[0],\n            \"proportion\": obj.thresholdsSubsetProportions(0)[0] // TODO: generalize...\n        };\n    }\n    return data;\n}\n\nexport function serialize() {\n    var contents = results();\n    contents.discards = fetchDiscards();\n    return {\n        \"parameters\": parameters,\n        \"contents\": contents\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n\n    utils.freeReloaded(cache);\n    cache.reloaded = saved.contents;\n\n    var tmp = new scran.Uint8WasmArray(cache.reloaded.discards.length);\n    tmp.set(cache.reloaded.discards);\n    cache.reloaded.discards = tmp;\n    \n    return;\n}\n\nexport function fetchDiscardsAsWasmArray() {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.discards;        \n    } else {\n        var tmp = cache.raw.discardOverall({ copy: false });\n        return new scran.Uint8WasmArray(tmp.length, tmp.byteOffset);\n    }\n}\n\nexport function fetchDiscards({ unsafe = false } = {}) {\n    var out;\n    if (\"reloaded\" in cache) {\n        out = cache.reloaded.discards.array();\n    } else {\n        out = cache.raw.discardOverall();\n    }\n\n    if (unsafe) {\n        // Unsafe, because we're returning a raw view into the Wasm heap,\n        // which might be invalidated upon further allocations.\n        return out;\n    } else {\n        return out.slice();\n    }\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as inputs from \"./_inputs.js\";\nimport * as thresholds from \"./_qc_thresholds.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nfunction rawCompute() {\n    utils.freeCache(cache.matrix);\n    var mat = inputs.fetchCountMatrix();\n\n    var disc = thresholds.fetchDiscardsAsWasmArray();\n    cache.matrix = scran.filterCells(mat, disc);\n\n    delete cache.reloaded;\n    return;\n}\n\nexport function compute(args) {\n    if (!inputs.changed && !thresholds.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        rawCompute();\n        parameters = args;\n        changed = true;\n    }\n    return;\n}\n   \nexport function results() {\n    return {\n      \"retained\": fetchRetained()\n    };\n}\n\nexport function serialize() {\n    return {\n        \"parameters\": parameters,\n        \"contents\": results()\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n\n    // Precomputing this for easier retrieval later.\n    var discards = thresholds.fetchDiscards({ unsafe: true });\n    var retained = 0;\n    for (const i of discards) {\n        if (i == 0) {\n            retained++;\n        }\n    }\n    cache.reloaded.retained = retained;\n    return;\n}\n\nexport function fetchFilteredMatrix() {\n    if (\"reloaded\" in cache) {\n        rawCompute();\n    }\n    return cache.matrix;    \n}\n\nexport function fetchRetained() {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.retained;\n    } else {\n        return cache.matrix.numberOfColumns();\n    }\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as thresholds from \"./_qc_thresholds.js\";\nimport * as filter from \"./_qc_filter.js\";\nimport * as metrics from \"./_qc_metrics.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nfunction rawCompute() {\n    var mat = filter.fetchFilteredMatrix();\n    var buffer = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", cache);\n\n    // Better not have any more allocations in between now and filling of size_factors!\n    var sums = metrics.fetchSums({ unsafe: true });\n    var discards = thresholds.fetchDiscards({ unsafe: true });\n\n    // Reusing the totals computed earlier.\n    var size_factors = buffer.array();\n    var j = 0;\n    for (var i = 0; i < discards.length; ++i) {\n        if (!discards[i]) {\n            size_factors[j] = sums[i];\n            j++;\n        }\n    }\n\n    if (j != mat.numberOfColumns()) {\n        throw \"normalization and filtering are not in sync\";\n    }\n\n    utils.freeCache(cache.matrix);\n    cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer });\n\n    delete cache.reloaded;\n    return;\n}\n\nexport function compute(args) {\n    if (!metrics.changed && !filter.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        rawCompute();\n        parameters = args;\n        changed = true;\n    }\n    return;\n}\n\nexport function results() {\n    return {};\n}\n\nexport function serialize() {\n    return {\n        \"parameters\": parameters,\n        \"contents\": results()\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\nexport function fetchNormalizedMatrix() {\n    if (\"reloaded\" in cache) {\n        rawCompute();\n    }\n    return cache.matrix;\n}\n\nexport function fetchExpression(index) {\n    var mat = fetchNormalizedMatrix();\n    var buffer = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", cache); // re-using the buffer.\n    mat.row(index, { buffer: buffer });\n    return buffer.slice();\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as normalization from \"./_normalization.js\";\n  \nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nfunction spawnStats() {\n    var model_output = cache.raw;\n    return {\n        \"means\": model_output.means(),\n        \"vars\": model_output.variances(),\n        \"fitted\": model_output.fitted(),\n        \"resids\": model_output.residuals()\n    };\n}\n\nexport function compute(args) {\n    if (!normalization.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        var mat = normalization.fetchNormalizedMatrix();\n        cache.raw = scran.modelGeneVar(mat, { span: args.span });\n\n        cache.sorted_residuals = cache.raw.residuals().slice(); // a separate copy.\n        cache.sorted_residuals.sort();\n\n        parameters = args;\n        delete cache.reloaded;\n        changed = true;\n    }\n    return;\n}\n\nexport function results() {\n    if (\"reloaded\" in cache) {\n        return {\n            \"means\": cache.reloaded.means.slice(),\n            \"vars\": cache.reloaded.vars.slice(),\n            \"fitted\": cache.reloaded.fitted.slice(),\n            \"resids\": cache.reloaded.resids.slice()\n        };\n    } else {\n        return spawnStats();\n    }\n}\n\nexport function serialize() {\n    return { \n        \"parameters\": parameters,\n        \"contents\": results()\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    cache.sorted_residuals = cache.reloaded.resids.slice();\n    cache.sorted_residuals.sort();\n    return;\n}\n\nexport function fetchSortedResiduals() {\n    return cache.sorted_residuals;\n}\n\nexport function fetchResiduals({ unsafe = false } = {}) {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.resids;\n    } else {\n        return cache.raw.residuals({ copy: !unsafe });\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./_utils.js\";\nimport * as normalization from \"./_normalization.js\";\nimport * as variance from \"./_model_gene_var.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nfunction fetchPCsAsWasmArray() {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.pcs;\n    } else {\n        let tmp = cache.raw.principalComponents({ copy: false });\n        return new scran.Float64WasmArray(tmp.length, tmp.byteOffset);\n    }\n}\n\nexport function compute(args) {\n    if (!normalization.changed && !variance.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        // Choosing the highly variable genes.\n        var sorted_resids = variance.fetchSortedResiduals();\n        var threshold_at = sorted_resids[sorted_resids.length - args.num_hvgs];\n\n        var mat = normalization.fetchNormalizedMatrix();\n        var sub = utils.allocateCachedArray(mat.numberOfRows(), \"Uint8Array\", cache);\n        var unsorted_resids = variance.fetchResiduals({ unsafe: true });\n        sub.array().forEach((element, index, array) => {\n            array[index] = unsorted_resids[index] >= threshold_at;\n        });\n\n        // Actually performing the PCA.\n        utils.freeCache(cache.raw);\n        cache.raw = scran.runPCA(mat, { features: sub, numberOfPCs: args.num_pcs });\n\n        utils.freeReloaded(cache);\n        changed = true;\n        parameters = args;\n    }\n    return;\n}\n\nexport function results() {\n    var var_exp;\n\n    if (\"reloaded\" in cache) {\n        var_exp = cache.reloaded.var_exp.slice();\n    } else {\n        var pca_output = cache.raw;\n        var_exp = pca_output.varianceExplained();\n        var total_var = pca_output.totalVariance();\n        var_exp.forEach((x, i) => {\n            var_exp[i] = x/total_var;\n        });\n    }\n\n    return { \"var_exp\": var_exp };\n}\n\nexport function serialize() {\n    var to_save = results();\n    to_save.pcs = fetchPCsAsWasmArray().slice();\n    return {\n      \"parameters\": parameters,\n      \"contents\": to_save\n    };\n}\n \nexport function unserialize(saved) {\n    parameters = saved.parameters;\n\n    utils.freeReloaded(cache);\n    cache.reloaded = saved.contents;\n\n    var tmp = new scran.Float64WasmArray(cache.reloaded.pcs.length);\n    tmp.set(cache.reloaded.pcs);\n    cache.reloaded.pcs = tmp;\n    return;\n}\n\nexport function fetchPCs() {\n    var pcs = fetchPCsAsWasmArray();\n    return {\n        \"pcs\": pcs,\n        \"num_pcs\": parameters.num_pcs,\n        \"num_obs\": pcs.length / parameters.num_pcs\n    };\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./_utils.js\";\nimport * as pca from \"./_pca.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nexport function rawCompute(args) {\n    utils.freeCache(cache.raw);\n    var pcs = pca.fetchPCs();\n    cache.raw = scran.buildNeighborSearchIndex(pcs.pcs, { numberOfDims: pcs.num_pcs, numberOfCells: pcs.num_obs });\n    delete cache.reloaded;\n    return;\n}\n\nexport function compute(args) {\n    if (!pca.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        rawCompute(args);\n        parameters = args;\n        changed = true;\n    }\n    return;\n}\n\nexport function results() {\n    return {};\n}\n\nexport function serialize() {\n    return {\n      \"parameters\": parameters,\n      \"contents\": results()\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\nexport function fetchIndex() {\n    if (\"reloaded\" in cache) {\n        rawCompute(parameters);\n    }\n    return cache.raw;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./_utils.js\";\nimport * as index from \"./_neighbor_index.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nexport function rawCompute(args) {\n    utils.freeCache(cache.raw);\n    var nn_index = index.fetchIndex();\n    cache.raw = scran.findNearestNeighbors(nn_index, args.k);\n    delete cache.reloaded;\n    return;\n}\n\nexport function compute(args) {\n    if (!index.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        rawCompute(args);\n        parameters = args;\n        changed = true;\n    }\n    return;\n}\n\nexport function results() {\n    return {};\n}\n\nexport function serialize() {\n    return {\n        \"parameters\": parameters,\n        \"contents\": results()\n    };\n};\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\nexport function fetchNeighbors() {\n    if (\"reloaded\" in cache) {\n        rawCompute(parameters);\n    }\n    return cache.raw;\n}\n","import * as scran from \"scran.js\";\nimport * as neighbors from \"./_snn_neighbors.js\";\nimport * as utils from \"./_utils.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nfunction rawCompute(args) {\n    utils.freeCache(cache.raw);\n    var res = neighbors.fetchNeighbors();\n    cache.raw = scran.buildSNNGraph(res, { scheme: args.scheme });\n    delete cache.reloaded;\n    return;\n}\n\nexport function compute(args) {\n    if (!neighbors.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        rawCompute(args);\n        parameters = args;\n        changed = true;\n    }\n    return;\n}\n\nexport function results() {\n    return {};\n}\n\nexport function serialize() {\n    return {\n        \"parameters\": parameters,\n        \"contents\": results()\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\nexport function fetchGraph() {\n    if (\"reloaded\" in cache) {\n        rawCompute(parameters);\n    }\n    return cache.raw;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as graph from \"./_snn_graph.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nexport function fetchClustersAsWasmArray() {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.clusters;\n    } else {\n        var tmp = cache.raw.membership({ copy: false });\n        return new scran.Int32WasmArray(tmp.length, tmp.byteOffset);\n    }\n}\n\nexport function compute(args) {\n    if (!graph.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        utils.freeCache(cache.raw);\n        var g = graph.fetchGraph();\n        cache.raw = scran.clusterSNNGraph(g, { resolution: args.resolution });\n\n        parameters = args;\n        changed = true;\n        utils.freeReloaded(cache);\n    }\n    return;\n}\n\nexport function results() {\n    var clusters = fetchClustersAsWasmArray();\n    return { \"clusters\": clusters.slice() };\n}\n\nexport function serialize() {\n    return {\n      \"parameters\": parameters,\n      \"contents\": results()\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n\n    utils.freeReloaded(cache);\n    cache.reloaded = saved.contents;\n\n    var out = new scran.Int32WasmArray(cache.reloaded.clusters.length);\n    out.set(cache.reloaded.clusters);\n    cache.reloaded.clusters = out;\n\n    return;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./_utils.js\";\nimport * as cluster from \"./_snn_cluster.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\n/** Standard functions **/\nexport function compute(args) {\n    changed = true;\n    \n    if (!utils.changedParameters(parameters, args)) {\n        if (args.method == \"snn_graph\" && !cluster.changed) {\n            changed = false;\n        }\n    }\n\n    if (changed) {\n        delete cache.reloaded;\n        parameters = args;\n        changed = true;\n    }\n    \n    return;\n}\n\nexport function results() {\n    return {};\n}\n\nexport function serialize() {\n    return {\n        \"parameters\": parameters,\n        \"contents\": results()\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\n/** Non-standard functions **/\nexport function fetchClustersAsWasmArray() {\n//    if (parameters.method == \"snn_graph\") {\n    return cluster.fetchClustersAsWasmArray(); // really the only option right now.\n//  }\n}\n","import * as scran from \"scran.js\";\nimport * as index from \"./_neighbor_index.js\";\nimport * as utils from \"./_utils.js\";\n\nexport function computeNeighbors(k) {\n    var nn_index = index.fetchIndex();\n\n    var output = { \"num_obs\": nn_index.numberOfCells() };\n    var results = null, rbuf = null, ibuf = null, dbuf = null;\n    try {\n        results = scran.findNearestNeighbors(nn_index, k);\n\n        rbuf = new scran.Int32WasmArray(results.numberOfCells());\n        ibuf = new scran.Int32WasmArray(results.size());\n        dbuf = new scran.Float64WasmArray(results.size());\n\n        results.serialize({ runs: rbuf, indices: ibuf, distances: dbuf });\n        output[\"size\"] = results.size();\n        output[\"runs\"] = rbuf.array().slice();\n        output[\"indices\"] = ibuf.array().slice();\n        output[\"distances\"] = dbuf.array().slice();\n\n    } finally {\n        if (results !== null) {\n            results.free();\n        }\n        if (rbuf !== null) {\n            rbuf.free();\n        }\n        if (ibuf !== null) {\n            ibuf.free();\n        }\n        if (dbuf !== null) {\n            dbuf.free();\n        }\n    }\n\n    return output;\n}\n\nexport function sendTask(worker, payload, cache, transferrable = []) {\n    var i = cache.counter;\n    var p = new Promise((resolve, reject) => {\n        cache.promises[i] = { \"resolve\": resolve, \"reject\": reject };\n    });\n    cache.counter++;\n    payload.id = i;\n    worker.postMessage(payload, transferrable);\n    return p;\n}\n\nexport function initializeWorker(worker, cache) {\n    worker.onmessage = function (msg) {\n        var type = msg.data.type;\n        if (type.endsWith(\"_iter\")) {\n            postMessage({\n                \"type\": type,\n                \"resp\": {\n                    \"x\": msg.data.x,\n                    \"y\": msg.data.y,\n                    \"iteration\": msg.data.iteration\n                },\n            }, [msg.data.x.buffer, msg.data.y.buffer]);\n            return;\n        }\n  \n        var id = msg.data.id;\n        var fun = cache.promises[id];\n        if (type == \"error\") {\n            fun.reject(msg.data.error);\n        } else {\n            fun.resolve(msg.data.data);\n        }\n        delete cache.promises[id];\n    };\n    return sendTask(worker, { \"cmd\": \"INIT\" }, cache);\n}\n\nexport function runWithNeighbors(worker, args, nn_out, cache) {\n    var run_msg = {\n        \"cmd\": \"RUN\",\n        \"params\": args \n    };\n\n    var transferrable = [];\n    if (nn_out !== null) {\n        run_msg.neighbors = nn_out;\n        utils.extractBuffers(nn_out, transferrable);\n    }\n\n    return sendTask(worker, run_msg, cache, transferrable);\n}\n\nexport function retrieveCoordinates(worker, cache) {\n    if (\"reloaded\" in cache) {\n        // Buffers are transferred to the main thread, so we need to make sure we\n        // clone it so that we don't lose our master copy.\n        var copy = { ...cache.reloaded };\n        copy.x = copy.x.slice();\n        copy.y = copy.y.slice();\n        return new Promise(resolve => resolve(copy));\n    } else {\n        return cache.run.then(x => sendTask(worker, { \"cmd\": \"FETCH\" }, cache));\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as vizutils from \"./_utils_viz_parent.js\";\nimport * as index from \"./_neighbor_index.js\";\nimport * as utils from \"./_utils.js\";\n\nvar cache = { \"counter\": 0, \"promises\": {} };\nvar parameters = {};\nvar worker = null;\n\nexport function initialize() {\n    worker = new Worker(new URL(\"./tsne.worker.js\", import.meta.url), { type: \"module\" });\n    return vizutils.initializeWorker(worker, cache);\n}\n\nexport var changed = false;\n\nfunction core(args, reneighbor) {\n    var nn_out = null;\n    if (reneighbor) {\n        var k = scran.perplexityToNeighbors(args.perplexity);\n        nn_out = vizutils.computeNeighbors(k);\n    }\n\n    // This returns a promise but the message itself is sent synchronously,\n    // which is important to ensure that the t-SNE runs in its worker in\n    // parallel with other analysis steps. Do NOT put the runWithNeighbors\n    // call in a .then() as this may defer the message sending until \n    // the current thread is completely done processing.\n    cache.run = vizutils.runWithNeighbors(worker, args, nn_out, cache);\n    return;\n}\n\nexport function compute(args) {\n    if (!index.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n        return;\n    }\n\n    var reneighbor = index.changed || utils.changedParameters(parameters.perplexity, args.perplexity);\n    core(args, reneighbor);\n\n    parameters = args;\n    delete cache.reloaded;\n    changed = true;\n}\n\n\nexport function results() {\n    return vizutils.retrieveCoordinates(worker, cache);\n}\n\nexport async function serialize() {\n    var contents = await vizutils.retrieveCoordinates(worker, cache);\n    return {\n        \"parameters\": parameters,\n        \"contents\": contents\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\nexport function animate() {\n    if (\"reloaded\" in cache) {\n        var param_copy = { ...parameters };\n        param_copy.animate = true;\n        core(param_copy, true);\n        delete cache.reloaded;\n\n        // Mimicking the response from the re-run.\n        return cache.run\n            .then(contents => {\n                return {\n                    \"type\": \"tsne_rerun\",\n                    \"data\": { \"status\": \"SUCCESS\" }\n                };\n            });\n    } else {\n        return vizutils.sendTask(worker, { \"cmd\": \"RERUN\" }, cache);\n    }\n}\n","import * as vizutils from \"./_utils_viz_parent.js\";\nimport * as index from \"./_neighbor_index.js\";\nimport * as utils from \"./_utils.js\";\n\nvar cache = { \"counter\": 0, \"promises\": {} };\nvar parameters = {};\nvar worker = null;\n\nexport function initialize() {\n    worker = new Worker(new URL(\"./umap.worker.js\", import.meta.url), { type: \"module\" });\n    cache.initialized = vizutils.initializeWorker(worker, cache);\n}\n\nexport var changed = false;\n\nfunction core(args, reneighbor) {\n    var nn_out = null;\n    if (reneighbor) {\n        nn_out = vizutils.computeNeighbors(args.num_neighbors);\n    }\n\n    // This returns a promise but the message itself is sent synchronously,\n    // which is important to ensure that the UMAP runs in its worker in\n    // parallel with other analysis steps. Do NOT put the runWithNeighbors\n    // call in a .then() as this may defer the message sending until \n    // the current thread is completely done processing.\n    cache.run = vizutils.runWithNeighbors(worker, args, nn_out, cache);\n    return;\n}\n\nexport function compute(args) {\n    if (!index.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n        return;\n    }\n\n    var reneighbor = index.changed || utils.changedParameters(parameters.num_neighbors, args.num_neighbors);\n    core(args, reneighbor);\n\n    parameters = args;\n    delete cache.reloaded;\n    changed = true;\n}\n\nexport function results() {\n    return vizutils.retrieveCoordinates(worker, cache);\n}\n\nexport async function serialize() {\n    var contents = await vizutils.retrieveCoordinates(worker, cache);\n    return {\n        \"parameters\": parameters,\n        \"contents\": contents\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\nexport function animate() {\n    if (\"reloaded\" in cache) {\n        var param_copy = { ...parameters };\n        param_copy.animate = true;\n        core(param_copy, true);\n        delete cache.reloaded;\n  \n        // Mimicking the response from the re-run.\n        return cache.run\n            .then(contents => { \n                return {\n                    \"type\": \"umap_rerun\",\n                    \"data\": { \"status\": \"SUCCESS\" }\n                };\n            });\n    } else {\n        return vizutils.sendTask(worker, { \"cmd\": \"RERUN\" }, cache);\n    }\n}\n","export function serializeGroupStats(obj, group) {\n    return {\n        \"means\": obj.means(group),\n        \"detected\": obj.detected(group),\n        \"lfc\": {\n            \"min\": obj.lfc(group, { summary: 0 }),\n            \"mean\": obj.lfc(group, { summary: 1 }),\n            \"min-rank\": obj.lfc(group, { summary: 4 })\n        },\n        \"delta_detected\": {\n            \"min\": obj.deltaDetected(group, { summary: 0 }),\n            \"mean\": obj.deltaDetected(group, { summary: 1 }),\n            \"min-rank\": obj.deltaDetected(group, { summary: 4 })\n        },\n        \"cohen\": {\n            \"min\": obj.cohen(group, { summary: 0 }),\n            \"mean\": obj.cohen(group, { summary: 1 }),\n            \"min-rank\": obj.cohen(group, { summary: 4 })\n        },\n        \"auc\": {\n            \"min\": obj.auc(group, { summary: 0 }),\n            \"mean\": obj.auc(group, { summary: 1 }),\n            \"min-rank\": obj.auc(group, { summary: 4 })\n        }\n    };\n}\n\n/*\n * Helper function to retrieve marker statistics for plotting.\n * This is used both for cluster-specific markers as well as the\n * DE genes that are computed for a custom selection vs the rest.\n */\nexport function fetchGroupResults(results, reloaded, rank_type, group) {\n    if (!rank_type || rank_type === undefined) {\n        rank_type = \"cohen-min-rank\";\n    }\n    var use_reloaded = (reloaded !== undefined);\n\n    var ordering;\n    {\n        // Choosing the ranking statistic. Do NOT do any Wasm allocations\n        // until 'ranking' is fully consumed!\n        let ranking;\n        let increasing = false;\n      \n        if (use_reloaded) {\n            let summary = \"mean\";\n            if (rank_type.match(/-min$/)) {\n                summary = \"min\";\n            } else if (rank_type.match(/-min-rank$/)) {\n                increasing = true;\n                summary = \"min-rank\";\n            }\n      \n            let effect;\n            if (rank_type.match(/^cohen-/)) {\n                effect = \"cohen\";\n            } else if (rank_type.match(/^auc-/)) {\n                effect = \"auc\";\n            } else if (rank_type.match(/^lfc-/)) {\n                effect = \"lfc\";\n            } else if (rank_type.match(/^delta-d-/)) {\n                effect = \"delta_detected\";\n            } else {\n                throw \"unknown rank type '\" + rank_type + \"'\";\n            }\n      \n            ranking = reloaded[group][effect][summary];\n        } else {\n            let index = 1;\n            if (rank_type.match(/-min$/)) {\n                index = 0;\n            } else if (rank_type.match(/-min-rank$/)) {\n                increasing = true;\n                index = 4;\n            }\n\n            if (rank_type.match(/^cohen-/)) {\n                ranking = results.cohen(group, { summary: index, copy: false });\n            } else if (rank_type.match(/^auc-/)) {\n                ranking = results.auc(group, { summary: index, copy: false });\n            } else if (rank_type.match(/^lfc-/)) {\n                ranking = results.lfc(group, { summary: index, copy: false });\n            } else if (rank_type.match(/^delta-d-/)) {\n                ranking = results.deltaDetected(group, { summary: index, copy: false });\n            } else {\n                throw \"unknown rank type '\" + rank_type + \"'\";\n            }\n        }\n      \n        // Computing the ordering based on the ranking statistic.\n        ordering = new Int32Array(ranking.length);\n        for (var i = 0; i < ordering.length; i++) {\n            ordering[i] = i;\n        }\n        if (increasing) {\n            ordering.sort((f, s) => (ranking[f] - ranking[s]));\n        } else {\n            ordering.sort((f, s) => (ranking[s] - ranking[f]));\n        }\n    }\n  \n    // Apply that ordering to each statistic of interest.\n    var reorder = function(stats) {\n        var thing = new Float64Array(stats.length);\n        for (var i = 0; i < ordering.length; i++) {\n            thing[i] = stats[ordering[i]];\n        }\n        return thing;\n    };\n  \n    var stat_detected, stat_mean, stat_lfc, stat_delta_d;\n    if (use_reloaded) {\n        var current = reloaded[group];\n        stat_mean = reorder(current.means);\n        stat_detected = reorder(current.detected);\n        stat_lfc = reorder(current.lfc[\"mean\"]);\n        stat_delta_d = reorder(current.delta_detected[\"mean\"]);\n    } else {\n        stat_detected = reorder(results.detected(group, { copy: false }));\n        stat_mean = reorder(results.means(group, { copy: false }));\n        stat_lfc = reorder(results.lfc(group, { summary: 1, copy: false }));\n        stat_delta_d = reorder(results.deltaDetected(group, { summary: 1, copy: false }));\n    }\n  \n    return {\n        \"ordering\": ordering,\n        \"means\": stat_mean,\n        \"detected\": stat_detected,\n        \"lfc\": stat_lfc,\n        \"delta_detected\": stat_delta_d\n    };\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as normalization from \"./_normalization.js\";\nimport * as choice from \"./_choose_clustering.js\";\nimport * as markers from \"./_utils_markers.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nexport function compute(args) {\n    if (!normalization.changed && !choice.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        utils.freeCache(cache.raw);\n        var mat = normalization.fetchNormalizedMatrix();\n        var clusters = choice.fetchClustersAsWasmArray();\n\n        cache.raw = scran.scoreMarkers(mat, clusters);\n\n        parameters = args;\n        delete cache.reloaded;\n        changed = true;\n    }\n    return;\n}\n\nexport function results() {\n    return {};\n}\n\nexport function serialize() {\n    var contents;\n    if (\"reloaded\" in cache) {\n        contents = cache.reloaded;\n    } else {\n        var contents = [];\n        var num = cache.raw.numberOfGroups();\n        for (var i = 0; i < num; i++) {\n            contents.push(markers.serializeGroupStats(cache.raw, i));\n        }\n    }\n    return {\n        \"parameters\": parameters,\n        \"contents\": contents\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\nexport function fetchGroupResults(rank_type, group) {\n    return markers.fetchGroupResults(cache.raw, cache.reloaded, rank_type, group); \n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./_utils.js\";\nimport * as filter from \"./_qc_filter.js\";\nimport * as normalization from \"./_normalization.js\";\nimport * as markers from \"./_utils_markers.js\";\n\nvar cache = { \"results\": {} };\nvar parameters = { \"selections\": {} };\n\nexport var changed = false;\n\nexport function compute(args) {\n    /* If the QC filter was re-run, all of the selections are invalidated as\n     * the identity of the indices may have changed.\n     */\n    if (filter.changed) {\n        parameters.selections = {};\n        for (const [key, val] of Object.entries(cache.results)) {\n            utils.freeCache(val.raw);                    \n        }\n        cache.results = {};\n    }\n\n    /*\n     * Technically we would need to re-run detection on the existing selections\n     * if the normalization changed but the QC was the same. In practice, this\n     * never happens, so we'll deal with it later.\n     */\n    \n    changed = true;\n    return;\n}\n\nexport function results() {\n    return {};\n}\n\nexport function serialize() {\n    var results = {};\n    \n    for (const [key, val] of Object.entries(cache.results)) {\n        if (\"reloaded\" in val) {\n            results[key] = val.reloaded;\n        } else {\n            results[key] = markers.serializeGroupStats(val.raw, 1);\n        }\n    }\n    \n    return {\n        \"parameters\": parameters,\n        \"contents\": { \"results\": results }\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    for (const [key, val] of Object.entries(saved.contents)) {\n        cache.results[key] = { \"reloaded\": val };\n    }\n    return;\n}\n\nexport function addSelection(id, selection) {\n    var mat = normalization.fetchNormalizedMatrix();\n\n    var buffer = utils.allocateCachedArray(mat.numberOfColumns(), \"Int32Array\", cache);\n    buffer.fill(0);\n    var tmp = buffer.array();\n    selection.forEach(element => { tmp[element] = 1; });\n\n    // Assumes that we have at least one cell in and outside the selection!\n    var res = scran.scoreMarkers(mat, buffer); \n  \n    // Removing previous results, if there were any.\n    if (id in cache.results) {\n        utils.freeCache(cache.results[id].raw);\n        delete cache.results[id];\n    }\n  \n    cache.results[id] = { \"raw\": res };\n    parameters.selections[id] = selection;\n}\n\nexport function removeSelection(id) {\n    utils.freeCache(cache.results[id].raw);\n    delete cache.results[id];\n    delete parameters.selections[id];\n}\n\nexport function fetchResults(id, rank_type) {\n    var current = cache.results[id];\n    return markers.fetchGroupResults(current.raw, current.reloaded, rank_type, 1); \n};\n","var kanaDB;\nvar init = null;\n\nexport function initialize() {\n    init = new Promise(resolve => {\n        // initialize database on worker creation\n        kanaDB = indexedDB.open(\"KanaDB\", 2);\n\n        kanaDB.onupgradeneeded = (e) => {\n            var kanaDBClient = e.target.result;\n\n            // Currently purging all existing stores when the version is updated.\n            // At some point we may add a more sophisticated upgrade mechanism.\n            try {\n                kanaDBClient.deleteObjectStore(\"analysis\");\n            } catch (e) {}\n            try {\n                kanaDBClient.deleteObjectStore(\"analysis_meta\");\n            } catch (e) {}\n            try {\n                kanaDBClient.deleteObjectStore(\"file\");\n            } catch (e) {}\n            try {\n                kanaDBClient.deleteObjectStore(\"file_meta\");\n            } catch (e) {}\n\n            kanaDBClient.createObjectStore(\"analysis\", { keyPath: 'id' });\n            kanaDBClient.createObjectStore(\"analysis_meta\", { keyPath: 'id' });\n            kanaDBClient.createObjectStore(\"file\", { keyPath: 'id' });\n            kanaDBClient.createObjectStore(\"file_meta\", { keyPath: 'id' });\n        };\n\n        // Send existing stored analyses, if available.\n        kanaDB.onsuccess = () => {\n            getRecordsResolver(resolve);\n        };\n\n        kanaDB.onerror = () => {\n            resolve(null);\n        };\n    });\n\n    return init;\n}\n\nfunction getRecordsResolver(resolve, store = null) {\n    if (store === null) {\n        store = kanaDB.result\n            .transaction([\"analysis_meta\"], \"readonly\")\n            .objectStore(\"analysis_meta\")\n    }\n\n    var allAnalysis = store.getAll();\n\n    allAnalysis.onsuccess = function () {\n        let vals = allAnalysis.result;\n        vals.forEach(x => { delete x.files }); // no need to transfer that.\n        resolve(vals);\n    };\n    allAnalysis.onerror = function () {\n        resolve(null);\n    };\n}\n\n/** Helper functions **/\nasync function loadContent(id, store) {\n    return new Promise(resolve => {\n        let request = store.get(id);\n        request.onsuccess = function () {\n            if (request.result !== undefined) {\n                resolve(request.result);\n            } else {\n                resolve(null);\n            }\n        };\n        request.onerror = function () {\n            resolve(null);\n        };\n    });\n}\n\nfunction allOK(promises) {\n    return Promise.allSettled(promises)\n        .then(vals => {\n            for (const x of vals) {\n                if (!x) {\n                    return false;\n                }\n            }\n            return true;\n        });\n}\n\nexport async function getRecords() {\n    await init;\n    return new Promise(resolve => {\n        getRecordsResolver(resolve);\n    });\n}\n\n/** Functions to save content **/\nexport async function saveFile(id, buffer) {\n    await init;\n    let trans = kanaDB.result.transaction([\"file\", \"file_meta\"], \"readwrite\");\n    let file_store = trans.objectStore(\"file\");\n    let meta_store = trans.objectStore(\"file_meta\");\n\n    var meta = await loadContent(id, meta_store);\n    var refcount;\n    if (meta === null) {\n        refcount = 0;\n    } else {\n        refcount = meta[\"count\"];\n    }\n    refcount++;\n\n    var data_saving = new Promise(resolve => {\n        var putrequest = file_store.put({ \"id\": id, \"payload\": buffer });\n        putrequest.onsuccess = function (event) {\n            resolve(true);\n        };\n        putrequest.onerror = function (event) {\n            resolve(false);\n        };\n    });\n\n    var ref_saving = new Promise(resolve => {\n        meta.count = refcount;\n        var putrequest = meta_store.put(meta);\n        putrequest.onsuccess = function (event) {\n            resolve(true);\n        };\n        putrequest.onerror = function (event) {\n            resolve(false);\n        };\n    });\n\n    return allOK([data_saving, ref_saving])\n};\n\nexport async function saveAnalysis(id, state, files, title) { \n    await init;\n    let trans = kanaDB.result.transaction([\"analysis\", \"analysis_meta\"], \"readwrite\")\n    let analysis_store = trans.objectStore(\"analysis\");\n    let meta_store = trans.objectStore(\"analysis_meta\");\n\n    if (id == null) {\n        let already = await new Promise(resolve => getRecordsResolver(resolve, meta_store));\n        id = String(already.length);\n    }\n\n    var data_saving = new Promise(resolve => {\n        var putrequest = analysis_store.put({ \"id\": id, \"payload\": state });\n        putrequest.onsuccess = function (event) {\n            resolve(true);\n        };\n        putrequest.onerror = function (event) {\n            resolve(false);\n        };\n    });\n\n    var id_saving = new Promise(resolve => {\n        var putrequest = meta_store.put({ \"id\": id, \"files\": files, \"time\": Number(new Date()), \"title\": title });\n        putrequest.onsuccess = function (event) {\n            resolve(true);\n        };\n        putrequest.onerror = function (event) {\n            resolve(false);\n        };\n    });\n\n    if (await allOK([data_saving, id_saving])) {\n        return id;\n    } else {\n        return null;\n    }\n};\n\n/** Functions to load content **/\nexport async function loadFile(id) {\n    await init;\n    let file_store = kanaDB.result\n        .transaction([\"file\"], \"readonly\")\n        .objectStore(\"file\");\n\n    var meta = await loadContent(id, file_store);\n    return meta[\"payload\"];\n}\n\nexport async function loadAnalysis(id) {\n    await init;\n    let analysis_store = kanaDB.result\n        .transaction([\"analysis\"], \"readonly\")\n        .objectStore(\"analysis\");\n    var meta = await loadContent(id, analysis_store);\n    return meta[\"payload\"];\n}\n\n/** Functions to load content **/\nexport async function removeFile(id) {\n    await init;\n    let trans = kanaDB.result.transaction([\"file\", \"file_meta\"], \"readwrite\");\n    let file_store = trans.objectStore(\"file\");\n    let meta_store = trans.objectStore(\"file_meta\");\n\n    var meta = await loadContent(id, meta_store);\n    var refcount = meta[\"count\"];\n    refcount--;\n    var promises = [];\n\n    if (refcount == 0) {\n        promises.push(new Promise(resolve => {\n            let request = file_store.remove(id);\n            request.onerror = function (event) {\n                resolve(false);\n            };\n            request.onsuccess = function (event) {\n                resolve(true);\n            };\n        }));\n        promises.push(new Promise(resolve => {\n            let request = meta_store.delete(id);\n            request.onerror = function (event) {\n                resolve(false);\n            };\n            request.onsuccess = function (event) {\n                resolve(true);\n            };\n        }))\n    } else {\n        promises.push(new Promise(resolve => {\n            meta.count = refcount;\n            let request = meta_store.put(meta);\n            request.onsuccess = function (event) {\n                resolve(true);\n            };\n            request.onerror = function (event) {\n                resolve(false);\n            };\n        }));\n    }\n\n    return allOK(promises);\n}\n\nexport async function removeAnalysis(id) {\n    await init;\n    let trans = kanaDB.result.transaction([\"analysis\", \"analysis_meta\"], \"readwrite\")\n    let analysis_store = trans.objectStore(\"analysis\");\n    let meta_store = trans.objectStore(\"analysis_meta\");\n\n    var promises = [];\n\n    promises.push(new Promise(resolve => {\n        let request = analysis_store.delete(id);\n        request.onsuccess = function (event) {\n            resolve(true);\n        };\n        request.onerror = function (event) {\n            resolve(false);\n        };\n    }));\n\n    // Removing all files as well.\n    var meta = await loadContent(id, meta_store);\n    for (const f of meta[\"files\"]) {\n        promises.push(removeFile(f));\n    }\n\n    promises.push(new Promise(resolve => {\n        let request = meta_store.delete(id);\n        request.onsuccess = function (event) {\n            resolve(true);\n        };\n        request.onerror = function (event) {\n            resolve(false);\n        };\n    }));\n\n    return allOK(promises);\n}\n","import * as scran from \"scran.js\";\nimport * as inputs from \"./_inputs.js\";\nimport * as metrics from \"./_qc_metrics.js\";\nimport * as thresholds from \"./_qc_thresholds.js\";\nimport * as filter from \"./_qc_filter.js\";\nimport * as normalization from \"./_normalization.js\";\nimport * as variance from \"./_model_gene_var.js\";\nimport * as pca from \"./_pca.js\";\nimport * as index from \"./_neighbor_index.js\";\nimport * as cluster_choice from \"./_choose_clustering.js\";\nimport * as snn_cluster from \"./_snn_cluster.js\";\nimport * as snn_graph from \"./_snn_graph.js\";\nimport * as snn_neighbors from \"./_snn_neighbors.js\";\nimport * as tsne from \"./_tsne_monitor.js\";\nimport * as umap from \"./_umap_monitor.js\";\nimport * as cluster_markers from \"./_score_markers.js\";\nimport * as custom_markers from \"./_custom_markers.js\";\nimport * as kana_db from \"./KanaDBHandler.js\";\nimport * as utils from \"./_utils.js\";\nimport * as serialize_utils from \"./_utils_serialize.js\";\n\n/***************************************/\n\nfunction postSuccess_(info, step, message) {\n    var transferable = [];\n    utils.extractBuffers(info, transferable);\n    postMessage({\n        type: `${step}_DATA`,\n        resp: info,\n        msg: \"Success: \" + message\n    }, transferable);\n}\n\nfunction runAllSteps(mode = \"run\", state = null) {\n    var response;\n    if (mode === \"serialize\") {\n        response = {};\n    } else {\n        if (state == null) {\n            throw \"'state' must be supplied if 'mode' is not 'serialize'\";\n        }\n        if (mode === \"unserialize\") {\n            response = { \"params\": {} };\n        }\n    }\n  \n    // Creating helper functions.\n    var postSuccess = function (namespace, step, message) {\n        if (namespace.changed || mode == \"unserialize\") {\n            postSuccess_(namespace.results(), step, message);\n        }\n    }\n  \n    var postSuccessAsync = function (namespace, step, message) {\n        if (namespace.changed || mode == \"unserialize\") {\n            namespace.results()\n                .then(res => {\n                    postSuccess_(res, step, message);\n                });\n        }\n    }\n  \n    var addToObject = function (object, property, value) {\n        if (property in object) {\n            object[property] = { ...object[property], ...value };\n        } else {\n            object[property] = value;\n        }\n    }\n  \n    // Running through all steps.\n    {\n        let step = \"inputs\";\n        if (mode === \"serialize\") {\n            response[step] = inputs.serialize()\n        } else {\n            if (mode == \"run\") {\n                inputs.compute({\n                    \"format\": state.files.format,\n                    \"files\": state.files.files\n                });\n            } else {\n                inputs.unserialize(state[step]);\n                response[\"files\"] = {\n                    \"format\": \"kana\",\n                    \"files\": []\n                };\n            }\n            postSuccess(inputs, step, \"Count matrix loaded\");\n        }\n    }\n  \n    {\n        let step = \"quality_control_metrics\";\n        if (mode === \"serialize\") {\n            response[step] = metrics.serialize();\n        } else {\n            if (mode == \"run\") {\n                metrics.compute({\n                    \"use_mito_default\": state.params.qc[\"qc-usemitodefault\"],\n                    \"mito_prefix\": state.params.qc[\"qc-mito\"]\n                });\n            } else {\n                metrics.unserialize(state[step]);\n                addToObject(response[\"params\"], \"qc\", {\n                    \"qc-usemitodefault\": state[step].parameters.use_mito_default,\n                    \"qc-mito\": state[step].parameters.mito_prefix\n                });\n            }\n            postSuccess(metrics, step, \"QC metrics computed\");\n        }\n    }\n  \n    {\n        let step = \"quality_control_thresholds\";\n        if (mode === \"serialize\") {\n            response[step] = thresholds.serialize();\n        } else {\n            if (mode == \"run\") {\n                thresholds.compute({\n                    \"nmads\": state.params.qc[\"qc-nmads\"]\n                });\n            } else {\n                thresholds.unserialize(state[step]);\n                addToObject(response[\"params\"], \"qc\", {\n                    \"qc-nmads\": state[step].parameters.nmads\n                });\n            }\n            postSuccess(thresholds, step, \"QC thresholds computed\");\n        }\n    }\n  \n    {\n        let step = \"quality_control_filtered\";\n        if (mode == \"serialize\") {\n            response[step] = filter.serialize();\n        } else {\n            if (mode == \"run\") {\n                filter.compute({});\n            } else {\n                filter.unserialize(state[step]);\n            }\n            postSuccess(filter, step, \"QC filtering completed\");\n        }\n    }\n  \n    {\n        let step = \"normalization\";\n        if (mode == \"serialize\") {\n            response[step] = normalization.serialize();\n        } else {\n            if (mode == \"run\") {\n                normalization.compute({});\n            } else {\n                normalization.unserialize(state[step]);\n            }\n            postSuccess(normalization, step, \"Log-normalization completed\");\n        }\n    }\n  \n    {\n        let step = \"feature_selection\";\n        if (mode == \"serialize\") {\n            response[step] = variance.serialize();\n        } else {\n            if (mode == \"run\") {\n                variance.compute({\n                    \"span\": state.params.fSelection[\"fsel-span\"]\n                });\n            } else {\n                variance.unserialize(state[step]);\n                addToObject(response[\"params\"], \"fSelection\", {\n                    \"fsel-span\": state[step].parameters.span\n                });\n            }\n            postSuccess(variance, step, \"Variance modelling completed\");\n        }\n    }\n  \n    {\n        let step = \"pca\";\n        if (mode == \"serialize\") {\n            response[step] = pca.serialize();\n        } else {\n            if (mode == \"run\") {\n                pca.compute({\n                    \"num_hvgs\": state.params.pca[\"pca-hvg\"],\n                    \"num_pcs\": state.params.pca[\"pca-npc\"]\n                });\n            } else {\n                pca.unserialize(state[step]);\n                addToObject(response[\"params\"], \"pca\", {\n                    \"pca-hvg\": state[step].parameters.num_hvgs,\n                    \"pca-npc\": state[step].parameters.num_pcs\n                });\n            }\n            postSuccess(pca, step, \"Principal components analysis completed\");\n        }\n    }\n  \n    {\n        let step = \"neighbor_index\";\n        if (mode == \"serialize\") {\n            response[step] = index.serialize();\n        } else {\n            if (mode == \"run\") {\n                index.compute({\n                    \"approximate\": state.params.cluster[\"clus-approx\"]\n                });\n            } else {\n                index.unserialize(state[step]);\n                addToObject(response[\"params\"], \"cluster\", {\n                    \"clus-approx\": state[step].parameters.approximate\n                });\n            }\n            postSuccess(index, step, \"Neighbor search index constructed\");\n        }\n    }\n\n    // Need to handle promises in serialize(), results() output,\n    // as these are coming from other workers and are inherently async.\n    var tsne_res;\n    {\n        let step = \"tsne\";\n        if (mode == \"serialize\") {\n            tsne_res = tsne.serialize();\n        } else {\n            if (mode == \"run\") {\n                tsne.compute({\n                    \"perplexity\": state.params.tsne[\"tsne-perp\"],\n                    \"iterations\": state.params.tsne[\"tsne-iter\"],\n                    \"animate\": state.params.tsne[\"animate\"]\n                });\n            } else {\n                tsne.unserialize(state[step]);\n                addToObject(response[\"params\"], \"tsne\", {\n                  \"tsne-perp\": state[step].parameters.perplexity,\n                  \"tsne-iter\": state[step].parameters.iterations,\n                  \"animate\": state[step].parameters.animate\n                });\n            }\n            postSuccessAsync(tsne, step, \"t-SNE completed\");\n        }\n    }\n\n    var umap_res;\n    {\n        let step = \"umap\";\n        if (mode == \"serialize\") {\n            umap_res = umap.serialize();\n        } else {\n            if (mode == \"run\") {\n                umap.compute({\n                    \"num_epochs\": state.params.umap[\"umap-epochs\"],\n                    \"num_neighbors\": state.params.umap[\"umap-nn\"],\n                    \"min_dist\": state.params.umap[\"umap-min_dist\"],\n                    \"animate\": state.params.umap[\"animate\"]\n                });\n            } else {\n                umap.unserialize(state[step]);\n                addToObject(response[\"params\"], \"umap\", {\n                    \"num_epochs\": state[step].parameters.num_epochs,\n                    \"num_neighbors\": state[step].parameters.num_neighbors,\n                    \"min_dist\": state[step].parameters.min_dist,\n                    \"animate\": state[step].parameters.animate\n                });\n            }\n            postSuccessAsync(umap, step, \"UMAP completed\");\n        }\n    }\n  \n    // Back to normal programming.\n    {\n        let step = \"snn_find_neighbors\";\n        if (mode == \"serialize\") {\n            response[step] = snn_neighbors.serialize();\n        } else {\n            if (mode == \"run\") {\n                snn_neighbors.compute({\n                    \"k\": state.params.cluster[\"clus-k\"]\n                });\n            } else {\n                snn_neighbors.unserialize(state[step]);\n                addToObject(response[\"params\"], \"cluster\", {\n                    \"clus-k\": state[step].parameters.k\n                });\n            }\n            postSuccess(snn_neighbors, step, \"Shared nearest neighbor search completed\");\n        }\n    }\n  \n    {\n        let step = \"snn_build_graph\";\n        if (mode == \"serialize\") {\n            response[step] = snn_graph.serialize();\n        } else {\n            if (mode == \"run\") {\n                snn_graph.compute({\n                    \"scheme\": state.params.cluster[\"clus-scheme\"]\n                });\n            } else {\n                snn_graph.unserialize(state[step]);\n                addToObject(response[\"params\"], \"cluster\", {\n                    \"clus-scheme\": state[step].parameters.scheme\n                });\n            }\n            postSuccess(snn_graph, step, \"Shared nearest neighbor graph constructed\");\n        }\n    }\n  \n    {\n        let step = \"snn_cluster_graph\";\n        if (mode == \"serialize\") {\n            response[step] = snn_cluster.serialize();\n        } else {\n            if (mode == \"run\") {\n                snn_cluster.compute({\n                    \"resolution\": state.params.cluster[\"clus-res\"]\n                });\n            } else {\n                snn_cluster.unserialize(state[step]);\n                addToObject(response[\"params\"], \"cluster\", {\n                    \"clus-res\": state[step].parameters.resolution\n                });\n            }\n            postSuccess(snn_cluster, step, \"Community detection from SNN graph complete\");\n        }\n    }\n\n    {\n        let step = \"choose_clustering\";\n        if (mode == \"serialize\") {\n            response[step] = cluster_choice.serialize();\n        } else {\n            if (mode == \"run\") {\n                cluster_choice.compute({\n                    \"method\": state.params.cluster[\"clus-method\"]\n                });\n            } else {\n                cluster_choice.unserialize(state[step]);\n                addToObject(response[\"params\"], \"cluster\", {\n                    \"clus-method\": state[step].parameters.method\n                });\n            }\n            postSuccess(cluster_choice, step, \"Clustering of interest chosen\");\n        }\n    }\n\n    {\n        let step = \"marker_detection\";\n        if (mode == \"serialize\") {\n            response[step] = cluster_markers.serialize();\n        } else {\n            if (mode == \"run\") {\n                cluster_markers.compute({});\n            } else {\n                cluster_markers.unserialize(state[step]);\n            }\n            postSuccess(cluster_markers, step, \"Marker detection complete\");\n        }\n    }\n\n    {\n        let step = \"custom_marker_management\";\n        if (mode == \"serialize\") {\n            response[step] = custom_markers.serialize();\n        } else {\n            if (mode == \"run\") {\n                custom_markers.compute({});\n            } else {\n                custom_markers.unserialize(state[step]);\n            }\n            postSuccess(custom_markers, step, \"Pruning of custom markers finished\");\n        }\n    }\n  \n    if (mode == \"serialize\") {\n        return Promise.all([tsne_res, umap_res])\n            .then(done => {\n                response.tsne = done[0];\n                response.umap = done[1];\n                return response;\n            });\n    } else {\n        return response;\n    }\n}\n\n/***************************************/\n\nvar loaded;\nonmessage = function (msg) {\n    const payload = msg.data;\n    if (payload.type == \"INIT\") {\n        let nthreads = Math.round(navigator.hardwareConcurrency * 2 / 3);\n        let scran_init = scran.initialize({ numberOfThreads: nthreads });\n        scran_init \n            .then(x => {\n                postMessage({\n                    type: payload.type,\n                    msg: `Success: ScranJS/WASM initialized`\n                });\n            });\n\n        let kana_init = kana_db.initialize();\n        kana_init\n            .then(result => {\n                if (result !== null) {\n                    postMessage({\n                        type: \"KanaDB_store\",\n                        resp: result,\n                        msg: \"Success\"\n                    });\n                } else {\n                    console.log(error);\n                    postMessage({\n                        type: \"KanaDB_ERROR\",\n                        msg: `Fail: Cannot initialize DB`\n                    });\n                }\n            });\n\n        let tsne_init = tsne.initialize();\n        let umap_init = umap.initialize();\n\n        loaded = Promise.all([\n            scran_init,\n            kana_init,\n            tsne_init,\n            umap_init\n        ]);\n\n    } else if (payload.type == \"RUN\") {\n        loaded\n            .then(x => {\n                runAllSteps(\"run\", payload.payload)\n            })\n            .catch(error => {\n                console.log(error);\n                postMessage({\n                    type: \"run_ERROR\",\n                    msg: error.toString()\n                });\n            });\n\n    /**************** LOADING EXISTING ANALYSES *******************/\n    } else if (payload.type == \"LOAD\") {\n        if (payload.payload.files.format == \"kana\") {\n            const reader = new FileReaderSync();\n            var f = payload.payload.files.files.file[0];\n            loaded\n                .then(async (x) => {\n                    var contents = await serialize_utils.load(reader.readAsArrayBuffer(f));\n                    var response = runAllSteps(\"unserialize\", contents);\n                    postMessage({\n                        type: \"loadedParameters\",\n                        resp: response\n                    });\n                })\n                .catch(error => {\n                    console.log(error);\n                    postMessage({\n                        type: \"load_ERROR\",\n                        msg: error.toString()\n                    });\n                });\n\n        } else if (payload.payload.files.format == \"kanadb\") {\n            var id = payload.payload.files.files.file;\n            kana_db.loadAnalysis(id)\n                .then(async (res) => {\n                    if (res == null) {\n                        postMessage({\n                            type: \"KanaDB_ERROR\",\n                            msg: `Fail: cannot load analysis ID '${id}'`\n                        });\n                    } else {\n                        var contents = await serialize_utils.load(res);\n                        var response = await runAllSteps(\"unserialize\", contents);\n                        postMessage({\n                            type: \"loadedParameters\",\n                            resp: response\n                        });\n                    }\n                })\n                .catch(error => {\n                    console.log(error);\n                    postMessage({\n                        type: \"load_ERROR\",\n                        msg: error.toString()\n                    });\n                });\n        }\n  \n    } else if (payload.type == \"EXPORT\") { // exporting an analysis\n        loaded\n            .then(async (x) => {\n                var state = await runAllSteps(\"serialize\");\n                var output = await serialize_utils.save(state, \"full\");\n                postMessage({\n                    type: \"exportState\",\n                    resp: output,\n                    msg: \"Success: application state exported\"\n                }, [output]);\n            })\n            .catch(error => {\n                console.log(error);\n                postMessage({\n                    type: \"export_ERROR\",\n                    msg: error.toString()\n                });\n            });\n  \n    } else if (payload.type == \"SAVEKDB\") { // save analysis to inbrowser indexedDB \n        var title = payload.payload.title;\n        loaded\n            .then(async (x) => {\n                var state = await runAllSteps(\"serialize\");\n                var output = await serialize_utils.save(state, \"KanaDB\");\n                var id = await kana_db.saveAnalysis(null, output.state, output.file_ids, title);\n                if (id !== null) {\n                    let recs = await kana_db.getRecords();\n                    postMessage({\n                        type: \"KanaDB_store\",\n                        resp: recs,\n                        msg: `Success: Saved analysis to cache (${id})`\n                    });\n                } else {\n                    console.log(error);\n                    postMessage({\n                        type: \"KanaDB_ERROR\",\n                        msg: `Fail: Cannot save analysis to cache (${id})`\n                    });\n                }\n            })\n            .catch(error => {\n                console.log(error);\n                postMessage({\n                    type: \"export_ERROR\",\n                    msg: error.toString()\n                });\n            });\n  \n    } else if (payload.type == \"REMOVEKDB\") { // remove a saved analysis\n        var id = payload.payload.id;\n        kana_db.removeAnalysis(id)\n            .then(async (result) => {\n                if (result) {\n                    let recs = await kana_db.getRecords();\n                    postMessage({\n                        type: \"KanaDB_store\",\n                        resp: recs,\n                        msg: `Success: Removed file from cache (${id})`\n                    });\n                } else {\n                    console.log(error);\n                    postMessage({\n                        type: \"KanaDB_ERROR\",\n                        msg: `fail: cannot remove file from cache (${id})`\n                    });\n                }\n            });\n  \n    /**************** OTHER EVENTS FROM UI *******************/\n    } else if (payload.type == \"getMarkersForCluster\") {\n        loaded.then(x => {\n            let cluster = payload.payload.cluster;\n            let rank_type = payload.payload.rank_type;\n            var resp = cluster_markers.fetchGroupResults(rank_type, cluster);\n      \n            var transferrable = [];\n            utils.extractBuffers(resp, transferrable);\n            postMessage({\n                type: \"setMarkersForCluster\",\n                resp: resp,\n                msg: \"Success: GET_MARKER_GENE done\"\n            }, transferrable);\n        });\n  \n    } else if (payload.type == \"getGeneExpression\") {\n        loaded.then(x => {\n            let row_idx = payload.payload.gene;\n            var vec = normalization.fetchExpression(row_idx);\n            postMessage({\n                type: \"setGeneExpression\",\n                resp: {\n                    gene: row_idx,\n                    expr: vec\n                },\n                msg: \"Success: GET_GENE_EXPRESSION done\"\n            }, [vec.buffer]);\n        });\n  \n    } else if (payload.type == \"computeCustomMarkers\") {\n        loaded.then(x => {\n            custom_markers.addSelection(payload.payload.id, payload.payload.selection);\n            postMessage({\n                type: \"computeCustomMarkers\",\n                msg: \"Success: COMPUTE_CUSTOM_MARKERS done\"\n            });\n        });\n  \n    } else if (payload.type == \"getMarkersForSelection\") {\n        loaded.then(x => {\n            var resp = custom_markers.fetchResults(payload.payload.cluster, payload.payload.rank_type);\n            var transferrable = [];\n            utils.extractBuffers(resp, transferrable);\n            postMessage({\n                type: \"setMarkersForCustomSelection\",\n                resp: resp,\n                msg: \"Success: GET_MARKER_GENE done\"\n            }, transferrable);\n        });\n  \n    } else if (payload.type == \"removeCustomMarkers\") {\n        loaded.then(x => {\n            custom_markers.removeSelection(payload.payload.id);\n        });\n  \n    } else if (payload.type == \"animateTSNE\") {\n        loaded.then(async (x) => {\n            await tsne.animate();\n            var res = await tsne.results();\n            postSuccess_(res, \"tsne\", \"Resending t-SNE coordinates\");\n        });\n  \n    } else if (payload.type == \"animateUMAP\") {\n        loaded.then(async (x) => {\n            await umap.animate();\n            var res = await umap.results();\n            postSuccess_(res, \"umap\", \"Resending UMAP coordinates\");\n        });\n  \n    } else {\n        console.log(\"MIM:::msg type incorrect\")\n    }\n}\n","import * as pako from \"pako\";\nimport * as hashwasm from \"hash-wasm\";\nimport * as kana_db from \"./KanaDBHandler.js\";\n\n// Must be integers!\nconst FORMAT_EMBEDDED_FILES = 0;\nconst FORMAT_EXTERNAL_KANADB = 1;\nconst FORMAT_VERSION = 0;\n\nfunction normalizeTypedArrays(object) {\n    if (Array.isArray(object)) {\n        for (var i = 0; i < object.length; i++) {\n            object[i] = normalizeTypedArrays(object[i]);\n        }\n    } else if (ArrayBuffer.isView(object)) {\n        object = { \n            \"_TypedArray_class\": object.constructor.name, \n            \"_TypedArray_values\": Array.from(object) \n        };\n    } else if (object instanceof Object) {\n        // This MUST be after the previous clause, as otherwise\n        // a TypedArray is an object and is incorrectly handled. \n        for (const [key, element] of Object.entries(object)) {\n            object[key] = normalizeTypedArrays(element);\n        }\n    }\n    return object;\n}\n\nfunction recoverTypedArrays(object) {\n    if (Array.isArray(object)) {\n        for (var i = 0; i < object.length; i++) {\n            object[i] = recoverTypedArrays(object[i]);\n        }\n    } else if (object instanceof Object) {\n        if (\"_TypedArray_class\" in object) {\n            var cls = object[[\"_TypedArray_class\"]];\n            var vals = object[[\"_TypedArray_values\"]];\n            switch (cls) {\n                case \"Uint8Array\":\n                    object = new Uint8Array(vals.length);\n                    break;\n                case \"Int8Array\":\n                    object = new Int8Array(vals.length);\n                    break;\n                case \"Uint8Array\":\n                    object = new Uint8Array(vals.length);\n                    break;\n                case \"Uint16Array\":\n                    object = new Uint16Array(vals.length);\n                    break;\n                case \"Int16Array\":\n                    object = new Int16Array(vals.length);\n                    break;\n                case \"Uint32Array\":\n                    object = new Uint32Array(vals.length);\n                    break;\n                case \"Int32Array\":\n                    object = new Int32Array(vals.length);\n                    break;\n                case \"Uint64Array\":\n                    object = new Uint64Array(vals.length);\n                    break;\n                case \"Int64Array\":\n                    object = new Int64Array(vals.length);\n                    break;\n                case \"Float32Array\":\n                    object = new Float32Array(vals.length);\n                    break;\n                case \"Float64Array\":\n                    object = new Float64Array(vals.length);\n                    break;\n                default:\n                    throw \"unrecognized TypedArray class '\" + cls;\n            }\n            object.set(vals);\n        } else {\n            for (const [key, element] of Object.entries(object)) {\n                object[key] = recoverTypedArrays(element);\n            }\n        }\n    } \n    return object;\n}\n\nfunction numberToBuffer(number) {\n    // Store as little-endian. Probably safer\n    // than trying to cast it from a Uint64Array;\n    // not sure that endianness is strictly defined.\n    var output = new Uint8Array(8);\n\n    var i = 0;\n    while (number > 0) {\n        output[i] = number % 256;\n        number = Math.floor(number / 256);\n        i++;\n    }\n\n    return output;\n}\n\nfunction bufferToNumber(buffer) {\n    var output = 0;\n    var multiplier = 1;\n    for (const x of buffer) {\n        output += multiplier * x;\n        multiplier *= 256;\n    }\n    return output;\n}\n\nexport async function save(contents, mode = \"full\") {\n    // Extract out the file buffers.\n    var buffered = contents.inputs.parameters.files;\n    var all_buffers = [];\n    var total_len = 0;\n    var format_type;\n\n    if (mode == \"full\") {\n        format_type = FORMAT_EMBEDDED_FILES;\n        buffered.forEach((x, i) => {\n            var val = x.buffer;\n            all_buffers.push(val);\n            buffered[i].buffer = { \"offset\": total_len, \"size\": val.byteLength };\n            total_len += val.byteLength;\n        });\n\n    } else if (mode == \"KanaDB\") {\n        // Saving the files to IndexedDB instead. 'all_buffers' now holds a promise\n        // indicating whether all of these things were saved properly.\n        format_type = FORMAT_EXTERNAL_KANADB;\n        for (const x of buffered) {\n            var md5 = await hashwasm.md5(new Uint8Array(x.buffer));\n            var id = x.type + \"_\" + x.name + \"_\" + x.buffer.byteLength + \"_\" + md5;\n            var ok = await kana_db.saveFile(id, x.buffer);\n            if (!ok) {\n                throw \"failed to save file '\" + id + \"' to KanaDB\";\n            }\n            x.buffer = id;\n            all_buffers.push(id);\n        }\n\n    } else {\n        throw \"unsupported mode \" + mode;\n    }\n\n    // Converting all other TypedArrays to normal arrays.\n    contents = normalizeTypedArrays(contents);\n\n    // Converting the JSON to a string and gzipping it into a Uint8Array.\n    var json_str = JSON.stringify(contents);\n    const json_view = pako.gzip(json_str);\n\n    // Allocating a huge arrayBuffer.\n    var combined = new ArrayBuffer(24 + json_view.length + total_len);\n    var combined_arr = new Uint8Array(combined);\n    var offset = 0;\n\n    let format = numberToBuffer(format_type);\n    combined_arr.set(format, offset); \n    offset += format.length;\n\n    let version = numberToBuffer(FORMAT_VERSION);\n    combined_arr.set(version, offset); \n    offset += version.length;\n\n    let json_len = numberToBuffer(json_view.length);\n    combined_arr.set(json_len, offset); \n    offset += json_len.length;\n\n    if (offset != 24) {\n        throw \"oops - accounting error in the serialization code!\";\n    }\n\n    combined_arr.set(json_view, offset);\n    offset += json_view.length;\n\n    if (mode == \"full\") {\n        for (const buf of all_buffers) {\n            const tmp = new Uint8Array(buf);\n            combined_arr.set(tmp, offset);\n            offset += tmp.length;\n        }\n        return combined;\n\n    } else if (mode == \"KanaDB\") {\n        return { \"file_ids\": all_buffers, \"state\": combined };\n\n    } else {\n        throw \"unsupported mode \" + mode;\n    }\n}\n\nexport async function load(buffer) {\n    var offset = 0;\n    var format = bufferToNumber(new Uint8Array(buffer, offset, 8));\n    offset += 8;\n\n    var version = bufferToNumber(new Uint8Array(buffer, offset, 8));\n    offset += 8;\n\n    var json_len = bufferToNumber(new Uint8Array(buffer, offset, 8));\n    offset += 8;\n\n    var contents = pako.ungzip(new Uint8Array(buffer, offset, json_len), { \"to\": \"string\" });\n    contents = JSON.parse(contents);\n    contents = recoverTypedArrays(contents);\n    offset += json_len;\n\n    var buffered = contents.inputs.parameters.files;\n    if (format == FORMAT_EMBEDDED_FILES) {\n        buffered.forEach((x, i) => {\n            var details = x.buffer;\n            var target = new Uint8Array(buffer, offset + details.offset, details.size);\n            var tmp = new ArrayBuffer(details.size);\n            (new Uint8Array(tmp)).set(target);\n            buffered[i].buffer = tmp;\n        });\n\n    } else if (format == FORMAT_EXTERNAL_KANADB) {\n        var collected = [];\n        buffered.forEach((x, i) => {\n            var id = x.buffer;\n            collected.push(kana_db.loadFile(id));\n        });\n  \n        var resolved = await Promise.all(collected);\n        buffered.forEach((x, i) => {\n            if (resolved[i] === null) {\n                throw \"KanaDB loading failed for file ID '\" + x.buffer + \"'\";\n            }\n            x.buffer = resolved[i];\n        });\n\n    } else {\n        throw \"unsupported format type\";\n    }\n \n    return contents;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [537,555], function() { return __webpack_require__(2459); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + {\"139\":\"978430f7\",\"495\":\"5bc8be6f\",\"537\":\"2057833a\",\"555\":\"01abbdb9\",\"653\":\"efc11270\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/kana/\";","__webpack_require__.b = self.location + \"/../../../\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t459: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkkana\"] = self[\"webpackChunkkana\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn Promise.all([\n\t\t__webpack_require__.e(537),\n\t\t__webpack_require__.e(555)\n\t]).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["freeCache","object","undefined","free","freeReloaded","cache","Object","entries","reloaded","v","scran","changedParameters","x","y","JSON","stringify","computeRange","arr","max","Infinity","min","forEach","allocateCachedArray","size","type","name","reallocate","candidate","constructor","className","extractBuffers","store","Array","isArray","ArrayBuffer","isView","buffer","push","parameters","abbreviated","changed","permuteGenes","genes","buf","matrix","numberOfRows","permutation","perm","array","key","val","copy","slice","i","length","dummyGenes","numberOfRowss","loadMatrixMarketRaw","files","utils","first_mtx","filter","contents","Uint8Array","is_compressed","split","pop","genes_file","content","pako","genes_str","TextDecoder","decode","parsed","d3","parseRows","ids","symb","guessGenesFromHDF5","f","output","keys","indexOf","vars","get","hdf5","vkeys","index","value","match","current","field","guessGenesFromH5AD","mat","feats","featkeys","featid","id","featname","guessGenesFrom10x","loadHDF5Raw","first_file","tmppath","path","fkeys","sparse_opts","dense_opts","cur_keys","shape","guessPath","close","compute","args","format","reader","FileReaderSync","it","bufferFun","formatted","readAsArrayBuffer","mtx","gene","loadMatrixMarket","file","loadHDF5","results","fetchDimensions","serialize","num_cells","numberOfColumns","parameters2","map","unserialize","saved","fetchCountMatrix","values","fetchGenes","mito","ensembl","Set","symbol","rawCompute","raw","subsets","inputs","fill","gene_info","sub_arr","use_mito_default","has","lower_mito","mito_prefix","toLowerCase","startsWith","fetchResults","data","qc_output","sums","detected","proportion","subsetProportions","ranges","fetchQCMetrics","fetchSums","unsafe","metrics","stats","numberOfMADs","nmads","obj","thresholdsSums","thresholdsDetected","thresholdsSubsetProportions","discards","fetchDiscards","tmp","set","fetchDiscardsAsWasmArray","discardOverall","byteOffset","out","disc","thresholds","fetchRetained","retained","fetchFilteredMatrix","size_factors","j","sizeFactors","fetchNormalizedMatrix","fetchExpression","row","normalization","span","sorted_residuals","residuals","sort","means","fitted","resids","model_output","variances","spawnStats","fetchSortedResiduals","fetchResiduals","fetchPCsAsWasmArray","pcs","principalComponents","variance","sorted_resids","threshold_at","num_hvgs","sub","unsorted_resids","element","features","numberOfPCs","num_pcs","var_exp","pca_output","varianceExplained","total_var","totalVariance","to_save","fetchPCs","pca","numberOfDims","numberOfCells","num_obs","fetchIndex","nn_index","k","fetchNeighbors","res","neighbors","scheme","fetchGraph","fetchClustersAsWasmArray","clusters","membership","graph","g","resolution","method","cluster","computeNeighbors","rbuf","ibuf","dbuf","runs","indices","distances","sendTask","worker","payload","transferrable","counter","p","Promise","resolve","reject","promises","postMessage","initializeWorker","onmessage","msg","endsWith","iteration","fun","error","runWithNeighbors","nn_out","run_msg","retrieveCoordinates","run","then","initialize","vizutils","Worker","URL","core","reneighbor","perplexity","animate","param_copy","initialized","num_neighbors","serializeGroupStats","group","lfc","summary","deltaDetected","cohen","auc","fetchGroupResults","rank_type","ordering","ranking","use_reloaded","increasing","effect","Int32Array","s","stat_detected","stat_mean","stat_lfc","stat_delta_d","reorder","thing","Float64Array","delta_detected","choice","num","numberOfGroups","markers","kanaDB","selections","addSelection","selection","removeSelection","init","getRecordsResolver","result","transaction","objectStore","allAnalysis","getAll","onsuccess","vals","onerror","loadContent","request","allOK","allSettled","getRecords","saveFile","trans","file_store","meta_store","meta","refcount","data_saving","putrequest","put","event","ref_saving","count","saveAnalysis","state","title","analysis_store","already","String","id_saving","Number","Date","loadFile","removeFile","remove","delete","loaded","normalizeTypedArrays","from","recoverTypedArrays","cls","Int8Array","Uint16Array","Int16Array","Uint32Array","Uint64Array","Int64Array","Float32Array","numberToBuffer","number","Math","floor","bufferToNumber","multiplier","save","mode","buffered","all_buffers","total_len","format_type","byteLength","hashwasm","md5","kana_db","json_str","json_view","combined","combined_arr","offset","version","json_len","load","parse","details","target","collected","all","resolved","postSuccess_","info","step","message","transferable","resp","runAllSteps","response","postSuccess","namespace","postSuccessAsync","addToObject","property","params","qc","fSelection","tsne_res","approximate","umap_res","tsne","iterations","umap","num_epochs","min_dist","snn_neighbors","snn_graph","snn_cluster","cluster_choice","cluster_markers","custom_markers","done","nthreads","round","navigator","hardwareConcurrency","scran_init","numberOfThreads","kana_init","indexedDB","open","onupgradeneeded","e","kanaDBClient","deleteObjectStore","createObjectStore","keyPath","console","log","tsne_init","umap_init","catch","toString","serialize_utils","file_ids","recs","row_idx","vec","expr","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","fulfilled","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","chunkId","reduce","u","miniCssF","globalThis","this","Function","window","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","b","self","location","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","next"],"sourceRoot":""}