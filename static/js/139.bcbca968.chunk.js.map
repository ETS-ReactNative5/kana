{"version":3,"file":"static/js/139.bcbca968.chunk.js","mappings":"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","sources":["../node_modules/scran.js/module/runTSNE.js","workers/_utils.js","workers/tsne.worker.js","workers/_utils_viz_child.js","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport { NeighborSearchIndex, findNearestNeighbors } from \"./findNearestNeighbors.js\";\nimport { Float64WasmArray } from \"./WasmArray.js\";\n\n/**\n * Wrapper around the t-SNE status object on the Wasm heap.\n */\nexport class TSNEStatus {\n    /**\n     * @param {Object} raw_status Status object allocated on the Wasm heap.\n     * @param {Float64WasmArray} raw_coordinates Buffer containing the initial t-SNE coordinates.\n     *\n     * This should not be called directly by developers;\n     * use `initializeTSNE()` instead.\n     */\n    constructor(raw_status, raw_coordinates) {\n        this.status = raw_status;\n        this.coordinates = raw_coordinates;\n        return;\n    }\n\n    /**\n     * @return A deep copy of the status object.\n     */\n    clone() {\n        return new TSNEStatus(this.status.deepcopy(), this.coordinates.clone());\n    }\n\n    /**\n     * @return Number of cells in the dataset.\n     */\n    numberOfCells () {\n        return this.status.num_obs();\n    }\n\n    /**\n     * @return Number of iterations processed so far.\n     * This changes with repeated invocations of `runTSNE()`.\n     */\n    iterations () {\n        return this.status.iterations();\n    }\n\n    /**\n     * @return Object with `x` and `y` keys,\n     * where values are `Float64Array` objects of length equal to the number of cells,\n     * containing the x- and  y- coordinates for each cell at the current state of the algorithm.\n     */\n    extractCoordinates() {\n        return utils.extractXY(this.numberOfCells(), this.coordinates.array()); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */   \n    free () {\n        this.status.delete();\n        this.coordinates.free();\n        this.status = null;\n        this.coordinates = null;\n        return;\n    }\n}\n\n/**\n * @param {number} perplexity - Perplexity to use in the t-SNE algorithm.\n * @return Appropriate number of neighbors to use in the nearest neighbor search.\n */\nexport function perplexityToNeighbors(perplexity) {\n    return wasm.call(module => module.perplexity_to_k(perplexity));\n}\n\n/**\n * @param {(NeighborSearchIndex|NeighborSearchResults)} x \n * Either a pre-built neighbor search index for the dataset (see `buildNeighborSearchIndex()`),\n * or a pre-computed set of neighbor search results for all cells (see `findNearestNeighbors()`).\n * @param {Object} [options] - Optional parameters.\n * @param {number} [options.perplexity] - Perplexity to use when computing neighbor probabilities in the t-SNE.\n * @param {boolean} [options.checkMismatch] - Whether to check for a mismatch between the perplexity and the number of searched neighbors.\n * Only relevant if `x` is a `NeighborSearchResults` object.\n *\n * @return A `TSNEStatus` object containing the initial status of the t-SNE algorithm.\n */\nexport function initializeTSNE(x, { perplexity = 30, checkMismatch = true } = {}) {\n    var my_neighbors;\n    var raw_status;\n    var raw_coords;\n    var output;\n\n    try {\n        let neighbors;\n\n        if (x instanceof NeighborSearchIndex) {\n            let k = perplexityToNeighbors(perplexity);\n            my_neighbors = findNearestNeighbors(x, k);\n            neighbors = my_neighbors;\n\n        } else {\n            if (checkMismatch) {\n                let k = perplexityToNeighbors(perplexity);\n                if (k * x.numberOfCells() != x.size()) {\n                    throw \"number of neighbors in 'x' does not match '3 * perplexity'\";\n                }\n            }\n            neighbors = x;\n        }\n\n        raw_status = wasm.call(module => module.initialize_tsne(neighbors.results, perplexity));\n        raw_coords = new Float64WasmArray(2 * neighbors.numberOfCells());\n        wasm.call(module => module.randomize_tsne_start(neighbors.numberOfCells(), raw_coords.offset, 42));\n        output = new TSNEStatus(raw_status, raw_coords);\n\n    } catch(e) {\n        utils.free(raw_status);\n        utils.free(raw_coords);\n        throw e;\n\n    } finally {\n        utils.free(my_neighbors);\n    }\n\n    return output;\n}\n\n/**\n * Run the t-SNE algorithm on an initialized `TSNEStatus`.\n *\n * @param {TSNEStatus} x A previously initialized status object.\n * This may be passed through `runTSNE()` any number of times.\n * @param {Object} [options] - Optional parameters.\n * @param {number} [options.maxIterations] - Maximum number of iterations to perform.\n * This will also count all existing iterations from previous calls to `runTSNE()`.\n * @param {?number} [options.runTime] - Number of milliseconds for which the algorithm is allowed to run before returning.\n * If `null`, no limit is imposed on the runtime.\n *\n * @return The algorithm status in `x` is advanced up to the requested number of iterations,\n * or until the requested run time is exceeded, whichever comes first.\n */\nexport function runTSNE(x, { maxIterations = 1000, runTime = null } = {}) {\n    if (runTime === null) {\n        runTime = -1;\n    }\n    wasm.call(module => module.run_tsne(x.status, runTime, maxIterations, x.coordinates.offset));\n    return;\n}\n","import * as scran from \"scran.js\";\n\nexport function freeCache(object) {\n    if (object !== undefined && object !== null) {\n        object.free();\n    }\n    return;\n}\n\nexport function freeReloaded(cache) {\n    if (\"reloaded\" in cache) {\n        for (const [k, v] of Object.entries(cache.reloaded)) {\n            if (v instanceof scran.WasmArray) {\n                v.free();\n            }\n        }\n        delete cache.reloaded;\n    }\n}\n\nexport function changedParameters(x, y) {\n    return JSON.stringify(x) != JSON.stringify(y);\n}\n\nexport function computeRange(arr) {\n    var max = -Infinity, min = Infinity;\n    arr.forEach(function (x) {\n        if (max < x) {\n            max = x;\n        }\n        if (min > x) {\n            min = x;\n        }\n    });\n    return [min, max];\n}\n\nexport function allocateCachedArray(size, type, cache, name = \"buffer\") {\n    var reallocate = true;\n    if (name in cache) {\n        var candidate = cache[name];\n        if (candidate.size != size || candidate.constructor.className != type) {\n            candidate.free();\n        } else {\n            reallocate = false;\n        }\n    }\n  \n    if (reallocate) {\n        switch (type) {\n            case \"Uint8Array\":\n                cache[name] = new scran.Uint8WasmArray(size);\n                break;\n            case \"Int32Array\":\n                cache[name] = new scran.Int32WasmArray(size);\n                break;\n            case \"Float64Array\":\n                cache[name] = new scran.Float64WasmArray(size);\n                break;\n            default:\n                // We only ever use one of the three above types in our \n                // internal data stores, so no need to go all-out here.\n                throw \"allocating '\" + type + \"' not yet supported\";\n        }\n    }\n\n    return cache[name];\n}\n\nexport function extractBuffers(object, store) {\n    if (Array.isArray(object)) {\n        for (const element of object) {\n            extractBuffers(element, store);\n        }\n    } else if (object.constructor == Object) {\n        for (const [key, element] of Object.entries(object)) {\n            extractBuffers(element, store);\n        }\n    } else if (ArrayBuffer.isView(object)) {\n        if (! (object.buffer instanceof ArrayBuffer)) {\n            throw \"only ArrayBuffers should be in the message payload\";\n        }\n        store.push(object.buffer);\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./_utils.js\";\nimport * as vizutils from \"./_utils_viz_child.js\";\n\nvar cache = {};\nvar init_changed = false;\nvar init_parameters = {};\nvar run_parameters = {};\n\nfunction rerun(animate, iterations) {\n    var num_obs = cache.init.numberOfCells(); \n    var delay = vizutils.chooseDelay(animate);\n    var current_status = cache.init.clone();\n\n    try {\n        for (; current_status.iterations() < iterations; ) {\n            scran.runTSNE(current_status, { runTime: delay, maxIterations: iterations }); \n  \n            if (animate) {\n                let xy = current_status.extractCoordinates();\n                postMessage({\n                    \"type\": \"tsne_iter\",\n                    \"x\": xy.x,\n                    \"y\": xy.y,\n                    \"iteration\": current_status.iterations()\n                }, [xy.x.buffer, xy.y.buffer]);\n            }\n        }\n        cache.final = current_status.extractCoordinates();\n\n    } finally {\n        current_status.free();\n    }\n}\n\nvar loaded;\nonmessage = function(msg) {\n    var id = msg.data.id;\n  \n    if (msg.data.cmd == \"INIT\") {\n        loaded = scran.initialize({ numberOfThreads: 1 });\n        loaded\n            .then(x => {\n                postMessage({\n                    \"id\": id,\n                    \"type\": \"init_worker\",\n                    \"data\": { \"status\": \"SUCCESS\" }\n                });\n            })\n            .catch(error => {\n                postMessage({ \n                    \"id\": id,\n                    \"type\": \"error\",\n                    \"error\": error\n                });\n            });\n  \n    } else if (msg.data.cmd == \"RUN\") {\n        loaded\n            .then(x => {\n                var new_neighbors;\n                if (\"neighbors\" in msg.data) {\n                    utils.freeCache(cache.neighbors);\n                    cache.neighbors = vizutils.recreateNeighbors(msg.data.neighbors);\n                    new_neighbors = true;\n                } else {\n                    new_neighbors = false;\n                }\n\n                var init_args = { \"perplexity\": msg.data.params.perplexity };\n                if (!new_neighbors && !utils.changedParameters(init_args, init_parameters)) {\n                    init_changed = false;\n                } else {\n                    utils.freeCache(cache.init);\n                    cache.init = scran.initializeTSNE(cache.neighbors, { perplexity: init_args.perplexity });\n                    init_parameters = init_args;\n                    init_changed = true;\n                }\n\n                // Nothing downstream depends on the run results, so we don't set any changed flag.\n                var run_args = { \"iterations\": msg.data.params.iterations };\n                if (init_changed || utils.changedParameters(run_args, run_parameters)) {\n                    rerun(msg.data.params.animate, run_args.iterations);\n                    run_parameters = run_args;\n                }\n          \n                postMessage({\n                    \"id\": id,\n                    \"type\": \"tsne_run\",\n                    \"data\": { \"status\": \"SUCCESS\" }\n                });\n            })\n            .catch(error => {\n                postMessage({ \n                    \"id\": id,\n                    \"type\": \"error\",\n                    \"error\": error\n                });\n            });\n  \n    } else if (msg.data.cmd == \"RERUN\") {\n        loaded\n            .then(x => {\n                rerun(true, run_parameters.iterations);\n                postMessage({\n                    \"id\": id,\n                    \"type\": \"tsne_rerun\",\n                    \"data\": { \"status\": \"SUCCESS\" }\n                });\n            })\n            .catch(error => {\n                postMessage({ \n                    \"id\": id,\n                    \"type\": \"error\",\n                    \"error\": error\n                });\n            });\n\n    } else if (msg.data.cmd == \"FETCH\") {\n        loaded\n            .then(x => {\n                var info = {\n                    \"x\": cache.final.x.slice(),\n                    \"y\": cache.final.y.slice(),\n                    \"iterations\": run_parameters.iterations\n                };\n  \n                var transfer = [];\n                utils.extractBuffers(info, transfer);\n                postMessage({\n                    \"id\": id,\n                    \"type\": \"tsne_fetch\",\n                    \"data\": info\n                }, transfer);\n            })\n            .catch(error => {\n                postMessage({ \n                    \"id\": id,\n                    \"type\": \"error\",\n                    \"error\": error\n                });\n            });\n    }\n}\n","import * as scran from \"scran.js\";\n\nexport function chooseDelay(animate) {\n    if (animate) {\n        // TODO: using 75 for now\n        // in the future the user can choose a bar for speed on the UI\n        // options would be 1x, 2x, 3x\n        return 75;\n    } else {\n        return 1000000; // effectively no delay.\n    }\n};\n\nexport function recreateNeighbors(neighbors) {\n    var output = null;\n    var rbuf = null;\n    var ibuf = null;\n    var dbuf = null;\n  \n    try {\n        var num_obs = neighbors.num_obs;\n        var size = neighbors.size;\n\n        rbuf = new scran.Int32WasmArray(num_obs);\n        rbuf.set(neighbors.runs);\n        ibuf = new scran.Int32WasmArray(size);\n        ibuf.set(neighbors.indices);\n        dbuf = new scran.Float64WasmArray(size);\n        dbuf.set(neighbors.distances);\n\n        output = scran.NeighborSearchResults.unserialize(rbuf, ibuf, dbuf);\n\n    } finally {\n        if (rbuf !== null) {\n            rbuf.free();\n        }\n        if (ibuf !== null) {\n            ibuf.free();\n        }\n        if (dbuf !== null) {\n            dbuf.free();\n        }\n    }\n\n    return output;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [890,450], function() { return __webpack_require__(139); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + {\"450\":\"3afdb060\",\"495\":\"a868a7b8\",\"890\":\"93589049\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/kana/\";","__webpack_require__.b = self.location + \"/../../../\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t139: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkkana\"] = self[\"webpackChunkkana\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn Promise.all([\n\t\t__webpack_require__.e(890),\n\t\t__webpack_require__.e(450)\n\t]).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["TSNEStatus","raw_status","raw_coordinates","this","status","coordinates","deepcopy","clone","num_obs","iterations","utils","numberOfCells","array","delete","free","perplexityToNeighbors","perplexity","wasm","module","perplexity_to_k","runTSNE","x","maxIterations","runTime","run_tsne","offset","freeCache","object","undefined","changedParameters","y","JSON","stringify","extractBuffers","store","Array","isArray","constructor","Object","entries","ArrayBuffer","isView","buffer","push","loaded","cache","init_changed","init_parameters","run_parameters","rerun","animate","init","delay","vizutils","current_status","scran","xy","extractCoordinates","postMessage","final","onmessage","msg","id","data","cmd","numberOfThreads","then","catch","error","new_neighbors","neighbors","output","rbuf","ibuf","dbuf","size","set","runs","indices","distances","init_args","params","my_neighbors","raw_coords","checkMismatch","NeighborSearchIndex","k","findNearestNeighbors","initialize_tsne","results","Float64WasmArray","randomize_tsne_start","e","run_args","info","slice","transfer","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","__webpack_modules__","m","__webpack_exports__","O","deferred","result","chunkIds","fn","priority","notFulfilled","Infinity","i","length","fulfilled","j","keys","every","key","splice","r","d","definition","o","defineProperty","enumerable","get","f","chunkId","Promise","all","reduce","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","call","p","b","self","location","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop","next"],"sourceRoot":""}