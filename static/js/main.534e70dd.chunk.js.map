{"version":3,"sources":["components/Spinners/AppToaster.js","context/AppContext.js","components/Analysis/index.js","components/Stats/index.js","components/Logs/index.js","components/Intro/index.js","components/Header/index.js","components/Plots/utils.js","components/Plots/BarPlot.js","components/Plots/PCABarPlot.js","components/Plots/ClusterBarPlot.js","components/Plots/ViolinPlotBasic.js","components/Plots/QCPlotMgr.js","components/Plots/ImgPlot.js","components/Gallery/index.js","components/Plots/rainbowvis.js","components/Plots/ScatterPlot.js","components/Plots/StackedHistogram.js","components/Plots/Cell.js","components/Plots/HeatmapCell.js","components/Markers/index.js","components/Spinners/Pong.js","components/Spinners/Spinner2.js","App.js","reportWebVitals.js","index.js"],"names":["AppToaster","Toaster","create","className","position","Position","TOP_RIGHT","maxToasts","AppContext","createContext","AppContextProvider","children","useState","format","files","inputFiles","setInputFiles","qc","fSelection","pca","cluster","tsne","umap","markerGene","params","setParams","openInput","setOpenInput","showGame","setShowGame","tabSelected","setTabSelected","kanaIDBRecs","setKanaIDBRecs","deletekdb","setDeletekdb","loadParams","setLoadParams","loadParamsFor","setLoadParamsFor","String","Date","now","datasetName","setDatasetName","exportState","setExportState","indexedDBState","setIndexedDBState","initLoadState","setInitLoadState","wasmInitialized","setWasmInitialized","error","setError","initDims","setInitDims","qcDims","setQcDims","fSelDims","setFSelDims","genesInfo","setGenesInfo","geneColSel","setGeneColSel","qcData","setQcData","qcThreshold","setQcThreshold","fSelectionData","setFSelectionData","redDims","setRedDims","defaultRedDims","setDefaultRedDims","plotRedDims","setPlotRedDims","clusterData","setClusterData","selectedCluster","setSelectedCluster","selectedClusterSummary","setSelectedClusterSummary","selectedClusterIndex","setSelectedClusterIndex","clusterColors","setClusterColors","clusterRank","setClusterRank","customSelection","setCustomSelection","delCustomSelection","setDelCustomSelection","pcaData","setPcaData","pcaVarExp","setPcaVarExp","showAnimation","setShowAnimation","triggerAnimation","setTriggerAnimation","tsneData","setTsneData","umapData","setUmapData","gene","setGene","reqGene","setReqGene","logs","setLogs","savedPlot","setSavedPlot","useEffect","window","scranWorker","postMessage","reset","show","icon","intent","message","Provider","value","React","memo","AnalysisDialog","buttonText","includeFooter","props","isOpen","setIsOpen","showStepHelper","setShowStepHelper","handleButtonClick","useCallback","handleClose","useContext","mtx","barcode","tmpInputFiles","setTmpInputFiles","inputText","setInputText","tmpInputValid","setTmpInputValid","newImportFormat","setNewImportFormat","loadImportFormat","setLoadImportFormat","tmpInputParams","setTmpInputParams","handleNewImportTab","currTab","prevTab","file","parseKanaDate","x","kstamp","replace","toLowerCase","endsWith","content","BOTTOM","onClick","text","onClose","Classes","DIALOG_BODY","animate","renderActiveTabPanelOnly","vertical","onChange","defaultSelectedTabId","id","title","panel","style","paddingBottom","round","onMouseEnter","onInputChange","msg","target","name","marginTop","placeholder","onValueChange","nval","val","large","checked","innerLabelChecked","innerLabel","e","leftIcon","defaultValue","parseInt","currentTarget","marginBottom","href","label","selectedValue","map","i","display","flexDirection","alignItems","size","alignSelf","paddingTop","paddingLeft","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","disabled","split","margin","Stats","Logs","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","hasBackdrop","RIGHT","undefined","usePortal","state","setState","outlined","DRAWER_BODY","IntroDialog","showClose","setShowClose","elevation","Elevation","ZERO","Header","shouldReturnFocusOnClose","align","Alignment","LEFT","onConfirm","placement","rightIcon","Intro","saveSVG","svgNode","width","height","filename","svgString","setAttribute","cssText","element","styleElement","document","createElement","innerHTML","refNode","hasChildNodes","insertBefore","appendCSS","parentElement","selectorTextArr","push","c","classList","length","contains","nodes","getElementsByTagName","classes","extractedCSSText","styleSheets","s","cssRules","r","selectorText","str","arr","indexOf","getCSSStyles","XMLSerializer","serializeToString","serialize","imgsrc","btoa","unescape","encodeURIComponent","canvas","context","getContext","image","Image","onload","clearRect","drawImage","dataBlob","toDataURL","tmpLink","download","click","src","BarPlot","container","useRef","data","propwidth","color","ymax","Math","max","d","containerEl","current","querySelector","svg","d3","append","attr","range","domain","key","padding","call","selectAll","y","enter","bandwidth","Array","isArray","small","node","ref","PCABarPlot","var_exp","chart_data","Object","values","forEach","ClusterBarPlot","chartData","setChartData","clusters","cluster_count","cluster_colors","keys","palette","randomColor","luminosity","count","toString","clus","z","join","ViolinPlotBasic","rdata","transform","dataTransform","threshold","log2","nice","tickFormat","pow","showLabel","bins","thresholds","ticks","histogram","max_bin","xNum","datum","x0","x1","curve","on","lines","this","QCPlotMgr","setQCData","props2","ImgPlot","setTitle","propheight","containerEL","ctx","img","config","embedding","highlight","startsWith","Gallery","ONE","Rainbow","gradients","minNum","maxNum","colours","setColours","spectrum","Error","increment","firstGradient","ColourGradient","setGradient","setNumberRange","colourGradient","setSpectrum","arguments","setSpectrumByArray","array","colourAt","number","isNaN","TypeError","segment","index","min","floor","colorAt","minNumber","maxNumber","RangeError","startColour","endColour","calcHex","channelStart_Base16","channelEnd_Base16","num","hex","numRange","cStart_Base10","cPerUnit","c_Base10","getHexColour","string","test","isHexColour","substring","colourNames","hasOwnProperty","colourStart","colourEnd","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","DimPlot","scatterplot","setScatterplot","clusHighlight","setClusHighlight","showGradient","setShowGradient","exprMinMax","setExprMinMax","sliderMinMax","setSliderMinMax","gradient","renderCount","setRenderCount","selectedPoints","setSelectedPoints","plotMode","setPlotMode","expr","Number","MAX_VALUE","getMinMax","tmpgradient","tmp_scatterplot","ScatterGL","onSelect","points","orbitControls","zoomSpeed","styles","point","scaleDefault","scaleSelected","scaleHover","setPanMode","animateData","cluster_mappings","metadata","dataset","Dataset","render","updateDataset","setPointColorer","selectedIndices","hoverIndex","has","includes","tmpclus","setInteraction","setSelectMode","minWidth","minHeight","fill","minimal","marginRight","console","log","renderScatterPlot","iData","scatterPlot","renderer","domElement","tmp","active","iteration","openOnTargetFocus","tmpSel","tmpcolors","slice","tmpcolor","cid","tmpSelection","select","onRemove","backgroundImage","stepSize","labelValues","StackedHistogram","clusterlabel","tickValues","allCells","filter","clusterCells","allCellsMax","clusterCellsMax","t","Cell","minmax","score","colorscale","colorscore","percWidth","border","backgroundColor","HeatmapCell","lower","upper","limit","detectedScale","MarkerPlot","clusSel","setClusSel","clusArrayStacked","setClusArrayStacked","searchInput","setSearchInput","meanMinMax","setMeanMinMax","deltaMinMax","setDeltaMinMax","lfcMinMax","setLfcMinMax","detectedMinMax","setDetectedMinMax","minMaxs","setMinMaxs","markerFilter","setMarkerFilter","prosRecords","setProsRecords","trecs","tmpmeans","mean","tmeanMinMax","tmeanval","parseFloat","toFixed","tmpdeltas","delta","tdeltaMinMax","tdeltaval","tmplfcs","lfc","tlfcsMinMax","tlfcsval","tmpdetects","detected","tdetectsMinMax","tdetecval","sortedRows","useMemo","max_clusters","concat","clusArray","handleMarkerFilter","createColorScale","scaler","leftcol","rightcol","midprop","popoverClassName","POPOVER2_CONTENT_SIZING","interactionKind","hoverOpenDelay","modifiers","arrow","enabled","flip","preventOverflow","marginLeft","tmpselection","type","paddingRight","components","Item","totalCount","itemContent","row","rowexp","expanded","rowExpr","scope","fontStyle","abs","Pong","elem","DIRECTION","rounds","colors","Ball","new","incrementedSpeed","moveX","moveY","speed","Paddle","side","move","Game","initialize","player","paddle","ball","running","over","turn","timer","menu","listen","endGameMenu","font","fillStyle","fillRect","fillText","setTimeout","assign","draw","update","_resetTurn","_turnDelayIsOver","random","_generateRoundColor","beginPath","setLineDash","moveTo","lineTo","lineWidth","strokeStyle","stroke","textAlign","loop","requestAnimationFrame","addEventListener","keyCode","victor","loser","getTime","newColor","Spinner2","App","loading","setLoading","setAnimateData","csLen","cs","payload","onmessage","getHours","getMinutes","getSeconds","resp","dimensions","num_genes","num_cells","genes","retained","records","ordering","means","delta_detected","fileNew","Blob","URL","createObjectURL","justifyContent","useTallContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.534e70dd.chunk.js","sourcesContent":["import { Position, Toaster } from \"@blueprintjs/core\";\n\nexport const AppToaster = Toaster.create({\n    className: \"notifications\",\n    position: Position.TOP_RIGHT,\n    maxToasts: 5,\n});","import React, { createContext, useEffect, useState } from \"react\";\nimport { AppToaster } from \"../components/Spinners/AppToaster\";\n\nexport const AppContext = createContext(null);\n\nconst AppContextProvider = ({ children }) => {\n  // Input State\n  const [inputFiles, setInputFiles] = useState({\n    format: null,\n    files: null\n  });\n\n  // default params \n  const [params, setParams] = useState({\n    qc: {\n      \"qc-nmads\": 3,\n      \"qc-usemitodefault\": true,\n      \"qc-mito\": \"mt-\"\n    },\n    fSelection: {\n      \"fsel-span\": 0.3\n    },\n    pca: {\n      \"pca-npc\": 25,\n      \"pca-hvg\": 2500,\n    },\n    cluster: {\n      \"clus-k\": 10,\n      \"clus-res\": 0.5,\n      \"clus-scheme\": 0,\n      \"clus-approx\": true,\n      \"clus-method\": \"snn_graph\",\n    },\n    tsne: {\n      \"tsne-iter\": 500,\n      \"tsne-perp\": 30,\n      \"animate\": false,\n    },\n    umap: {\n      \"umap-nn\": 15,\n      \"umap-epochs\": 500,\n      \"umap-min_dist\": 0.01,\n      \"animate\": false,\n    },\n    markerGene: {}\n  });\n\n  // app open inputs\n  const [openInput, setOpenInput] = useState(false);\n  // show in-app game ?\n  const [showGame, setShowGame] = useState(false);\n  // which tab is selected ? defaults to new\n  const [tabSelected, setTabSelected] = useState(\"new\");\n  // saved analysis in the browser's indexeddb\n  const [kanaIDBRecs, setKanaIDBRecs] = useState(null);\n    // delete rec in database\n  const [deletekdb, setDeletekdb] = useState(null);\n  // params from worker for stored analysis (kana file)\n  const [loadParams, setLoadParams] = useState(null);\n  // kana file or db ?\n  const [loadParamsFor, setLoadParamsFor] = useState(null);\n\n  // creates a default dataset name\n  const [datasetName, setDatasetName] = useState(\"kana-\" + String(Date.now()));\n\n  // app export state - .kana file\n  const [exportState, setExportState] = useState(false);\n  // app export state - store to indexedDB\n  const [indexedDBState, setIndexedDBState] = useState(false);\n  // app export state - store to indexedDB\n  const [initLoadState, setInitLoadState] = useState(false);\n\n  // wasm state and error \n  const [wasmInitialized, setWasmInitialized] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Response State for various components\n  // dim sizes\n  const [initDims, setInitDims] = useState(null);\n  const [qcDims, setQcDims] = useState(null);\n  const [fSelDims, setFSelDims] = useState(null);\n\n  // Gene details \n  const [genesInfo, setGenesInfo] = useState(null);\n  // default column to show in markers table\n  const [geneColSel, setGeneColSel] = useState(\"id\");\n\n  // QC Data\n  const [qcData, setQcData] = useState(null);\n  const [qcThreshold, setQcThreshold] = useState(null);\n\n  // Feature Selection\n  const [fSelectionData, setFSelectionData] = useState(null);\n\n  // UI dimensions reduction dropdown\n  const [redDims, setRedDims] = useState([]);\n  // which dimension is selected\n  const [defaultRedDims, setDefaultRedDims] = useState(null);\n  // the actual dimensions\n  const [plotRedDims, setPlotRedDims] = useState(null);\n\n  // Cluster Analysis\n  // cluster assignments\n  const [clusterData, setClusterData] = useState(null);\n  // which cluster is selected\n  const [selectedCluster, setSelectedCluster] = useState(null);\n  // cohen, mean scores per gene\n  const [selectedClusterSummary, setSelectedClusterSummary] = useState([]);\n  // ordering of genes for the selected cluster\n  const [selectedClusterIndex, setSelectedClusterIndex] = useState([]);\n  // set cluster colors\n  const [clusterColors, setClusterColors] = useState(null);\n  // set Cluster rank-type\n  const [clusterRank, setClusterRank] = useState(null);\n  // custom selection on tsne plot\n  const [customSelection, setCustomSelection] = useState({});\n  // remove custom Selection\n  const [delCustomSelection, setDelCustomSelection] = useState(null);\n\n  // PCA\n  const [pcaData, setPcaData] = useState(null);\n  const [pcaVarExp, setPcaVarExp] = useState(null);\n\n  // this applies to both tsne and umap\n  // is animation in progress ?\n  const [showAnimation, setShowAnimation] = useState(false);\n  // if a user manually triggers an animation (using the play button)\n  const [triggerAnimation, setTriggerAnimation] = useState(false);\n\n  // TSNE\n  const [tsneData, setTsneData] = useState(null);\n\n  // UMAP\n  const [umapData, setUmapData] = useState(null);\n\n  // geneExpression\n  // what gene is selected for scatterplot\n  const [gene, setGene] = useState(null);\n  // request gene expression\n  const [reqGene, setReqGene] = useState(null);\n\n  // Logs\n  const [logs, setLogs] = useState([]);\n\n  // ImageData user saves while exploring\n  const [savedPlot, setSavedPlot] = useState([]);\n\n  useEffect(() => {\n\n    if (wasmInitialized && inputFiles.files != null && !initLoadState) {\n      if (tabSelected === \"new\") {\n        window.scranWorker.postMessage({\n          \"type\": \"RUN\",\n          \"payload\": {\n            \"files\": inputFiles,\n            \"params\": params\n          },\n          \"msg\": \"not much to pass\"\n        });\n      } else if (tabSelected === \"load\") {\n        if (loadParams == null ||  inputFiles?.reset) {\n          window.scranWorker.postMessage({\n            \"type\": \"LOAD\",\n            \"payload\": {\n              \"files\": inputFiles\n            },\n            \"msg\": \"not much to pass\"\n          });\n        } else {\n          window.scranWorker.postMessage({\n            \"type\": \"RUN\",\n            \"payload\": {\n              \"files\": inputFiles,\n              \"params\": params\n            },\n            \"msg\": \"not much to pass\"\n          });\n        }\n        setInitLoadState(true);\n      }\n    }\n  }, [inputFiles, params, wasmInitialized]);\n\n  useEffect(() => {\n\n    if (exportState) {\n      window.scranWorker.postMessage({\n        \"type\": \"EXPORT\",\n        \"payload\": {\n          \"files\": inputFiles,\n          \"params\": params\n        },\n        \"msg\": \"not much to pass\"\n      });\n\n      AppToaster.show({ icon:\"download\", intent: \"primary\", message: \"Exporting analysis in the background\" });\n    } else {\n      inputFiles?.files && AppToaster.show({ icon:\"download\", intent: \"primary\", message: \"Analysis saved. Please check your downloads directory!\" });\n    }\n  }, [exportState]);\n\n  useEffect(() => {\n\n    if (indexedDBState) {\n      window.scranWorker.postMessage({\n        \"type\": \"SAVEKDB\",\n        \"payload\": {\n          \"files\": inputFiles,\n          \"params\": params,\n          \"id\": datasetName,\n        },\n        \"msg\": \"not much to pass\"\n      });\n\n      AppToaster.show({ icon:\"floppy-disk\", intent: \"primary\", message: \"Saving analysis in the background. Note: analysis is saved within the browser!!\" });\n    } else {\n      inputFiles?.files && AppToaster.show({ icon:\"floppy-disk\", intent: \"primary\", message: \"Analysis saved!\" });\n    }\n  }, [indexedDBState]);\n\n  useEffect(() => {\n\n    if (deletekdb) {\n      window.scranWorker.postMessage({\n        \"type\": \"REMOVEKDB\",\n        \"payload\": {\n          \"id\": deletekdb,\n        },\n        \"msg\": \"not much to pass\"\n      });\n\n      AppToaster.show({ icon:\"floppy-disk\", intent: \"danger\", message: \"Deleting Analysis in the background\" });\n    }\n  }, [deletekdb]);\n\n  return (\n    <AppContext.Provider\n      value={{\n        inputFiles, setInputFiles,\n        params, setParams,\n        error, setError,\n        wasmInitialized, setWasmInitialized,\n        pcaData, setPcaData,\n        pcaVarExp, setPcaVarExp,\n        tsneData, setTsneData,\n        umapData, setUmapData,\n        genesInfo, setGenesInfo,\n        initDims, setInitDims,\n        qcDims, setQcDims,\n        qcData, setQcData,\n        qcThreshold, setQcThreshold,\n        fSelDims, setFSelDims,\n        redDims, setRedDims,\n        defaultRedDims, setDefaultRedDims,\n        plotRedDims, setPlotRedDims,\n        clusterData, setClusterData,\n        fSelectionData, setFSelectionData,\n        logs, setLogs,\n        selectedCluster, setSelectedCluster,\n        selectedClusterSummary, setSelectedClusterSummary,\n        selectedClusterIndex, setSelectedClusterIndex,\n        clusterRank, setClusterRank,\n        gene, setGene,\n        clusterColors, setClusterColors,\n        reqGene, setReqGene,\n        openInput, setOpenInput,\n        customSelection, setCustomSelection,\n        delCustomSelection, setDelCustomSelection,\n        showGame, setShowGame,\n        exportState, setExportState,\n        datasetName, setDatasetName,\n        tabSelected, setTabSelected,\n        loadParams, setLoadParams,\n        showAnimation, setShowAnimation,\n        triggerAnimation, setTriggerAnimation,\n        savedPlot, setSavedPlot,\n        geneColSel, setGeneColSel,\n        indexedDBState, setIndexedDBState,\n        kanaIDBRecs, setKanaIDBRecs,\n        initLoadState, setInitLoadState,\n        loadParamsFor, setLoadParamsFor,\n        deletekdb, setDeletekdb\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default React.memo(AppContextProvider);\n","import {\n    Button, Classes, Dialog, Text, FileInput, NumericInput,\n    Label, H5, Tag, HTMLSelect, Switch, Callout, Tabs, Tab,\n    RadioGroup, Radio, Icon, Position,\n    InputGroup\n} from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport React, { useContext, useState, useCallback, useEffect } from \"react\";\n\nimport { AppContext } from \"../../context/AppContext\";\nimport \"./Analysis.css\";\n\nfunction AnalysisDialog({\n    buttonText,\n    includeFooter,\n    ...props\n}) {\n    const [isOpen, setIsOpen] = useState(false);\n    const [showStepHelper, setShowStepHelper] = useState(1);\n    const handleButtonClick = useCallback(() => setIsOpen(!isOpen), [isOpen]);\n    const handleClose = useCallback(() => setIsOpen(false), []);\n\n    const { inputFiles, setInputFiles,\n        params, setParams, openInput,\n        tabSelected, setTabSelected,\n        loadParams, kanaIDBRecs,\n        setLoadParamsFor, loadParamsFor,\n        setDeletekdb, setDatasetName } = useContext(AppContext);\n\n    // assuming new is the default tab\n    let [tmpInputFiles, setTmpInputFiles] = useState({\n        gene: null,\n        mtx: null,\n        barcode: null,\n    });\n\n    const [inputText, setInputText] = useState({\n        mtx: \"Choose Matrix Market file\",\n        gene: \"Choose feature/gene annotation\",\n        barcode: \"Choose barcode annotation\",\n    });\n\n    let [tmpInputValid, setTmpInputValid] = useState(true);\n\n    const [newImportFormat, setNewImportFormat] = useState(\"mtx\");\n    const [loadImportFormat, setLoadImportFormat] = useState(\"kana\");\n    // const [hdfFormat, sethdfFormat] = useState(\"tenx\");\n\n    let [tmpInputParams, setTmpInputParams] = useState(tabSelected === \"new\" ? params : loadParams);\n\n    function handleImport() {\n        setParams(tmpInputParams);\n\n        if (tabSelected === \"load\") {\n            if (loadImportFormat === \"kanadb\") {\n                setDatasetName(tmpInputFiles?.file);\n            } else {\n                setDatasetName(tmpInputFiles?.file?.[0]?.name.split(\".\")[0]);\n            }\n        }\n\n        // if (tabSelected === \"load\") {\n        //     // setLoadParams(tmpInputParams);\n        // }\n        setInputFiles({\n            \"format\": tabSelected === \"new\" ?\n                newImportFormat : loadImportFormat,\n            \"files\": tmpInputFiles,\n            \"reset\": tabSelected === \"new\" ? false : tmpInputFiles?.file !== inputFiles?.files?.file\n        });\n\n        setLoadParamsFor(tabSelected === \"new\" ?\n            newImportFormat : loadImportFormat);\n\n        handleClose();\n    }\n\n    function handleTabInput(currTab, prevTab) {\n        if (currTab === \"new\") {\n            handleNewImportTab(newImportFormat);\n        } else if (currTab === \"load\") {\n\n        }\n        setTabSelected(currTab);\n        setShowStepHelper(0);\n    }\n\n    function handleNewImportTab(currTab, prevTab) {\n        if (currTab === \"mtx\") {\n            setTmpInputFiles({\n                gene: null,\n                mtx: null,\n                barcode: null,\n            });\n\n            setInputText({\n                mtx: \"Choose Matrix Market file\",\n                gene: \"Choose feature/gene annotation\",\n                barcode: \"Choose barcode annotation\",\n            });\n        } else if (currTab === \"tenx\") {\n\n            setTmpInputFiles({\n                file: null,\n            });\n\n            setInputText({\n                file: \"Choose 10x v3 H5 file\",\n            });\n        } else if (currTab === \"h5ad\") {\n            setTmpInputFiles({\n                file: null,\n            });\n\n            setInputText({\n                file: \"Choose H5ad file\",\n            });\n        }\n\n        setTmpInputParams(params);\n        setNewImportFormat(currTab);\n    }\n\n    function handleLoadImportTab(currTab, prevTab) {\n        if (currTab === \"kana\") {\n            setTmpInputFiles({\n                file: null\n            });\n\n            setInputText({\n                file: \"Choose kana analysis file\"\n            });\n\n\n        } else if (currTab === \"kanadb\") {\n            setTmpInputFiles({\n                file: null\n            });\n\n            setTmpInputValid(true);\n        }\n\n        if (loadParams) {\n            setTmpInputParams(loadParams);\n        }\n        setLoadImportFormat(currTab);\n    }\n\n    useEffect(() => {\n        openInput && setIsOpen(true);\n    }, [openInput]);\n\n    useEffect(() => {\n        if (loadParams && tabSelected === \"load\") {\n            setTmpInputParams(loadParams);\n        }\n    }, [loadParams]);\n\n    useEffect(() => {\n        if (tabSelected === \"load\" && loadImportFormat === \"kanadb\"\n            && tmpInputFiles?.file === null && kanaIDBRecs) {\n            setTmpInputFiles({\n                file: kanaIDBRecs[0]\n            });\n        }\n    }, [kanaIDBRecs, loadImportFormat]);\n\n    useEffect(() => {\n        if (tmpInputFiles) {\n            if (tabSelected === \"new\") {\n                if (newImportFormat === \"mtx\") {\n                    if (\n                        (tmpInputFiles?.mtx && !(inputText?.mtx.toLowerCase().endsWith(\"mtx\") ||\n                            inputText?.mtx.toLowerCase().endsWith(\"mtx.gz\")\n                        )) ||\n                        (tmpInputFiles?.gene && !(inputText?.gene.toLowerCase().endsWith(\"tsv\") ||\n                            inputText?.gene.toLowerCase().endsWith(\"tsv.gz\")\n                        )) ||\n                        (tmpInputFiles?.barcode && !(inputText?.barcode.toLowerCase().endsWith(\"tsv\") ||\n                            inputText?.barcode.toLowerCase().endsWith(\"tsv.gz\")\n                        ))\n                    ) {\n                        setTmpInputValid(false);\n                    } else {\n                        setTmpInputValid(true);\n                    }\n                } else if (newImportFormat === \"tenx\" || newImportFormat === \"h5ad\") {\n                    if (\n                        tmpInputFiles?.file && !(\n                            inputText?.file.toLowerCase().endsWith(\"hdf5\") ||\n                            inputText?.file.toLowerCase().endsWith(\"h5\") ||\n                            inputText?.file.toLowerCase().endsWith(\"h5ad\")\n                        )\n                    ) {\n                        setTmpInputValid(false);\n                    } else {\n                        setTmpInputValid(true);\n                    }\n                }\n\n            } else if (tabSelected === \"load\" && inputText?.file) {\n                if (loadImportFormat === \"kana\" &&\n                    tmpInputFiles?.file != null && !(inputText?.file.toLowerCase().endsWith(\"kana\")\n                    )\n                ) {\n                    setTmpInputValid(false);\n                } else {\n                    setTmpInputValid(true);\n                }\n            }\n        }\n    }, [tmpInputFiles]);\n\n    function parseKanaDate(x) {\n        try {\n            let kstamp = x.replace(\"kana-\", \"\");\n            return String(new Date(kstamp*1000)).replace(\"Invalid Date\", \"\");\n            // easier solution was to replace invalid dates\n          } catch (error) {\n            return \"\";\n          }\n    }\n\n    return (\n        <>\n            <Tooltip2 content=\"Start a new analysis or modify the parameters for an existing analysis.\" position={Position.BOTTOM}>\n                <Button onClick={handleButtonClick} icon=\"social-media\" intent=\"primary\" text={buttonText} />\n            </Tooltip2>\n            <Dialog className=\"analysis-dialog\" {...props} isOpen={isOpen} onClose={handleClose}>\n\n                <div className={Classes.DIALOG_BODY}>\n                    <Tabs\n                        animate={true}\n                        renderActiveTabPanelOnly={true}\n                        vertical={false}\n                        onChange={handleTabInput}\n                        defaultSelectedTabId={tabSelected}\n                    >\n                        <Tab id=\"new\" title=\"Import new dataset\" panel={\n                            <div className=\"inputs-container\">\n                                <div className='row-input'>\n                                    <div className=\"col\"\n                                        style={{\n                                            // paddingTop: '10px',\n                                            paddingBottom: '15px'\n                                        }}>\n                                        <div>\n                                            <H5><Tag round={true}>1</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(1)}>\n                                                    Load input files\n                                                </span>\n                                            </H5>\n                                            <Tabs\n                                                animate={true}\n                                                renderActiveTabPanelOnly={true}\n                                                vertical={true}\n                                                onChange={handleNewImportTab}\n                                                defaultSelectedTabId={newImportFormat}\n                                            >\n                                                <Tab id=\"mtx\" title=\"Matrix Market file\" panel={\n                                                    <div className=\"row\"\n                                                    >\n                                                        <Label className=\"row-input\">\n                                                            <FileInput text={inputText.mtx} onInputChange={(msg) => { setInputText({ ...inputText, \"mtx\": msg.target.files[0].name }); setTmpInputFiles({ ...tmpInputFiles, \"mtx\": msg.target.files }) }} />\n                                                        </Label>\n                                                        <Label className=\"row-input\">\n                                                            <FileInput text={inputText.gene} onInputChange={(msg) => { setInputText({ ...inputText, \"gene\": msg.target.files[0].name }); setTmpInputFiles({ ...tmpInputFiles, \"gene\": msg.target.files }) }} />\n                                                        </Label>\n                                                        {/* <Label className=\"row-input\">\n                                                            <FileInput text={inputText.barcode} onInputChange={(msg) => { setInputText({ ...inputText, \"barcode\": msg.target.files[0].name }); setTmpInputFiles({ ...tmpInputFiles, \"barcode\": msg.target.files }) }} />\n                                                        </Label> */}\n                                                    </div>\n                                                } />\n                                                <Tab id=\"tenx\" title=\"10x v3 H5\" panel={\n                                                    <div className=\"row\"\n                                                    >\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\">\n                                                                    Choose 10x V3 H5 file\n                                                                </span>\n                                                            </Text>\n                                                            <FileInput style={{\n                                                                marginTop: '5px'\n                                                            }}\n                                                                text={inputText.file}\n                                                                onInputChange={(msg) => {\n                                                                    setInputText({ ...inputText, \"file\": msg.target.files[0].name });\n                                                                    setTmpInputFiles({ ...tmpInputFiles, \"file\": msg.target.files })\n                                                                }} />\n                                                        </Label>\n\n                                                        {/* <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\">\n                                                                    HDF5 format\n                                                                </span>\n                                                            </Text>\n                                                            <HTMLSelect onChange={(nval, val) => sethdfFormat(nval?.currentTarget.key)}>\n                                                                <option key=\"tenx\">10x genomics</option>\n                                                                <option key=\"h5ad\">H5ad</option>\n                                                            </HTMLSelect>\n                                                        </Label> */}\n                                                    </div>\n                                                } />\n                                                <Tab id=\"h5ad\" title=\"H5ad\" panel={\n                                                    <div className=\"row\"\n                                                    >\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\">\n                                                                    Choose H5ad file\n                                                                </span>\n                                                            </Text>\n                                                            <FileInput style={{\n                                                                marginTop: '5px'\n                                                            }}\n                                                                text={inputText.file}\n                                                                onInputChange={(msg) => {\n                                                                    setInputText({ ...inputText, \"file\": msg.target.files[0].name });\n                                                                    setTmpInputFiles({ ...tmpInputFiles, \"file\": msg.target.files })\n                                                                }} />\n                                                        </Label>\n                                                    </div>\n                                                } />\n                                            </Tabs>\n\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col\">\n                                        <div>\n                                            <H5><Tag round={true}>2</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(2)}>\n                                                    Quality control\n                                                </span>\n                                            </H5>\n                                            <div className=\"row\">\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(2)}>\n                                                            Number of MADs\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"3\" value={tmpInputParams[\"qc\"][\"qc-nmads\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"qc\": { ...tmpInputParams[\"qc\"], \"qc-nmads\": nval } }) }} />\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(2)}>\n                                                            Use default mitochondrial list ?\n                                                        </span>\n                                                    </Text>\n                                                    <Switch style={{ marginTop: '10px' }} large={true} checked={tmpInputParams[\"qc\"][\"qc-usemitodefault\"]}\n                                                        innerLabelChecked=\"yes\" innerLabel=\"no\"\n                                                        onChange={(e) => { setTmpInputParams({ ...tmpInputParams, \"qc\": { ...tmpInputParams[\"qc\"], \"qc-usemitodefault\": e.target.checked } }) }} />\n                                                </Label>\n                                                {!tmpInputParams[\"qc\"][\"qc-usemitodefault\"] && <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(2)}>\n                                                            Mitochondrial gene prefix\n                                                        </span>\n                                                    </Text>\n                                                    <InputGroup\n                                                        leftIcon=\"filter\"\n                                                        onChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"qc\": { ...tmpInputParams[\"qc\"], \"qc-mito\": nval?.target?.value } }) }}\n                                                        placeholder=\"mt-\"\n                                                        value={tmpInputParams[\"qc\"][\"qc-mito\"]}\n                                                    />\n                                                </Label>}\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col\">\n                                        <div>\n                                            <H5><Tag round={true}>3</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(3)}>\n                                                    Feature Selection\n                                                </span>\n                                            </H5>\n                                            <div className=\"row\">\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(3)}>\n                                                            Lowess span\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"0.3\" value={tmpInputParams[\"fSelection\"][\"fsel-span\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"fSelection\": { ...tmpInputParams[\"fSelection\"], \"fsel-span\": nval } }) }} />\n                                                </Label>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col\">\n                                        <div>\n                                            <H5><Tag round={true}>4</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(4)}>\n                                                    Principal components analysis\n                                                </span>\n                                            </H5>\n                                            <div className=\"row\">\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(4)}>\n                                                            Number of HVGs\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"2500\" value={tmpInputParams[\"pca\"][\"pca-hvg\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"pca\": { ...tmpInputParams[\"pca\"], \"pca-hvg\": nval } }) }} />\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(4)}>\n                                                            Number of PCs\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"25\" value={tmpInputParams[\"pca\"][\"pca-npc\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"pca\": { ...tmpInputParams[\"pca\"], \"pca-npc\": nval } }) }} />\n                                                </Label>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col\">\n                                        <div>\n                                            <H5><Tag round={true}>5</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(5)}>\n                                                    Clustering\n                                                </span>\n                                            </H5>\n                                            <div className=\"row\">\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(5)}>\n                                                            Method\n                                                        </span>\n                                                    </Text>\n                                                    <HTMLSelect defaultValue={tmpInputParams[\"cluster\"][\"clus-method\"]}>\n                                                        <option>{tmpInputParams[\"cluster\"][\"clus-method\"]}</option>\n                                                    </HTMLSelect>\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(5)}>\n                                                            Number of neighbors\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"10\" value={tmpInputParams[\"cluster\"][\"clus-k\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-k\": nval } }) }} />\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(5)}>\n                                                            Use ANN\n                                                        </span>\n                                                    </Text>\n                                                    <Switch style={{ marginTop: '10px' }} large={true} checked={tmpInputParams[\"cluster\"][\"clus-approx\"]}\n                                                        innerLabelChecked=\"yes\" innerLabel=\"no\"\n                                                        onChange={(e) => { setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-approx\": e.target.checked } }) }} />\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(5)}>\n                                                            Weighting scheme\n                                                        </span>\n                                                    </Text>\n                                                    <HTMLSelect onChange={(nval, val) => setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-scheme\": parseInt(nval?.currentTarget?.value) } })}>\n                                                        <option key=\"0\">Rank</option>\n                                                        <option key=\"1\">Number</option>\n                                                        <option key=\"2\">Jaccard</option>\n                                                    </HTMLSelect>\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(5)}>\n                                                            Resolution\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"0.5\" value={tmpInputParams[\"cluster\"][\"clus-res\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-res\": nval } }) }} />\n                                                </Label>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col\">\n                                        <div>\n                                            <H5><Tag round={true}>6</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(6)}>\n                                                    t-SNE\n                                                </span>\n                                            </H5>\n                                            <div className=\"row\">\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(6)}>\n                                                            Perplexity\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"30\" value={tmpInputParams[\"tsne\"][\"tsne-perp\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"tsne\": { ...tmpInputParams[\"tsne\"], \"tsne-perp\": nval } }) }} />\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(6)}>\n                                                            Iterations\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"500\" value={tmpInputParams[\"tsne\"][\"tsne-iter\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"tsne\": { ...tmpInputParams[\"tsne\"], \"tsne-iter\": nval } }) }} />\n                                                </Label>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col\">\n                                        <div>\n                                            <H5><Tag round={true}>7</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(7)}>\n                                                    UMAP\n                                                </span>\n                                            </H5>\n                                            <div className=\"row\">\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(7)}>\n                                                            Number of neighbors\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"15\" value={tmpInputParams[\"umap\"][\"umap-nn\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { ...tmpInputParams[\"umap\"], \"umap-nn\": nval } }) }} />\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(7)}>\n                                                            Minimum distance\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"0.01\" value={tmpInputParams[\"umap\"][\"umap-min_dist\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { ...tmpInputParams[\"umap\"], \"umap-min_dist\": nval } }) }} />\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(7)}>\n                                                            Epochs\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"500\" value={tmpInputParams[\"umap\"][\"umap-epochs\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { ...tmpInputParams[\"umap\"], \"umap-epochs\": nval } }) }} />\n                                                </Label>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div className=\"row-input-tooltips\">\n                                    {\n                                        !tmpInputValid &&\n                                        <Callout intent=\"danger\"\n                                            title=\"Incorrect file format\"\n                                            style={{\n                                                marginBottom: '10px'\n                                            }}>\n                                            <p>Upload files that in one of these formats;</p>\n                                            <ul>\n                                                <li>Matrix Market - <code>*.mtx</code> or <code>*.mtx.gz</code></li>\n                                                <li>features or genes, <code>*.tsv</code> or <code>*.tsv.gz</code></li>\n                                                <li>HDF5 (10x or h5ad) - <code>*.h5</code> or <code>*.hdf5</code> or <code>*.h5ad</code></li>\n                                            </ul>\n                                        </Callout>\n                                    }\n                                    {showStepHelper === 1 &&\n                                        <Callout intent=\"primary\">\n                                            <p>We currently support several common file formats for single-cell RNA-seq count data.</p>\n                                            <p>\n                                                <strong>A count matrix in the Matrix Market (<code>*.mtx</code>) format.</strong>\n                                                This file may be Gzip-compressed, in which case we expect it to have a <code>*.mtx.gz</code> extension.\n                                                We assume that the matrix has already been filtered to remove empty droplets.\n                                                We also recommend supplying the feature annotation as an additional TSV file with gene identifiers and symbols -\n                                                this is usually called <code>features.tsv.gz</code> or <code>genes.tsv</code> in the output of processing pipelines like Cellranger.\n                                            </p>\n                                            <p>\n                                                <strong>A count matrix in the 10X matrix HDF5 (<code>*.h5</code>) format.</strong>\n                                                We assume that the matrix has already been filtered to remove empty droplets.\n                                                This is usually called something like <code>filtered_feature_bc_matrix.h5</code> in the output of processing pipelines like Cellranger.\n                                                (Do not confuse this with the molecule information file, which is something different altogether.)\n                                            </p>\n                                            <p>\n                                                <strong>A count matrix in the H5AD (<code>*.h5ad</code>) format.</strong>\n                                                We assume that the count matrix is stored in the <code>X</code> group.\n                                                We will also try to guess which field in the <code>obs</code> annotation contains gene symbols.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper === 2 &&\n                                        <Callout intent=\"primary\">\n                                            <p>\n                                                Remove low-quality cells to ensure that they do not interfere with downstream steps.\n                                                This is achieved by computing per-cell quality control (QC) metrics such as the total count per cell,\n                                                the total number of detected features and (if the feature annotation is supplied) the mitochondrial proportion in each cell.\n                                                Cells with low total counts/number of detected features or high mitochondrial proportions are filtered out.\n                                                We use an outlier-based approach to define the filter threshold for each metric,\n                                                under the assumption that most cells in the dataset are of acceptable quality.\n                                            </p>\n                                            <p>\n                                                <strong>Number of MADs</strong>:\n                                                Number of median absolute deviations (MADs) from the median,\n                                                used to define a filter threshold in the appropriate direction for each QC metric.\n                                                Increasing this value will reduce the stringency of the filtering.\n                                            </p>\n                                            <p>\n                                                <strong>Use default mitochondrial list</strong>:\n                                                Should we identify mitochondrial genes in the dataset based on the <a target=\"_blank\" href=\"https://github.com/jkanche/kana/blob/master/public/scran/mito.js\"><strong>in-built list of Ensembl identifiers and gene symbols for mitochondrial genes in human and mouse genomes?</strong></a>\n                                                This assumes that the dataset contains feature annotation with Ensembl identifiers or gene symbols.\n                                            </p>\n                                            <p>\n                                                <strong>Mitochondrial gene prefix</strong>:\n                                                Prefix to use to identify the mitochondrial genes from the feature annotation.\n                                                Only used if we choose to not use the default mitochondrial list.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper === 3 &&\n                                        <Callout intent=\"primary\">\n                                            <p>\n                                                Identify highly variable genes (HVGs) while accounting for the mean-variance relationship.\n                                                We do so by fitting a mean-dependent trend to the variances computed from the log-transformed normalized expression values.\n                                                HVGs are defined as those genes with the largest positive residuals from the trend, as these are more variable than expected from the trend.\n                                                The aim is to only use the HVGs in some downstream steps like the principal components analysis,\n                                                thereby improving computational efficiency and reducing uninteresting technical noise.\n                                            </p>\n                                            <p>\n                                                <strong>Lowess span</strong>:\n                                                The span of the LOWESS smoother for fitting the mean-variance trend.\n                                                Larger values increase the smoothness of the global trend at the\n                                                cost of decreasing sensitivity to local variations.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper === 4 &&\n                                        <Callout intent=\"primary\">\n                                            <p>\n                                                Perform a principal components analysis (PCA) to obtain per-cell coordinates in a low-dimensional space.\n                                                Specifically, we obtain a compact representation of the dataset by only taking the top principal components (PCs) that explain the largest variance.\n                                                This improves the efficiency of downstream steps as we only have to perform calculations on a few (usually 10-50) PCs rather than the thousands of gene expression profiles.\n                                                It also has the advantage of removing uninteresting high-dimensional noise by discarding the later PCs.\n                                                This ensures that downstream steps focus on the largest factors of variation that - hopefully - correspond to biologically interesting heterogeneity.\n                                            </p>\n                                            <p>\n                                                <strong>Number of HVGs</strong>:\n                                                Number of highly variable genes to use to perform the PCA. Larger values\n                                                will capture more biological signal at the cost of increasing\n                                                noise and computational work.\n                                            </p>\n                                            <p>\n                                                <strong>Number of PCs</strong>:\n                                                Number of principal components with the highest variance\n                                                to retain in downstream analyses. Larger values will capture\n                                                more biological signal at the cost of increasing noise and\n                                                computational work.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper === 5 &&\n                                        <Callout intent=\"primary\">\n                                            <p>\n                                                Cluster cells into discrete groupings based on their relative similarity in the low-dimensional PC space.\n                                                The set of clusters should be treated as a summary of the cellular heterogeneity in the population,\n                                                allowing us to easily perform further characterization on subpopulations of interest, e.g., with marker detection.\n                                                Different clustering methods or parameters may provide different perspectives on the population structure in the dataset.\n                                            </p>\n                                            <p>\n                                                <strong>Method</strong>:\n                                                Clustering algorithm to use.\n                                                Currently, we only support multi-level community detection on an shared nearest neighbor (SNN) graph,\n                                                where cells are the nodes and edges are created between neighboring cells.\n                                            </p>\n                                            <p>\n                                                <strong>Number of neighbors</strong>:\n                                                Number of neighbors to use to construct the SNN graph.\n                                                Larger values result in broader clusters.\n                                            </p>\n                                            <p>\n                                                <strong>Use ANN</strong>:\n                                                Use an approximate method to speed up the nearest neighbor search.\n                                                This sacrifices some accuracy for speed in larger datasets.\n                                            </p>\n                                            <p>\n                                                <strong>Weighting scheme</strong>:\n                                                Weighting scheme to use for the edges of the SNN graph.\n                                                The <em>Rank</em> approach derives a weight from the rank of the closest shared neighbor;\n                                                the <em>Number</em> approach uses the number of shared neighbors;\n                                                and the Jaccard approach uses the <em>Jaccard</em> index of the neighbor sets.\n                                            </p>\n                                            <p>\n                                                <strong>Resolution</strong>:\n                                                Resolution parameter for the multi-level clustering, used to adjust the modularity calculation during community optimization.\n                                                Larger values yield more fine-grained clusters.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper === 6 &&\n                                        <Callout intent=\"primary\">\n                                            <p>\n                                                Compute a t-SNE to visualize cells in two dimensions,\n                                                because our feeble human minds cannot interpret high-dimensional spaces.\n                                                Neighboring cells in the PC space are kept adjacent in the 2D embedding,\n                                                while dissimilar cells are placed (arbitrarily) far away.\n                                            </p>\n                                            <p>\n                                                <strong>Perplexity</strong>:\n                                                Perplexity parameter, which determines the size of the neighborhood of each cell.\n                                                Larger values will favor preservation of global structure in the 2D embedding.\n                                            </p>\n                                            <p>\n                                                <strong>Iterations</strong>:\n                                                Number of t-SNE iterations.\n                                                Doesn't usually have much of an effect if you leave it as it is.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper === 7 &&\n                                        <Callout intent=\"primary\">\n                                            <p>\n                                                Create a UMAP plot to visualize cells in two dimensions.\n                                                Like the t-SNE, this aims to map cells from a high-dimensional space into a 2D embedding,\n                                                where neighboring cells are kept close together and dissimilar cells are placed far apart.\n                                            </p>\n                                            <p>\n                                                <strong>Number of neighbors</strong>:\n                                                Number of neighbors to use when defining the size of the local neighborhood.\n                                                Larger values will favor preservation of global structure.\n                                            </p>\n                                            <p>\n                                                <strong>Minimum distance</strong>:\n                                                Minimum distance between points.\n                                                Smaller values result in a more tightly packed embedding and favor local structure.\n                                            </p>\n                                            <p>\n                                                <strong>Epochs</strong>:\n                                                Number of epochs to use for convergence.\n                                                This doesn't really change all too much in the results.\n                                            </p>\n                                        </Callout>\n                                    }\n                                </div>\n                            </div>\n                        } />\n                        <Tab id=\"load\" title=\"Load saved analysis\" panel={\n                            <div className=\"inputs-container\">\n                                <div className='row-input'>\n                                    <div className=\"col\">\n                                        <Tabs\n                                            animate={true}\n                                            renderActiveTabPanelOnly={true}\n                                            vertical={true}\n                                            onChange={handleLoadImportTab}\n                                            defaultSelectedTabId={loadImportFormat}\n                                        >\n                                            <Tab id=\"kana\" title=\"Load Analysis file\" panel={\n                                                <div>\n                                                    <H5><Tag round={true}>1</Tag>\n                                                        <span className=\"row-tooltip\">\n                                                            Load saved analysis file\n                                                        </span>\n                                                    </H5>\n                                                    <div className=\"row\">\n                                                        <Label className=\"row-input\">\n                                                            <FileInput text={inputText.file} onInputChange={(msg) => { setInputText({ ...inputText, \"file\": msg.target.files[0].name }); setTmpInputFiles({ ...tmpInputFiles, \"file\": msg.target.files }) }} />\n                                                        </Label>\n                                                    </div>\n                                                </div>\n                                            } />\n                                            {<Tab id=\"kanadb\" title=\"Load from database\" panel={\n                                                <div>\n                                                    <H5><Tag round={true}>1</Tag>\n                                                        <span className=\"row-tooltip\">\n                                                            Load analysis file\n                                                        </span>\n                                                    </H5>\n                                                    {\n                                                        kanaIDBRecs ?\n                                                            <div className=\"row\">\n                                                                <RadioGroup\n                                                                    label=\"Choose an anlaysis\"\n                                                                    onChange={(x) => {\n                                                                        setTmpInputFiles({ ...tmpInputFiles, \"file\": x.currentTarget?.value });\n                                                                        setTmpInputValid(true);\n                                                                    }}\n                                                                    selectedValue={tmpInputFiles?.file}\n                                                                >\n                                                                    {\n                                                                        kanaIDBRecs.map((x, i) => {\n                                                                            return (\n                                                                                <Radio key={i} style={{\n                                                                                        display: \"flex\",\n                                                                                        flexDirection: \"row\",\n                                                                                        alignItems: \"center\"\n                                                                                    }}\n                                                                                    label={x} value={x} > &nbsp;\n                                                                                    <span className=\"kana-date\">{parseKanaDate(x)}</span>  &nbsp;\n                                                                                    <Icon icon=\"trash\" size=\"10\"\n                                                                                        style={{\n                                                                                            alignSelf: 'baseline',\n                                                                                            paddingTop: '4px',\n                                                                                            paddingLeft: '5px',\n                                                                                        }}\n                                                                                        onClick={() => {\n                                                                                            setDeletekdb(x);\n                                                                                        }}></Icon>\n                                                                                </Radio>\n                                                                            )\n                                                                        })\n                                                                    }\n                                                                </RadioGroup>\n                                                            </div> :\n                                                            <div className=\"row\">\n                                                                <Label>No saved analysis found in the browser!!</Label>\n                                                            </div>\n                                                    }\n                                                </div>} />\n                                            }\n                                        </Tabs>\n                                    </div>\n                                    {\n                                        loadParams && loadParamsFor === loadImportFormat\n                                            && tmpInputFiles?.file === inputFiles?.files?.file ?\n                                            <div className=\"col\">\n                                                <div>\n                                                    <H5><Tag round={true}>2</Tag>\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(2)}>\n                                                            Quality control\n                                                        </span>\n                                                    </H5>\n                                                    <div className=\"row\">\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(2)}>\n                                                                    Number of MADs\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"3\" value={tmpInputParams[\"qc\"][\"qc-nmads\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"qc\": { ...tmpInputParams[\"qc\"], \"qc-nmads\": nval } }) }} />\n                                                        </Label>\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(2)}>\n                                                                    Use default mitochondrial list ?\n                                                                </span>\n                                                            </Text>\n                                                            <Switch style={{ marginTop: '10px' }} large={true} checked={tmpInputParams[\"qc\"][\"qc-usemitodefault\"]}\n                                                                innerLabelChecked=\"yes\" innerLabel=\"no\"\n                                                                onChange={(e) => { setTmpInputParams({ ...tmpInputParams, \"qc\": { ...tmpInputParams[\"qc\"], \"qc-usemitodefault\": e.target.checked } }) }} />\n                                                        </Label>\n                                                        {!tmpInputParams[\"qc\"][\"qc-usemitodefault\"] && <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(2)}>\n                                                                    Mitochondrial gene prefix\n                                                                </span>\n                                                            </Text>\n                                                            <InputGroup\n                                                                leftIcon=\"filter\"\n                                                                onChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"qc\": { ...tmpInputParams[\"qc\"], \"qc-mito\": nval?.target?.value } }) }}\n                                                                placeholder=\"mt-\"\n                                                                value={tmpInputParams[\"qc\"][\"qc-mito\"]}\n                                                            />\n                                                        </Label>}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            : \"\"\n                                    }\n\n                                    {\n                                        loadParams && loadParamsFor === loadImportFormat\n                                            && tmpInputFiles?.file === inputFiles?.files?.file ?\n                                            <div className=\"col\">\n                                                <div>\n                                                    <H5><Tag round={true}>3</Tag>\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(3)}>\n                                                            Feature Selection\n                                                        </span>\n                                                    </H5>\n                                                    <div className=\"row\">\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(3)}>\n                                                                    Lowess span\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"0.3\" value={tmpInputParams[\"fSelection\"][\"fsel-span\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"fSelection\": { ...tmpInputParams[\"fSelection\"], \"fsel-span\": nval } }) }} />\n                                                        </Label>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            : \"\"\n                                    }\n\n                                    {\n                                        loadParams && loadParamsFor === loadImportFormat\n                                            && tmpInputFiles?.file === inputFiles?.files?.file ?\n                                            <div className=\"col\">\n                                                <div>\n                                                    <H5><Tag round={true}>4</Tag>\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(4)}>\n                                                            Principal components analysis\n                                                        </span>\n                                                    </H5>\n                                                    <div className=\"row\">\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(4)}>\n                                                                    Number of HVGs\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"2500\" value={tmpInputParams[\"pca\"][\"pca-hvg\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"pca\": { ...tmpInputParams[\"pca\"], \"pca-hvg\": nval } }) }} />\n                                                        </Label>\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(4)}>\n                                                                    Number of PCs\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"25\" value={tmpInputParams[\"pca\"][\"pca-npc\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"pca\": { ...tmpInputParams[\"pca\"], \"pca-npc\": nval } }) }} />\n                                                        </Label>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            : \"\"\n                                    }\n\n                                    {\n                                        loadParams && loadParamsFor === loadImportFormat\n                                            && tmpInputFiles?.file === inputFiles?.files?.file ?\n                                            <div className=\"col\">\n                                                <div>\n                                                    <H5><Tag round={true}>5</Tag>\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(5)}>\n                                                            Clustering\n                                                        </span>\n                                                    </H5>\n                                                    <div className=\"row\">\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(5)}>\n                                                                    Method\n                                                                </span>\n                                                            </Text>\n                                                            <HTMLSelect defaultValue={tmpInputParams[\"cluster\"][\"clus-method\"]}>\n                                                                <option>{tmpInputParams[\"cluster\"][\"clus-method\"]}</option>\n                                                            </HTMLSelect>\n                                                        </Label>\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(5)}>\n                                                                    Number of neighbors\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"10\" value={tmpInputParams[\"cluster\"][\"clus-k\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-k\": nval } }) }} />\n                                                        </Label>\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(5)}>\n                                                                    Use ANN\n                                                                </span>\n                                                            </Text>\n                                                            <Switch style={{ marginTop: '10px' }} large={true} checked={tmpInputParams[\"cluster\"][\"clus-approx\"]}\n                                                                innerLabelChecked=\"true\" innerLabel=\"false\"\n                                                                onChange={(e) => { setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-approx\": e.target.checked } }) }} />\n                                                        </Label>\n\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(5)}>\n                                                                    Weighting scheme\n                                                                </span>\n                                                            </Text>\n                                                            <HTMLSelect onChange={(nval, val) => setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-scheme\": parseInt(nval?.currentTarget?.value) } })}>\n                                                                <option key=\"0\">Rank</option>\n                                                                <option key=\"1\">Number</option>\n                                                                <option key=\"2\">Jaccard</option>\n                                                            </HTMLSelect>\n                                                        </Label>\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(5)}>\n                                                                    Resolution\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"0.5\" value={tmpInputParams[\"cluster\"][\"clus-res\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-res\": nval } }) }} />\n                                                        </Label>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            : \"\"\n                                    }\n\n                                    {\n                                        loadParams && loadParamsFor === loadImportFormat\n                                            && tmpInputFiles?.file === inputFiles?.files?.file ?\n                                            <div className=\"col\">\n                                                <div>\n                                                    <H5><Tag round={true}>6</Tag>\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(6)}>\n                                                            t-SNE\n                                                        </span>\n                                                    </H5>\n                                                    <div className=\"row\">\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(6)}>\n                                                                    Perplexity\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"30\" value={tmpInputParams[\"tsne\"][\"tsne-perp\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"tsne\": { ...tmpInputParams[\"tsne\"], \"tsne-perp\": nval } }) }} />\n                                                        </Label>\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(6)}>\n                                                                    Iterations\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"500\" value={tmpInputParams[\"tsne\"][\"tsne-iter\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"tsne\": { ...tmpInputParams[\"tsne\"], \"tsne-iter\": nval } }) }} />\n                                                        </Label>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            : \"\"\n                                    }\n\n                                    {\n                                        loadParams && loadParamsFor === loadImportFormat\n                                            && tmpInputFiles?.file === inputFiles?.files?.file ?\n                                            <div className=\"col\">\n                                                <div>\n                                                    <H5><Tag round={true}>7</Tag>\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(7)}>\n                                                            UMAP\n                                                        </span>\n                                                    </H5>\n                                                    <div className=\"row\">\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(7)}>\n                                                                    Number of neighbors\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"15\" value={tmpInputParams[\"umap\"][\"umap-nn\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { ...tmpInputParams[\"umap\"], \"umap-nn\": nval } }) }} />\n                                                        </Label>\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(7)}>\n                                                                    Minimum distance\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"0.01\" value={tmpInputParams[\"umap\"][\"umap-min_dist\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { ...tmpInputParams[\"umap\"], \"umap-min_dist\": nval } }) }} />\n                                                        </Label>\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\"\n                                                                    onMouseEnter={() => setShowStepHelper(7)}>\n                                                                    Epochs\n                                                                </span>\n                                                            </Text>\n                                                            <NumericInput\n                                                                placeholder=\"500\" value={tmpInputParams[\"umap\"][\"umap-epochs\"]}\n                                                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { ...tmpInputParams[\"umap\"], \"umap-epochs\": nval } }) }} />\n                                                        </Label>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            : \"\"\n                                    }\n                                </div>\n                                <div className='row-input-tooltips'>\n                                    {\n                                        !tmpInputValid &&\n                                        <Callout intent=\"danger\"\n                                            title=\"Incorrect file format\"\n                                            style={{\n                                                marginBottom: '10px'\n                                            }}>\n                                        </Callout>\n                                    }\n                                    <Callout intent=\"primary\">\n                                        Import a saved analysis from <strong>kana</strong>. These files\n                                        are stored as <strong><code>*.kana</code></strong>.\n                                    </Callout>\n\n                                    {showStepHelper === 1 &&\n                                        <Callout intent=\"primary\">\n                                            <p>We currently support files in the Cellranger format -\n                                                namely, a Matrix Market file containing the count matrix.\n                                                We also recommend supplying the feature annotation\n                                                (<code>features.tsv.gz</code> or <code>genes.tsv.gz</code>).\n                                                Users may also provide a TSV file containing the barcode annotations, if any.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper === 2 &&\n                                        <Callout intent=\"primary\">\n                                            <p>\n                                                Remove low-quality cells to ensure that they do not interfere with downstream steps.\n                                                This is achieved by computing per-cell quality control (QC) metrics such as the total count per cell,\n                                                the total number of detected features and (if the feature annotation is supplied) the mitochondrial proportion in each cell.\n                                                Cells with low total counts/number of detected features or high mitochondrial proportions are filtered out.\n                                                We use an outlier-based approach to define the filter threshold for each metric,\n                                                under the assumption that most cells in the dataset are of acceptable quality.\n                                            </p>\n                                            <p>\n                                                <strong>Number of MADs</strong>:\n                                                Number of median absolute deviations (MADs) from the median,\n                                                used to define a filter threshold in the appropriate direction for each QC metric.\n                                                Increasing this value will reduce the stringency of the filtering.\n                                            </p>\n                                            <p>\n                                                <strong>Use default mitochondrial list</strong>:\n                                                Should we identify mitochondrial genes in the dataset based on the <a href=\"https://github.com/jkanche/kana/blob/master/public/scran/mito.js\" target=\"_blank\"><strong>in-built list of Ensembl identifiers and gene symbols for mitochondrial genes in human and mouse genomes?</strong></a>\n                                                This assumes that the dataset contains feature annotation with Ensembl identifiers or gene symbols.\n                                            </p>\n                                            <p>\n                                                <strong>Mitochondrial gene prefix</strong>:\n                                                Prefix to use to identify the mitochondrial genes from the feature annotation.\n                                                Only used if we choose to not use the default mitochondrial list.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper === 3 &&\n                                        <Callout intent=\"primary\">\n                                            <p>\n                                                Identify highly variable genes (HVGs) while accounting for the mean-variance relationship.\n                                                We do so by fitting a mean-dependent trend to the variances computed from the log-transformed normalized expression values.\n                                                HVGs are defined as those genes with the largest positive residuals from the trend, as these are more variable than expected from the trend.\n                                                The aim is to only use the HVGs in some downstream steps like the principal components analysis,\n                                                thereby improving computational efficiency and reducing uninteresting technical noise.\n                                            </p>\n                                            <p>\n                                                <strong>Lowess span</strong>:\n                                                The span of the LOWESS smoother for fitting the mean-variance trend.\n                                                Larger values increase the smoothness of the global trend at the\n                                                cost of decreasing sensitivity to local variations.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper === 4 &&\n                                        <Callout intent=\"primary\">\n                                            <p>\n                                                Perform a principal components analysis (PCA) to obtain per-cell coordinates in a low-dimensional space.\n                                                Specifically, we obtain a compact representation of the dataset by only taking the top principal components (PCs) that explain the largest variance.\n                                                This improves the efficiency of downstream steps as we only have to perform calculations on a few (usually 10-50) PCs rather than the thousands of gene expression profiles.\n                                                It also has the advantage of removing uninteresting high-dimensional noise by discarding the later PCs.\n                                                This ensures that downstream steps focus on the largest factors of variation that - hopefully - correspond to biologically interesting heterogeneity.\n                                            </p>\n                                            <p>\n                                                <strong>Number of HVGs</strong>:\n                                                Number of highly variable genes to use to perform the PCA. Larger values\n                                                will capture more biological signal at the cost of increasing\n                                                noise and computational work.\n                                            </p>\n                                            <p>\n                                                <strong>Number of PCs</strong>:\n                                                Number of principal components with the highest variance\n                                                to retain in downstream analyses. Larger values will capture\n                                                more biological signal at the cost of increasing noise and\n                                                computational work.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper === 5 &&\n                                        <Callout intent=\"primary\">\n                                            <p>\n                                                Cluster cells into discrete groupings based on their relative similarity in the low-dimensional PC space.\n                                                The set of clusters should be treated as a summary of the cellular heterogeneity in the population,\n                                                allowing us to easily perform further characterization on subpopulations of interest, e.g., with marker detection.\n                                                Different clustering methods or parameters may provide different perspectives on the population structure in the dataset.\n                                            </p>\n                                            <p>\n                                                <strong>Method</strong>:\n                                                Clustering algorithm to use.\n                                                Currently, we only support multi-level community detection on an shared nearest neighbor (SNN) graph,\n                                                where cells are the nodes and edges are created between neighboring cells.\n                                            </p>\n                                            <p>\n                                                <strong>Number of neighbors</strong>:\n                                                Number of neighbors to use to construct the SNN graph.\n                                                Larger values result in broader clusters.\n                                            </p>\n                                            <p>\n                                                <strong>Use ANN</strong>:\n                                                Use an approximate method to speed up the nearest neighbor search.\n                                                This sacrifices some accuracy for speed in larger datasets.\n                                            </p>\n                                            <p>\n                                                <strong>Weighting scheme</strong>:\n                                                Weighting scheme to use for the edges of the SNN graph.\n                                                The <em>Rank</em> approach derives a weight from the rank of the closest shared neighbor;\n                                                the <em>Number</em> approach uses the number of shared neighbors;\n                                                and the Jaccard approach uses the <em>Jaccard</em> index of the neighbor sets.\n                                            </p>\n                                            <p>\n                                                <strong>Resolution</strong>:\n                                                Resolution parameter for the multi-level clustering, used to adjust the modularity calculation during community optimization.\n                                                Larger values yield more fine-grained clusters.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper === 6 &&\n                                        <Callout intent=\"primary\">\n                                            <p>\n                                                Compute a t-SNE to visualize cells in two dimensions,\n                                                because our feeble human minds cannot interpret high-dimensional spaces.\n                                                Neighboring cells in the PC space are kept adjacent in the 2D embedding,\n                                                while dissimilar cells are placed (arbitrarily) far away.\n                                            </p>\n                                            <p>\n                                                <strong>Perplexity</strong>:\n                                                Perplexity parameter, which determines the size of the neighborhood of each cell.\n                                                Larger values will favor preservation of global structure in the 2D embedding.\n                                            </p>\n                                            <p>\n                                                <strong>Iterations</strong>:\n                                                Number of t-SNE iterations.\n                                                Doesn't usually have much of an effect if you leave it as it is.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper === 7 &&\n                                        <Callout intent=\"primary\">\n                                            <p>\n                                                Create a UMAP plot to visualize cells in two dimensions.\n                                                Like the t-SNE, this aims to map cells from a high-dimensional space into a 2D embedding,\n                                                where neighboring cells are kept close together and dissimilar cells are placed far apart.\n                                            </p>\n                                            <p>\n                                                <strong>Number of neighbors</strong>:\n                                                Number of neighbors to use when defining the size of the local neighborhood.\n                                                Larger values will favor preservation of global structure.\n                                            </p>\n                                            <p>\n                                                <strong>Minimum distance</strong>:\n                                                Minimum distance between points.\n                                                Smaller values result in a more tightly packed embedding and favor local structure.\n                                            </p>\n                                            <p>\n                                                <strong>Epochs</strong>:\n                                                Number of epochs to use for convergence.\n                                                This doesn't really change all too much in the results.\n                                            </p>\n                                        </Callout>\n                                    }\n                                </div>\n                            </div>\n                        } />\n                    </Tabs >\n                </div >\n\n                {\n                    includeFooter ? (\n                        <div className={Classes.DIALOG_FOOTER} >\n                            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                                <Tooltip2 content=\"Run Analysis\">\n                                    <Button disabled={!tmpInputValid} icon=\"function\" onClick={handleImport}>Analyze</Button>\n                                </Tooltip2>\n                            </div>\n                        </div>\n                    ) : (\n                        <div style={{ margin: \"0 20px\" }}>\n                        </div>\n                    )\n                }\n            </Dialog >\n        </>\n    );\n}\n\nexport default AnalysisDialog;\n","import { useContext } from 'react';\nimport { AppContext } from '../../context/AppContext';\n\nconst Stats = () => {\n    const { initDims, qcDims } = useContext(AppContext);\n\n    return (\n        <>\n            {\n                <span>\n                    {initDims ? `: ${initDims}` : \" \"}\n                    {qcDims ?  ` (${qcDims} after QC)` : \"\" }\n                </span>\n            }\n        </>\n    );\n};\n\nexport default Stats;\n","import {\n    Button,\n    Classes,\n    Drawer,\n    Position,\n} from \"@blueprintjs/core\";\nimport React, { useState, useContext } from 'react';\n\nimport { AppContext } from '../../context/AppContext';\n\nconst Logs = () => {\n    const { logs } = useContext(AppContext);\n\n    const [state, setState] = useState({\n        autoFocus: true,\n        canEscapeKeyClose: true,\n        canOutsideClickClose: true,\n        enforceFocus: true,\n        hasBackdrop: true,\n        isOpen: false,\n        position: Position.RIGHT,\n        size: undefined,\n        usePortal: true,\n    });\n\n    const handleOpen = () => setState({ isOpen: true });\n\n    const handleClose = () => setState({ isOpen: false });\n\n    return (\n        <>\n            <Button onClick={handleOpen} icon=\"wrench\" outlined={true}\n                intent=\"warning\"></Button>\n            <Drawer\n                icon=\"info-sign\"\n                onClose={handleClose}\n                title=\"What's happening ?\"\n                {...state}\n            >\n                <div className={Classes.DRAWER_BODY}>\n                    <div className={Classes.DIALOG_BODY}>\n                        <ul className=\"list\">\n                            {\n                                logs.map((x, i) => (\n                                    <li key={i}>{x}</li>\n                                ))\n                            }\n                        </ul>\n                    </div>\n                </div>\n            </Drawer>\n        </>\n    )\n}\n\nexport default Logs;\n","import {\n    Button, Classes, Dialog, H5, Card, Elevation, Position\n} from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport React, { useContext, useState, useCallback } from \"react\";\n\nimport { AppContext } from \"../../context/AppContext\";\n\nfunction IntroDialog({\n    buttonText,\n    includeFooter,\n    ...props\n}) {\n    const { setOpenInput } = useContext(AppContext);\n\n    const [isOpen, setIsOpen] = useState(true);\n    const [showClose, setShowClose] = useState(false);\n\n    const handleButtonClick = useCallback(() => {\n        setIsOpen(!isOpen);\n        setShowClose(true);\n    }, [isOpen]);\n    const handleClose = useCallback(() => setIsOpen(false), []);\n\n    const handleInputs = () => {\n        setOpenInput(true);\n        handleClose();\n    }\n\n    return (\n        <>\n            <Tooltip2 content=\"Some information about the app.\" position={Position.BOTTOM}>\n            <Button onClick={handleButtonClick} icon=\"info-sign\" intent=\"primary\" text=\"\" />\n            </Tooltip2>\n            <Dialog {...props} isOpen={isOpen} onClose={handleClose}>\n                <div className={Classes.DIALOG_BODY}>\n                    <Card elevation={Elevation.ZERO}>\n                        <p><strong>kana</strong> performs a standard scRNA-seq data analysis directly inside the browser.</p>\n\n                        <p>With just a few clicks, you can get a UMAP/t-SNE, clusters and their marker genes in an intuitive interface for further exploration.\n                            No need to transfer data, no need to install software, no need to configure a backend server -\n                            just point to a Matrix Market file and we'll analyze <em>your</em> data on <em>your</em> computer, no questions asked.\n                        </p>\n                        <p>Check out our <a href=\"https://github.com/jkanche/scran.js.app\" target=\"_blank\">GitHub page</a> for more details.\n                            Or you could just play around with the app to see what it can do.\n                        </p>\n                        <H5>Authors</H5>\n                        Jayaram Kancherla (<a href=\"https://github.com/jkanche\" target=\"_blank\"><strong>@jkanche</strong></a>),\n                        Aaron Lun (<a href=\"https://github.com/LTLA\" target=\"_blank\"><strong>@LTLA</strong></a>)\n                    </Card>\n                </div>\n                <div className={Classes.DIALOG_FOOTER}>\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                        {\n                            showClose ? <Button icon=\"cross\" onClick={handleClose}>Close</Button>\n                                :\n                                <Tooltip2 content=\"行くぞ!\">\n                                    <Button icon=\"bring-data\" onClick={handleInputs}>Get started</Button>\n                                </Tooltip2>\n                        }\n                    </div>\n                </div>\n            </Dialog>\n        </>\n    );\n}\n\nexport default IntroDialog;\n","import {\n  Alignment,\n  Button,\n  Navbar,\n  NavbarDivider,\n  NavbarGroup,\n  NavbarHeading,\n  ButtonGroup,\n  Menu,\n  MenuItem,\n  EditableText,\n  Position\n} from \"@blueprintjs/core\";\n\nimport { Popover2, Tooltip2 } from \"@blueprintjs/popover2\";\n\nimport React, { useContext, useState } from 'react';\n\nimport AnalysisDialog from '../Analysis';\nimport Stats from '../Stats';\nimport Logs from '../Logs';\nimport IntroDialog from \"../Intro\";\n\nimport { AppContext } from \"../../context/AppContext\";\n\nconst Header = () => {\n  // state for dialogs\n  const [state] = useState({\n    autoFocus: true,\n    canEscapeKeyClose: true,\n    canOutsideClickClose: false,\n    enforceFocus: false,\n    shouldReturnFocusOnClose: true,\n  });\n\n  const { setExportState, datasetName, setDatasetName, setIndexedDBState } = useContext(AppContext);\n\n  return (\n    <>\n      <Navbar className=\"bp3-dark\">\n        <NavbarGroup className=\"navbar-group\" align={Alignment.LEFT}>\n\n          <NavbarHeading>kana</NavbarHeading>\n\n          <NavbarDivider />\n          <span>Single cell RNA-seq analysis in the browser</span>\n          <NavbarDivider />\n\n          <AnalysisDialog\n            icon=\"document\"\n            title=\"Import dataset & update parameters (mouseover for info)\"\n            buttonText=\"Start Analysis\"\n            includeFooter={true}\n            {...state} />\n\n          <NavbarDivider />\n\n          <Tooltip2 content=\"Modify the dataset title here.\" position={Position.BOTTOM}>\n            <EditableText defaultValue={datasetName} intent=\"primary\"\n              onConfirm={(val) => { setDatasetName(val) }} />\n          </Tooltip2>\n\n          <Stats />\n          <NavbarDivider />\n\n          <Tooltip2 content=\"Save the analysis, either in your browser's cache or to a file on your computer.\" position={Position.BOTTOM}>\n            <ButtonGroup>\n              <Popover2 content={\n                <Menu>\n                  <MenuItem text=\"Save to browser\" icon=\"floppy-disk\"\n                    onClick={() => {\n                      setIndexedDBState(true);\n                    }} />\n                  <MenuItem text=\"Download to file\" icon=\"download\"\n                    onClick={() => {\n                      setExportState(true);\n                    }} />\n                </Menu>\n              } placement=\"bottom-start\">\n                <Button intent=\"warning\" rightIcon=\"caret-down\" text=\"Export\" />\n              </Popover2>\n            </ButtonGroup>\n          </Tooltip2>\n          <NavbarDivider />\n\n          <Tooltip2 content=\"What's happening under the hood? See the blow-by-blow logs as the analysis runs.\" position={Position.BOTTOM}>\n            <Logs />\n          </Tooltip2>\n          <NavbarDivider />\n\n          <IntroDialog\n            icon=\"document\"\n            title=\"Single-cell RNA-seq analysis in the browser\"\n            isOpen={true}\n            {...state}\n          />\n        </NavbarGroup>\n      </Navbar>\n    </>\n  );\n};\n\nexport default React.memo(Header);\n","const getMinMax = (arr) => {\n    var max = -Number.MAX_VALUE,\n        min = Number.MAX_VALUE;\n    arr.forEach(function (x) {\n        if (max < x) {\n            max = x;\n        }\n        if (min > x) {\n            min = x;\n        }\n    });\n    return [min, max];\n}\n\n// saving svg's from https://observablehq.com/@mbostock/saving-svg\n// ource credits : https://www.demo2s.com/javascript/javascript-d3-js-save-svg-to-png-image.html\nfunction serialize(svgNode) {\n    svgNode.setAttribute('xlink', 'http://www.w3.org/1999/xlink');\n    var cssStyleText = getCSSStyles(svgNode);\n    appendCSS(cssStyleText, svgNode);\n    \n    var serializer = new XMLSerializer();\n    var svgString = serializer.serializeToString(svgNode);\n    svgString = svgString.replace(/(\\w+)?:?xlink=/g, 'xmlns:xlink='); // Fix root xlink without namespace\n    svgString = svgString.replace(/NS\\d+:href/g, 'xlink:href'); // Safari NS namespace fix\n    return svgString;\n\n    function getCSSStyles(parentElement) {\n        var selectorTextArr = [];\n        // Add Parent element Id and Classes to the list\n        selectorTextArr.push('#' + parentElement.id);\n        \n        for (let c = 0; c < parentElement.classList.length; c++)\n            if (!contains('.' + parentElement.classList[c], selectorTextArr))\n                selectorTextArr.push('.' + parentElement.classList[c]);\n        // Add Children element Ids and Classes to the list\n        \n        var nodes = parentElement.getElementsByTagName(\"*\");\n        for (let i = 0; i < nodes.length; i++) {\n            var id = nodes[i].id;\n            if (!contains('#' + id, selectorTextArr))\n                selectorTextArr.push('#' + id);\n            var classes = nodes[i].classList;\n            for (let c = 0; c < classes.length; c++)\n                if (!contains('.' + classes[c], selectorTextArr))\n                    selectorTextArr.push('.' + classes[c]);\n        }\n        \n        // Extract CSS Rules\n        var extractedCSSText = \"\";\n        for (let i = 0; i < document.styleSheets.length; i++) {\n            var s = document.styleSheets[i];\n            try {\n                if (!s.cssRules) continue;\n            } catch (e) {\n                if (e.name !== 'SecurityError') throw e; // for Firefox\n                continue;\n            }\n            var cssRules = s.cssRules;\n            for (let r = 0; r < cssRules.length; r++) {\n                if (contains(cssRules[r].selectorText, selectorTextArr))\n                    extractedCSSText += cssRules[r].cssText;\n            }\n        }\n        \n        return extractedCSSText;\n        \n        function contains(str, arr) {\n            return arr.indexOf(str) === -1 ? false : true;\n        }\n    }\n    \n    function appendCSS(cssText, element) {\n        var styleElement = document.createElement(\"style\");\n        styleElement.setAttribute(\"type\", \"text/css\");\n        styleElement.innerHTML = cssText;\n        var refNode = element.hasChildNodes() ? element.children[0] : null;\n        element.insertBefore(styleElement, refNode);\n    }\n}\n\nfunction saveSVG(svgNode, width, height, filename) {\n    let svgString = serialize(svgNode);\n    var imgsrc = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString))); // Convert SVG string to data URL\n    var canvas = document.createElement(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    canvas.width = width;\n    canvas.height = height;\n    var image = new Image();\n    image.onload = () => {\n        context.clearRect(0, 0, width, height);\n        context.drawImage(image, 0, 0, width, height);\n        let dataBlob = canvas.toDataURL();\n        let tmpLink = document.createElement(\"a\");\n        tmpLink.href = dataBlob;\n        tmpLink.download = filename ? filename : 'plot.png';\n        tmpLink.click();\n    };\n    image.src = imgsrc;\n}\n\nexport { getMinMax, saveSVG };","import React, { useEffect, useRef } from \"react\";\nimport * as d3 from 'd3';\nimport { saveSVG } from './utils.js';\nimport { Button } from \"@blueprintjs/core\";\n\n// a typical d3 bar plot\nconst BarPlot = (props) => {\n    const container = useRef();\n\n    useEffect(() => {\n        let data = props?.data;\n        let propwidth = props?.width;\n        let color = props?.color;\n        let ymax = props?.ymax;\n\n        if (!ymax) {\n            ymax = Math.max(...data.map((d) => { return d.value; }));\n        }\n\n        if (!propwidth) {\n            propwidth = 325;\n        }\n\n        if (!color) {\n            color = \"#00B3A4\";\n        }\n\n        if (!data) return \"\";\n\n        let containerEl = container.current;\n        containerEl.innerHTML = \"\";\n\n        const margin = { top: 10, right: 30, bottom: 30, left: 40 },\n            width = propwidth - margin.left - margin.right,\n            height = 200 - margin.top - margin.bottom;\n\n        if (containerEl.querySelector(\"svg\")) {\n            containerEl.querySelector(\"svg\").innerHTML = \"\";\n        }\n\n        const svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                `translate(${margin.left},${margin.top})`);\n\n        var x = d3.scaleBand()\n            .range([0, width])\n            .domain(data.map((d) => { return d.key; }))\n            .padding(0.2);\n\n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x))\n            .selectAll(\"text\")\n            .attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n            .style(\"text-anchor\", \"end\");\n\n        var y = d3.scaleLinear()\n            .domain([0, ymax])\n            .range([height, 0]);\n\n        svg.append(\"g\")\n            .call(d3.axisLeft(y));\n\n        svg.selectAll(\"bars\")\n            .data(data)\n            .enter()\n            .append(\"rect\")\n            .attr(\"x\", (d) => { return x(d.key); })\n            .attr(\"y\", (d) => { return y(d.value); })\n            .attr(\"width\", x.bandwidth())\n            .attr(\"height\", (d) => { return height - y(d.value); })\n            .attr(\"fill\", (d, i) => {\n                if (Array.isArray(color)) {\n                    return color[i];\n                }\n                return color;\n            })\n    }, [props?.data]);\n\n    return (\n        <div className=\"imgplot-container\">\n            <Button small={true} className=\"imgplot-save\" icon=\"download\"\n                onClick={() => {\n                    saveSVG(d3.select(container.current.querySelector(\"svg\")).node(),\n                        2 * 325, 2 * 200, props?.filename);\n                }}>Download</Button>\n            <div ref={container}></div>\n        </div>\n    );\n};\n\nexport default React.memo(BarPlot);","import BarPlot from './BarPlot';\nimport React from 'react';\n\nconst PCABarPlot = (props) => {\n\n    let data = props?.pca?.var_exp;\n\n    if (!data) return \"\";\n\n    let chart_data = [];\n    Object.values(data)?.forEach((x, i) => {\n        chart_data.push({\n            key: i + 1,\n            value: x * 100\n        });\n    });\n\n    return (\n        <BarPlot filename={props?.title + \"_pca.png\"} data={chart_data} />\n    );\n};\n\nexport default React.memo(PCABarPlot);","import { randomColor } from 'randomcolor';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { AppContext } from '../../context/AppContext';\nimport BarPlot from './BarPlot';\n\nconst ClusterBarPlot = (props) => {\n\n    const [chartData, setChartData] = useState(null);\n\n    const { clusterColors, setClusterColors, datasetName } = useContext(AppContext);\n\n    useEffect(() => {\n        let data = props?.data?.clusters;\n\n        if (!data) return;\n        \n        let cluster_count = Math.max(...data) + 1;\n        let cluster_colors = null;\n        if (cluster_count > Object.keys(palette).length) {\n            cluster_colors = randomColor({ luminosity: 'dark', count: cluster_count + 1 });\n        } else {\n            cluster_colors = palette[cluster_count.toString()];\n        }\n        setClusterColors(cluster_colors);\n\n        let x = {};\n        for (var i = 0; i < data?.length; i++) {\n            var clus = data[i];\n            if (\"CLUS_\" + clus in x) {\n                x[\"CLUS_\" + clus]++;\n            } else {\n                x[\"CLUS_\" + clus] = 0;\n            }\n        }\n    \n        let chart_data = [];\n        Object.values(x)?.forEach((z, i) => {\n            chart_data.push({\n                key: i + 1,\n                value: z\n            });\n        });\n\n        setChartData(chart_data);\n    }, [props?.data]);\n\n    const palette = {\n        1: ['#1b9e77'],\n        2: ['#1b9e77', '#d95f02'],\n        3: ['#1b9e77', '#d95f02', '#7570b3'],\n        4: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a'],\n        5: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e'],\n        6: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02'],\n        7: [\n            '#1b9e77',\n            '#d95f02',\n            '#7570b3',\n            '#e7298a',\n            '#66a61e',\n            '#e6ab02',\n            '#a6761d',\n        ],\n        8: [\n            '#1b9e77',\n            '#d95f02',\n            '#7570b3',\n            '#e7298a',\n            '#66a61e',\n            '#e6ab02',\n            '#a6761d',\n            '#666666',\n        ],\n        9: [\n            '#a6cee3',\n            '#1f78b4',\n            '#b2df8a',\n            '#33a02c',\n            '#fb9a99',\n            '#e31a1c',\n            '#fdbf6f',\n            '#ff7f00',\n            '#cab2d6',\n        ],\n        10: [\n            '#a6cee3',\n            '#1f78b4',\n            '#b2df8a',\n            '#33a02c',\n            '#fb9a99',\n            '#e31a1c',\n            '#fdbf6f',\n            '#ff7f00',\n            '#cab2d6',\n            '#6a3d9a',\n        ],\n        11: [\n            '#a6cee3',\n            '#1f78b4',\n            '#b2df8a',\n            '#33a02c',\n            '#fb9a99',\n            '#e31a1c',\n            '#fdbf6f',\n            '#ff7f00',\n            '#cab2d6',\n            '#6a3d9a',\n            '#ffff99',\n        ],\n        12: [\n            '#a6cee3',\n            '#1f78b4',\n            '#b2df8a',\n            '#33a02c',\n            '#fb9a99',\n            '#e31a1c',\n            '#fdbf6f',\n            '#ff7f00',\n            '#cab2d6',\n            '#6a3d9a',\n            '#ffff99',\n            '#b15928',\n        ],\n    };\n\n    return (\n        clusterColors && <BarPlot filename={datasetName.split(\" \").join(\"_\") + \"_clusters.png\"} data={chartData} color={clusterColors} />\n    );\n};\n\nexport default React.memo(ClusterBarPlot);","import React, { useEffect, useRef } from \"react\";\nimport * as d3 from 'd3';\nimport { saveSVG } from './utils.js';\nimport { Button } from \"@blueprintjs/core\";\n\nconst ViolinPlotBasic = (props) => {\n    const container = useRef();\n\n    useEffect(() => {\n\n        let data = props?.rdata;\n        let propwidth = props?.width;\n        let color = props?.color;\n\n        if (!propwidth) {\n            propwidth = 200;\n        }\n\n        if (!color) {\n            color = \"#00B3A4\";\n        }\n\n        if (!data) return \"\";\n\n        let transform = props?.dataTransform;\n        let range = props?.range;\n        let threshold = props?.threshold;\n\n        if (transform === \"log\") {\n            data = data.map(x => Math.log2(x+1));\n            range = range.map(x => Math.log2(x+1));\n            threshold = Math.log2(threshold + 1);\n        }\n\n        let containerEl = container.current;\n        containerEl.innerHTML = \"\";\n\n        const margin = { top: 10, right: 30, bottom: 30, left: 40 },\n            width = propwidth - margin.left - margin.right,\n            height = 200 - margin.top - margin.bottom;\n\n        const svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                `translate(${margin.left},${margin.top})`);\n\n        var y = d3.scaleLinear()\n            .domain(range)\n            .range([height, 0])\n            .nice();\n\n        svg.append(\"g\").call(\n            d3.axisLeft(y)\n                .tickFormat(function (d) {\n                    return transform === \"log\" ? d3.format(props?.transform)(Math.pow(2, d)) : d3.format(props?.transform)(d);\n                }));\n\n        var x = d3.scaleBand()\n            .range([0, width])\n            .domain([props?.showLabel])\n            .padding(0.05)\n\n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x))\n\n        var histogram = d3.bin()\n            .domain(y.domain())\n            .thresholds(transform === \"log\" ? y.ticks(10): y.ticks(40))\n            .value(d => d);\n\n        let bins = histogram(data);\n        var max_bin = d3.max(bins, (d) => { return d.length; })\n\n        var xNum = d3.scaleLinear()\n            .range([0, x.bandwidth()])\n            .domain([-1, 1]);\n\n        svg\n            .selectAll(\"violins\")\n            .data([props?.label])\n            .enter()\n            .append(\"g\")\n            .attr(\"transform\", (d) => { return (\"translate(\" + x(d) + \" ,0)\") })\n            .append(\"path\")\n            .datum(() => { return bins })\n            .style(\"stroke\", \"none\")\n            .style(\"fill\", color)\n            .attr(\"d\", d3.area()\n                .x0((d) => { return (xNum(-d.length / max_bin)) })\n                .x1((d) => { return (xNum(d.length / max_bin)) })\n                .y((d) => { return (y(d.x0)) })\n                .curve(transform === \"log\" ? d3.curveBasis : d3.curveCatmullRom)\n            );\n\n        svg\n            .selectAll(\"threshold\")\n            .data([threshold])\n            .enter()\n            .append(\"line\")\n            .attr(\"transform\", () => { return (\"translate(\" + x(props?.label) + \" ,0)\") })\n            .attr(\"class\", \"threshold\")\n            .attr(\"x1\", 5)\n            .attr(\"y1\", (d) => y(d))\n            .attr(\"x2\", x.bandwidth() - 5)\n            .attr(\"y2\", (d) => y(d))\n            .attr(\"stroke-width\", 2)\n            .attr(\"stroke\", \"Orange\")\n            .on(\"mouseover\", function () {\n                var lines = d3.select(this);\n                lines.attr(\"stroke\", \"black\");\n                lines.attr(\"stroke-width\", \"8\");\n            })\n            .on(\"mouseout\", function () {\n                var lines = d3.select(this);\n                lines.attr(\"stroke\", \"Orange\");\n                lines.attr(\"stroke-width\", \"5\");\n            });\n    }, [props]);\n\n    return (\n        <div className=\"imgplot-container\">\n            <Button small={true} className=\"imgplot-save\" icon=\"download\"\n                onClick={() => {\n                    saveSVG(d3.select(container.current.querySelector(\"svg\")).node(),\n                        2 * 325, 2 * 200, props?.filename);\n                }}>Download</Button>\n            <div ref={container}></div>\n        </div>\n    );\n};\n\nexport default React.memo(ViolinPlotBasic);","import ViolinPlotBasic from './ViolinPlotBasic';\nimport './QCPlots.css';\nimport React from 'react';\nimport { useEffect, useState } from 'react';\n\n// shows the QC plots for sums, detected and proportion\n// transforms data to a log scale or %\nconst QCPlotMgr = (props) => {\n\n    const [qcData, setQCData] = useState(null);\n\n    useEffect(() => {\n        setQCData(props.data);\n    }, [props]);\n\n    return (\n        qcData && <div className=\"qc-plots\">\n            {\n                [\"sums\", \"detected\", \"proportion\"].map(x => {\n                    const props2 = {\n                        \"threshold\": qcData?.[\"thresholds\"]?.[x],\n                        \"range\": qcData?.[\"ranges\"]?.[x],\n                        \"label\": x,\n                        \"transform\": x === \"proportion\" ? \".2\" : \".2s\",\n                        \"showLabel\": x,\n                        \"dataTransform\": x === \"proportion\" ? null : \"log\",\n                        \"rdata\": qcData?.[\"data\"]?.[x]\n                    }\n                    return (\n                        <div key={x}>\n                            <ViolinPlotBasic\n                                filename={props?.title + \"_\" + x + \".png\"} {...props2} />\n                        </div>)\n                })\n            }\n        </div>\n    );\n};\n\nexport default React.memo(QCPlotMgr);","import { Button } from \"@blueprintjs/core\";\nimport { useEffect, useRef, useState, useContext } from \"react\";\nimport { AppContext } from \"../../context/AppContext\";\n\nimport './ImgPlot.css';\n\nconst ImgPlot = (props) => {\n    const container = useRef();\n    const [title, setTitle] = useState(null);\n\n    const { genesInfo, gene, geneColSel } = useContext(AppContext);\n\n    let data = props?.data;\n    let propwidth = props?.width;\n    let propheight = props?.height;\n    let color = props?.color;\n\n    if (!propwidth) {\n        propwidth = 325;\n    }\n\n    if (!propheight) {\n        propheight = 200\n    }\n\n    if (!color) {\n        color = \"#00B3A4\";\n    }\n\n    useEffect(() => {\n        let containerEL = container.current;\n        if (containerEL) {\n\n            if (data?.image) {\n                let ctx = containerEL.getContext(\"2d\");\n\n                var img = new Image();\n                img.onload = () => {\n                    ctx.drawImage(img, 0, 0, propwidth, propheight);\n                };\n                img.src = data?.image;\n                // ctx.putImageData(data?.image, 0, 0);\n            }\n\n            let text = ` ${data?.config?.embedding} `\n            if (data?.config?.gene) {\n                text += `⊃ ${genesInfo[geneColSel][gene]} `\n            }\n\n            if (data?.config?.highlight) {\n                String(data?.config?.highlight).startsWith(\"cs\") ?\n                text += `⊃ Custom Selection ${data?.config?.highlight} `\n                : text += `⊃ Cluster ${parseInt(data?.config?.highlight) + 1} `\n            }\n\n            setTitle(text);\n        }\n    }, []);\n\n    return (\n        <div className=\"imgplot-container\">\n            <h5>{title}</h5>\n            <Button small={true} className=\"imgplot-save\" icon=\"download\"\n                onClick={() => {\n                    let tmpLink = document.createElement(\"a\");\n                    tmpLink.href = data?.image;\n                    tmpLink.download = `${title.replace(\"⊃\", \"\").split(\" \").join(\"_\")}.png`;\n                    tmpLink.click();\n                }}>Download</Button>\n            <canvas className=\"imgplot-canvas\" width={propwidth} height={propheight} ref={container}></canvas>\n        </div>\n    );\n};\n\nexport default ImgPlot;","import React from \"react\";\nimport PCABarPlot from \"../Plots/PCABarPlot\";\nimport ClusterBarPlot from \"../Plots/ClusterBarPlot\";\nimport { useContext } from 'react';\nimport { AppContext } from './../../context/AppContext';\nimport { Card, Elevation } from \"@blueprintjs/core\";\nimport QCPlotMgr from \"../Plots/QCPlotMgr\";\n\nimport './Gallery.css';\nimport ImgPlot from \"../Plots/ImgPlot\";\n\nconst Gallery = () => {\n  const { pcaVarExp, qcData, clusterData, savedPlot,\n    datasetName } = useContext(AppContext);\n\n  return (\n    <>\n      <div className=\"gallery-cont\">\n        {\n          qcData && qcData?.[\"thresholds\"] ?\n            <Card className=\"gallery-elem\" elevation={Elevation.ONE}>\n              <h5>QC Statistics</h5>\n              <QCPlotMgr title={datasetName.split(\" \").join(\"_\")} data={qcData} />\n            </Card>\n            : \"\"\n        }\n        {\n          pcaVarExp ?\n            <Card className=\"gallery-elem\" elevation={Elevation.ONE}>\n              <h5>PCA (% variance explained)</h5>\n              <PCABarPlot title={datasetName.split(\" \").join(\"_\")} pca={pcaVarExp} />\n            </Card>\n            : \"\"\n        }\n        {\n          clusterData ?\n            <Card className=\"gallery-elem\" elevation={Elevation.ONE}>\n              <h5># of cells per cluster</h5>\n              <ClusterBarPlot data={clusterData} />\n            </Card>\n            : \"\"\n        }\n        {\n          savedPlot ?\n            savedPlot.map((x, i) => (\n              <Card key={i} className=\"gallery-elem\" elevation={Elevation.ONE}>\n                <ImgPlot data={x} />\n              </Card>\n            )\n            ) : \"\"\n        }\n      </div>\n    </>\n  );\n};\n\nexport default React.memo(Gallery);\n","/*\nRainbowVis-JS \nReleased under Eclipse Public License - v 1.0\n*/\n\nexport default function Rainbow() {\n\t\"use strict\";\n\tvar gradients = null;\n\tvar minNum = 0;\n\tvar maxNum = 100;\n\tvar colours = ['ff0000', 'ffff00', '00ff00', '0000ff'];\n\tsetColours(colours);\n\n\tfunction setColours(spectrum) {\n\t\tif (spectrum.length < 2) {\n\t\t\tthrow new Error('Rainbow must have two or more colours.');\n\t\t} else {\n\t\t\tvar increment = (maxNum - minNum) / (spectrum.length - 1);\n\t\t\tvar firstGradient = new ColourGradient();\n\t\t\tfirstGradient.setGradient(spectrum[0], spectrum[1]);\n\t\t\tfirstGradient.setNumberRange(minNum, minNum + increment);\n\t\t\tgradients = [firstGradient];\n\n\t\t\tfor (var i = 1; i < spectrum.length - 1; i++) {\n\t\t\t\tvar colourGradient = new ColourGradient();\n\t\t\t\tcolourGradient.setGradient(spectrum[i], spectrum[i + 1]);\n\t\t\t\tcolourGradient.setNumberRange(minNum + increment * i, minNum + increment * (i + 1));\n\t\t\t\tgradients[i] = colourGradient;\n\t\t\t}\n\n\t\t\tcolours = spectrum;\n\t\t}\n\t}\n\n\tthis.setSpectrum = function () {\n\t\tsetColours(arguments);\n\t\treturn this;\n\t}\n\n\tthis.setSpectrumByArray = function (array) {\n\t\tsetColours(array);\n\t\treturn this;\n\t}\n\n\tthis.colourAt = function (number) {\n\t\tif (isNaN(number)) {\n\t\t\tthrow new TypeError(number + ' is not a number');\n\t\t} else if (gradients.length === 1) {\n\t\t\treturn gradients[0].colourAt(number);\n\t\t} else {\n\t\t\tvar segment = (maxNum - minNum) / (gradients.length);\n\t\t\tvar index = Math.min(Math.floor((Math.max(number, minNum) - minNum) / segment), gradients.length - 1);\n\t\t\treturn gradients[index].colourAt(number);\n\t\t}\n\t}\n\n\tthis.colorAt = this.colourAt;\n\n\tthis.setNumberRange = function (minNumber, maxNumber) {\n\t\tif (maxNumber > minNumber) {\n\t\t\tminNum = minNumber;\n\t\t\tmaxNum = maxNumber;\n\t\t\tsetColours(colours);\n\t\t} else {\n\t\t\tthrow new RangeError('maxNumber (' + maxNumber + ') is not greater than minNumber (' + minNumber + ')');\n\t\t}\n\t\treturn this;\n\t}\n}\n\nfunction ColourGradient() {\n\t\"use strict\";\n\tvar startColour = 'ff0000';\n\tvar endColour = '0000ff';\n\tvar minNum = 0;\n\tvar maxNum = 100;\n\n\tthis.setGradient = function (colourStart, colourEnd) {\n\t\tstartColour = getHexColour(colourStart);\n\t\tendColour = getHexColour(colourEnd);\n\t}\n\n\tthis.setNumberRange = function (minNumber, maxNumber) {\n\t\tif (maxNumber > minNumber) {\n\t\t\tminNum = minNumber;\n\t\t\tmaxNum = maxNumber;\n\t\t} else {\n\t\t\tthrow new RangeError('maxNumber (' + maxNumber + ') is not greater than minNumber (' + minNumber + ')');\n\t\t}\n\t}\n\n\tthis.colourAt = function (number) {\n\t\treturn calcHex(number, startColour.substring(0, 2), endColour.substring(0, 2))\n\t\t\t+ calcHex(number, startColour.substring(2, 4), endColour.substring(2, 4))\n\t\t\t+ calcHex(number, startColour.substring(4, 6), endColour.substring(4, 6));\n\t}\n\n\tfunction calcHex(number, channelStart_Base16, channelEnd_Base16) {\n\t\tvar num = number;\n\t\tif (num < minNum) {\n\t\t\tnum = minNum;\n\t\t}\n\t\tif (num > maxNum) {\n\t\t\tnum = maxNum;\n\t\t}\n\t\tvar numRange = maxNum - minNum;\n\t\tvar cStart_Base10 = parseInt(channelStart_Base16, 16);\n\t\tvar cEnd_Base10 = parseInt(channelEnd_Base16, 16);\n\t\tvar cPerUnit = (cEnd_Base10 - cStart_Base10) / numRange;\n\t\tvar c_Base10 = Math.round(cPerUnit * (num - minNum) + cStart_Base10);\n\t\treturn formatHex(c_Base10.toString(16));\n\t}\n\n\tfunction formatHex(hex) {\n\t\tif (hex.length === 1) {\n\t\t\treturn '0' + hex;\n\t\t} else {\n\t\t\treturn hex;\n\t\t}\n\t}\n\n\tfunction isHexColour(string) {\n\t\tvar regex = /^#?[0-9a-fA-F]{6}$/i;\n\t\treturn regex.test(string);\n\t}\n\n\tfunction getHexColour(string) {\n\t\tif (isHexColour(string)) {\n\t\t\treturn string.substring(string.length - 6, string.length);\n\t\t} else {\n\t\t\tvar name = string.toLowerCase();\n\t\t\tif (colourNames.hasOwnProperty(name)) {\n\t\t\t\treturn colourNames[name];\n\t\t\t}\n\t\t\tthrow new Error(string + ' is not a valid colour.');\n\t\t}\n\t}\n\n\t// Extended list of CSS colornames s taken from\n\t// http://www.w3.org/TR/css3-color/#svg-color\n\tvar colourNames = {\n\t\taliceblue: \"F0F8FF\",\n\t\tantiquewhite: \"FAEBD7\",\n\t\taqua: \"00FFFF\",\n\t\taquamarine: \"7FFFD4\",\n\t\tazure: \"F0FFFF\",\n\t\tbeige: \"F5F5DC\",\n\t\tbisque: \"FFE4C4\",\n\t\tblack: \"000000\",\n\t\tblanchedalmond: \"FFEBCD\",\n\t\tblue: \"0000FF\",\n\t\tblueviolet: \"8A2BE2\",\n\t\tbrown: \"A52A2A\",\n\t\tburlywood: \"DEB887\",\n\t\tcadetblue: \"5F9EA0\",\n\t\tchartreuse: \"7FFF00\",\n\t\tchocolate: \"D2691E\",\n\t\tcoral: \"FF7F50\",\n\t\tcornflowerblue: \"6495ED\",\n\t\tcornsilk: \"FFF8DC\",\n\t\tcrimson: \"DC143C\",\n\t\tcyan: \"00FFFF\",\n\t\tdarkblue: \"00008B\",\n\t\tdarkcyan: \"008B8B\",\n\t\tdarkgoldenrod: \"B8860B\",\n\t\tdarkgray: \"A9A9A9\",\n\t\tdarkgreen: \"006400\",\n\t\tdarkgrey: \"A9A9A9\",\n\t\tdarkkhaki: \"BDB76B\",\n\t\tdarkmagenta: \"8B008B\",\n\t\tdarkolivegreen: \"556B2F\",\n\t\tdarkorange: \"FF8C00\",\n\t\tdarkorchid: \"9932CC\",\n\t\tdarkred: \"8B0000\",\n\t\tdarksalmon: \"E9967A\",\n\t\tdarkseagreen: \"8FBC8F\",\n\t\tdarkslateblue: \"483D8B\",\n\t\tdarkslategray: \"2F4F4F\",\n\t\tdarkslategrey: \"2F4F4F\",\n\t\tdarkturquoise: \"00CED1\",\n\t\tdarkviolet: \"9400D3\",\n\t\tdeeppink: \"FF1493\",\n\t\tdeepskyblue: \"00BFFF\",\n\t\tdimgray: \"696969\",\n\t\tdimgrey: \"696969\",\n\t\tdodgerblue: \"1E90FF\",\n\t\tfirebrick: \"B22222\",\n\t\tfloralwhite: \"FFFAF0\",\n\t\tforestgreen: \"228B22\",\n\t\tfuchsia: \"FF00FF\",\n\t\tgainsboro: \"DCDCDC\",\n\t\tghostwhite: \"F8F8FF\",\n\t\tgold: \"FFD700\",\n\t\tgoldenrod: \"DAA520\",\n\t\tgray: \"808080\",\n\t\tgreen: \"008000\",\n\t\tgreenyellow: \"ADFF2F\",\n\t\tgrey: \"808080\",\n\t\thoneydew: \"F0FFF0\",\n\t\thotpink: \"FF69B4\",\n\t\tindianred: \"CD5C5C\",\n\t\tindigo: \"4B0082\",\n\t\tivory: \"FFFFF0\",\n\t\tkhaki: \"F0E68C\",\n\t\tlavender: \"E6E6FA\",\n\t\tlavenderblush: \"FFF0F5\",\n\t\tlawngreen: \"7CFC00\",\n\t\tlemonchiffon: \"FFFACD\",\n\t\tlightblue: \"ADD8E6\",\n\t\tlightcoral: \"F08080\",\n\t\tlightcyan: \"E0FFFF\",\n\t\tlightgoldenrodyellow: \"FAFAD2\",\n\t\tlightgray: \"D3D3D3\",\n\t\tlightgreen: \"90EE90\",\n\t\tlightgrey: \"D3D3D3\",\n\t\tlightpink: \"FFB6C1\",\n\t\tlightsalmon: \"FFA07A\",\n\t\tlightseagreen: \"20B2AA\",\n\t\tlightskyblue: \"87CEFA\",\n\t\tlightslategray: \"778899\",\n\t\tlightslategrey: \"778899\",\n\t\tlightsteelblue: \"B0C4DE\",\n\t\tlightyellow: \"FFFFE0\",\n\t\tlime: \"00FF00\",\n\t\tlimegreen: \"32CD32\",\n\t\tlinen: \"FAF0E6\",\n\t\tmagenta: \"FF00FF\",\n\t\tmaroon: \"800000\",\n\t\tmediumaquamarine: \"66CDAA\",\n\t\tmediumblue: \"0000CD\",\n\t\tmediumorchid: \"BA55D3\",\n\t\tmediumpurple: \"9370DB\",\n\t\tmediumseagreen: \"3CB371\",\n\t\tmediumslateblue: \"7B68EE\",\n\t\tmediumspringgreen: \"00FA9A\",\n\t\tmediumturquoise: \"48D1CC\",\n\t\tmediumvioletred: \"C71585\",\n\t\tmidnightblue: \"191970\",\n\t\tmintcream: \"F5FFFA\",\n\t\tmistyrose: \"FFE4E1\",\n\t\tmoccasin: \"FFE4B5\",\n\t\tnavajowhite: \"FFDEAD\",\n\t\tnavy: \"000080\",\n\t\toldlace: \"FDF5E6\",\n\t\tolive: \"808000\",\n\t\tolivedrab: \"6B8E23\",\n\t\torange: \"FFA500\",\n\t\torangered: \"FF4500\",\n\t\torchid: \"DA70D6\",\n\t\tpalegoldenrod: \"EEE8AA\",\n\t\tpalegreen: \"98FB98\",\n\t\tpaleturquoise: \"AFEEEE\",\n\t\tpalevioletred: \"DB7093\",\n\t\tpapayawhip: \"FFEFD5\",\n\t\tpeachpuff: \"FFDAB9\",\n\t\tperu: \"CD853F\",\n\t\tpink: \"FFC0CB\",\n\t\tplum: \"DDA0DD\",\n\t\tpowderblue: \"B0E0E6\",\n\t\tpurple: \"800080\",\n\t\tred: \"FF0000\",\n\t\trosybrown: \"BC8F8F\",\n\t\troyalblue: \"4169E1\",\n\t\tsaddlebrown: \"8B4513\",\n\t\tsalmon: \"FA8072\",\n\t\tsandybrown: \"F4A460\",\n\t\tseagreen: \"2E8B57\",\n\t\tseashell: \"FFF5EE\",\n\t\tsienna: \"A0522D\",\n\t\tsilver: \"C0C0C0\",\n\t\tskyblue: \"87CEEB\",\n\t\tslateblue: \"6A5ACD\",\n\t\tslategray: \"708090\",\n\t\tslategrey: \"708090\",\n\t\tsnow: \"FFFAFA\",\n\t\tspringgreen: \"00FF7F\",\n\t\tsteelblue: \"4682B4\",\n\t\ttan: \"D2B48C\",\n\t\tteal: \"008080\",\n\t\tthistle: \"D8BFD8\",\n\t\ttomato: \"FF6347\",\n\t\tturquoise: \"40E0D0\",\n\t\tviolet: \"EE82EE\",\n\t\twheat: \"F5DEB3\",\n\t\twhite: \"FFFFFF\",\n\t\twhitesmoke: \"F5F5F5\",\n\t\tyellow: \"FFFF00\",\n\t\tyellowgreen: \"9ACD32\"\n\t}\n}\n\n// if (typeof module !== 'undefined') {\n//   module.exports = Rainbow;\n// }\n","import { ScatterGL } from 'scatter-gl';\nimport React, { useEffect, useRef, useContext, useState } from 'react';\nimport {\n    ControlGroup, Button, Icon, ButtonGroup, Callout, RangeSlider,\n    Divider,\n    Label,\n    Tag\n} from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\n\nimport { AppContext } from '../../context/AppContext';\nimport { getMinMax } from './utils';\n\nimport Rainbow from './rainbowvis';\nimport { randomColor } from 'randomcolor';\n\nimport \"./ScatterPlot.css\";\nimport { AppToaster } from \"../Spinners/AppToaster\";\n\nconst DimPlot = (props) => {\n    const container = useRef();\n\n    // ref to the plot object\n    const [scatterplot, setScatterplot] = useState(null);\n    // set which cluster to highlight, also for custom selections\n    const [clusHighlight, setClusHighlight] = useState(null);\n    // show a gradient on the plot ?\n    const [showGradient, setShowGradient] = useState(false);\n    // expression min & max\n    const [exprMinMax, setExprMinMax] = useState(null);\n    // user selected min and max from UI\n    const [sliderMinMax, setSliderMinMax] = useState(exprMinMax);\n    // gradient scale\n    const [gradient, setGradient] = useState(null);\n    // first render ?\n    const [renderCount, setRenderCount] = useState(true);\n\n    const { redDims, defaultRedDims, setDefaultRedDims, clusterData,\n        tsneData, umapData, clusterColors, setClusterColors,\n        gene, setGene, selectedClusterIndex, selectedClusterSummary,\n        customSelection, setCustomSelection,\n        setDelCustomSelection, setShowAnimation,\n        showAnimation, setTriggerAnimation,\n        savedPlot, setSavedPlot, selectedCluster,\n        genesInfo, geneColSel } = useContext(AppContext);\n\n    // keeps track of what points were selected in lasso selections\n    const [selectedPoints, setSelectedPoints] = useState(null);\n    // set mode for plot\n    const [plotMode, setPlotMode] = useState('PAN');\n\n    const max = Math.max(...clusterData?.clusters);\n\n    // if either gene or expression changes, compute gradients and min/max\n    useEffect(() => {\n        if (gene === null) {\n            setShowGradient(false);\n            setGradient(null);\n        }\n\n        let index = selectedClusterIndex?.[gene];\n        let expr = selectedClusterSummary?.[index]?.expr;\n\n        if (expr) {\n            let exprMinMax = getMinMax(expr);\n            let val = exprMinMax[1] === 0 ? 0.01 : exprMinMax[1];\n            let tmpgradient = new Rainbow();\n            tmpgradient.setSpectrum('#F5F8FA', \"#2965CC\");\n            tmpgradient.setNumberRange(0, val);\n            if (exprMinMax[0] !== exprMinMax[1]) {\n                setShowGradient(true);\n                setSliderMinMax([0, val]);\n                setExprMinMax([0, val]);\n            } else {\n                setShowGradient(false);\n                AppToaster.show({ icon: \"warning-sign\", intent: \"warning\", message: `${genesInfo[geneColSel][gene]} is not expressed in any cell (mean = 0)` })\n            }\n            setGradient(tmpgradient);\n        }\n    }, [selectedClusterIndex?.[gene], selectedClusterSummary?.[selectedClusterIndex?.[gene]]?.expr], gene);\n\n    // hook to also react when user changes the slider\n    useEffect(() => {\n\n        if (Array.isArray(sliderMinMax)) {\n            let tmpgradient = new Rainbow();\n            tmpgradient.setSpectrum('#F5F8FA', \"#2965CC\");\n            tmpgradient.setNumberRange(...sliderMinMax);\n            setGradient(tmpgradient);\n            setShowGradient(true);\n        }\n\n    }, [sliderMinMax]);\n\n    useEffect(() => {\n\n        const containerEl = container.current;\n\n        if (containerEl) {\n\n            let tmp_scatterplot = scatterplot;\n\n            // only create the plot object once\n            if (!tmp_scatterplot) {\n                const containerEl = container.current;\n\n                containerEl.style.width = \"95%\";\n                containerEl.style.height = \"95%\";\n\n                tmp_scatterplot = new ScatterGL(containerEl, {\n                    onSelect: (points) => {\n                        if (points.length !== 0) {\n                            setSelectedPoints(points);\n                        }\n                    },\n                    orbitControls: {\n                        zoomSpeed: 1.25,\n                    },\n                    styles: {\n                        point: {\n                            scaleDefault: 1,\n                            scaleSelected: 1.25,\n                            scaleHover: 1.25,\n                        }\n                    }\n                });\n\n                tmp_scatterplot.setPanMode();\n                setScatterplot(tmp_scatterplot);\n            }\n\n            let data = null;\n\n            if (showAnimation) {\n                data = props?.animateData;\n            } else {\n                if (defaultRedDims === \"TSNE\") {\n                    data = tsneData;\n                } else if (defaultRedDims === \"UMAP\") {\n                    data = umapData;\n                }\n            }\n\n            // if dimensions are available\n            if (data) {\n\n                let cluster_mappings = clusterData?.clusters;\n                const cluster_colors = clusterColors\n\n                let points = []\n                data.x.forEach((x, i) => {\n                    points.push([x, data.y[i]]);\n                });\n\n                let metadata = {\n                    clusters: cluster_mappings\n                };\n                const dataset = new ScatterGL.Dataset(points, metadata);\n\n                if (renderCount) {\n                    tmp_scatterplot.render(dataset);\n                    setRenderCount(false);\n                } else {\n                    tmp_scatterplot.updateDataset(dataset);\n                }\n\n                // callback for coloring cells on the plot\n                // by default chooses the cluster assigned color for the plot\n                // if a gradient bar is available, sets gradient \n                // if a cluster is highlighted, grays out all other cells except the cells\n                // in the cluster or selection\n                // priority of rendering\n                // gradient selection > cluster selection > graying out\n                // an initial implementation also used a per cluster gradient to color cells\n                // by expression, commmented out\n                tmp_scatterplot.setPointColorer((i, selectedIndices, hoverIndex) => {\n\n                    if (selectedIndices.has(i)) {\n                        return \"#30404D\";\n                    }\n\n                    if (clusHighlight != null) {\n                        if (!String(clusHighlight).startsWith(\"cs\")) {\n                            if (clusHighlight !== cluster_mappings[i]) return '#D3D3D3';\n                        } else {\n                            if (!customSelection[clusHighlight].includes(i)) return '#D3D3D3';\n                        }\n                    }\n\n                    if (gene !== null) {\n                        let index = selectedClusterIndex?.[gene];\n                        let expr = selectedClusterSummary?.[index]?.expr;\n\n                        if (Array.isArray(expr)) {\n                            return \"#\" + gradient.colorAt(expr?.[i]);\n                            // if we want per cell gradient \n                            // let colorGradients = cluster_colors.map(x => {\n                            //     var gradient = new Rainbow();\n                            //     gradient.setSpectrum('#D3D3D3', x);\n                            //     let val = exprMinMax[1] === 0 ? 0.01 : exprMinMax[1];\n                            //     gradient.setNumberRange(0, val);\n                            //     return gradient;\n                            // });\n\n                            // return \"#\" + colorGradients[cluster_mappings[i]].colorAt(selectedClusterSummary?.[gene]?.expr?.[i])\n                        }\n                    }\n\n                    if (clusHighlight != null && String(clusHighlight).startsWith(\"cs\")) {\n                        let tmpclus = parseInt(clusHighlight.replace(\"cs\", \"\"));\n                        return cluster_colors[max + tmpclus];\n                    } else {\n                        return cluster_colors[cluster_mappings[i]];\n                    }\n                });\n            }\n        }\n    }, [tsneData, umapData, props?.animateData, defaultRedDims, gradient, clusHighlight]);\n\n    const setInteraction = (x) => {\n        if (x === \"SELECT\") {\n            scatterplot.setSelectMode();\n            setPlotMode(\"SELECT\");\n        } else {\n            scatterplot.setPanMode();\n            setPlotMode(\"PAN\");\n        }\n    }\n\n    const clearPoints = () => {\n        setSelectedPoints(null);\n        scatterplot.select(null);\n    }\n\n    // save use selected selection of cells\n    const savePoints = () => {\n        // generate random color\n        let color = randomColor({ luminosity: 'dark', count: 1 });\n        let tmpcolor = [...clusterColors];\n        tmpcolor.push(color[0]);\n        setClusterColors(tmpcolor);\n\n        let cid = Object.keys(customSelection).length;\n        let tmpSelection = { ...customSelection };\n        tmpSelection[`cs${cid + 1}`] = selectedPoints;\n        setCustomSelection(tmpSelection);\n\n        setSelectedPoints(null);\n        scatterplot.select(null);\n    }\n\n    function handleSaveEmbedding() {\n        console.log(\"handleSaveEmbedding\");\n\n        const containerEl = container.current;\n        if (containerEl) {\n            // preserve drawing buffers is false, so render and capture state right away\n            scatterplot.renderScatterPlot();\n            const iData = scatterplot.scatterPlot.renderer.domElement.toDataURL();\n\n            let tmp = [...savedPlot];\n\n            tmp.push({\n                \"image\": iData,\n                \"config\": {\n                    \"cluster\": selectedCluster,\n                    \"gene\": gene,\n                    \"highlight\": clusHighlight,\n                    \"embedding\": defaultRedDims\n                }\n            });\n\n            setSavedPlot(tmp);\n        }\n    }\n\n    return (\n        <div className=\"scatter-plot\">\n            <ButtonGroup style={{ minWidth: 75, minHeight: 150 }}\n                fill={false}\n                large={false}\n                minimal={false}\n                vertical={true}\n                className='left-sidebar'\n            >\n                <Button className='dim-button'\n                    disabled={redDims.indexOf(\"TSNE\") === -1}\n                    onClick={() => setDefaultRedDims(\"TSNE\")}\n                    intent={defaultRedDims === \"TSNE\" ? \"primary\" : \"\"}\n                >\n                    <Icon icon=\"heatmap\"></Icon>\n                    <br />\n                    <span>t-SNE</span>\n                </Button>\n                <Button className='dim-button'\n                    disabled={redDims.indexOf(\"UMAP\") === -1}\n                    onClick={() => setDefaultRedDims(\"UMAP\")}\n                    intent={defaultRedDims === \"UMAP\" ? \"primary\" : \"\"}\n                >\n                    <Icon icon=\"heatmap\"></Icon><br />\n                    <span>UMAP</span>\n                </Button>\n                <Button className='dim-button'\n                    disabled={true}\n                >\n                    <Icon icon=\"heat-grid\"></Icon>\n                    <br />\n                    <span>HEATMAP (coming soon)</span>\n                </Button>\n            </ButtonGroup>\n            <div className=\"top-header\">\n                <ControlGroup fill={false} vertical={false}\n                    style={{\n                        marginRight: '4px'\n                    }}>\n                    <Tooltip2 content=\"Interactively visualize embeddings\">\n                        <Button icon=\"play\"\n                            onClick={() => {\n                                setShowAnimation(true); \n                                setTriggerAnimation(true)\n                            }}>Animate</Button>\n                    </Tooltip2>\n                    <Tooltip2 content=\"Save this embedding\">\n                        <Button icon=\"inheritance\"\n                            onClick={handleSaveEmbedding}>Save</Button>\n                    </Tooltip2>\n                </ControlGroup>\n                <ControlGroup fill={false} vertical={false}>\n                    <Button active={plotMode === \"PAN\"}\n                        intent={plotMode === \"PAN\" ? \"primary\" : \"none\"}\n                        icon=\"hand-up\" onClick={x => setInteraction(\"PAN\")}>Pan</Button>\n                    <Button active={plotMode === \"SELECT\"}\n                        intent={plotMode === \"SELECT\" ? \"primary\" : \"none\"}\n                        icon=\"widget\" onClick={x => setInteraction(\"SELECT\")}>Selection</Button>\n                </ControlGroup>\n            </div>\n            {\n                showAnimation ?\n                    <Label className='iter'>Iteration: {defaultRedDims === \"TSNE\" ? tsneData?.iteration : umapData?.iteration}</Label>\n                    : \"\"\n            }\n            <div className='dim-plot'>\n                {\n                    defaultRedDims ?\n                        <div ref={container} ></div> :\n                        \"Choose an Embedding... or Embeddings are being computed...\"\n                }\n            </div>\n            <div className='right-sidebar'>\n                <div style={{ width: '100%' }}>\n                    {\n                        <div className='right-sidebar-cluster'>\n                            <Callout title=\"CLUSTERS\">\n                                <ul>\n                                    {clusterColors?.map((x, i) => {\n                                        return i < clusterColors.length - Object.keys(customSelection).length ?\n                                            (<li key={i}\n                                                className={clusHighlight === i ? 'legend-highlight' : ''}\n                                                style={{ color: x }}\n                                                onClick={() => {\n                                                    if (i === clusHighlight) {\n                                                        setClusHighlight(null);\n                                                    } else {\n                                                        setClusHighlight(i);\n                                                    }\n                                                }}\n                                            > Cluster {i + 1} </li>)\n                                            : \"\"\n                                    })}\n                                </ul>\n                                {\n                                    Object.keys(customSelection).length > 0 ?\n                                        <div\n                                            style={{\n                                                paddingTop: '5px'\n                                            }}>\n                                            <span>Custom Selection &nbsp;\n                                                <Tooltip2 content=\"Custom selection of cells\" openOnTargetFocus={false}>\n                                                    <Icon icon=\"help\"></Icon>\n                                                </Tooltip2>\n                                            </span>\n                                            <ul>\n                                                {Object.keys(customSelection)?.map((x, i) => {\n                                                    return (<li key={x}\n                                                        className={clusHighlight === x ? 'legend-highlight' : ''}\n                                                        style={{ color: clusterColors[Math.max(...clusterData?.clusters) + 1 + i] }}\n                                                    >\n                                                        <div style={{\n                                                            display: 'inline-flex',\n                                                            alignItems: 'center',\n                                                            flexDirection: 'row'\n                                                        }}>\n                                                            <span\n                                                                style={{\n                                                                    alignSelf: 'center'\n                                                                }}\n                                                                onClick={() => {\n                                                                    if (x === clusHighlight) {\n                                                                        setClusHighlight(null);\n\n                                                                    } else {\n                                                                        setClusHighlight(x);\n                                                                    }\n                                                                }}>Custom Selection {x.replace(\"cs\", \"\")}\n                                                            </span>\n                                                            <Icon\n                                                                size={12}\n                                                                icon=\"trash\"\n                                                                style={{\n                                                                    paddingLeft: '2px'\n                                                                }}\n                                                                onClick={() => {\n                                                                    let tmpSel = { ...customSelection };\n                                                                    delete tmpSel[x];\n                                                                    setCustomSelection(tmpSel);\n\n                                                                    let tmpcolors = [...clusterColors];\n                                                                    tmpcolors = tmpcolors.slice(0, tmpcolors.length - 1);\n                                                                    setClusterColors(tmpcolors);\n\n                                                                    setDelCustomSelection(x);\n\n                                                                    if (clusHighlight === x) {\n                                                                        setClusHighlight(null);\n                                                                    }\n                                                                }}></Icon>\n                                                        </div>\n                                                    </li>)\n                                                })}\n                                            </ul>\n                                        </div>\n                                        :\n                                        \"\"\n                                }\n                            </Callout>\n                            {\n                                selectedPoints && selectedPoints.length > 0 ?\n                                    <div>\n                                        <Divider />\n                                        <span>Selection &nbsp;\n                                            <Tooltip2 content=\"save this selection of cells\" openOnTargetFocus={false}>\n                                                <Icon icon=\"help\"></Icon>\n                                            </Tooltip2>\n                                        </span>\n                                        <div className='selection-container'>\n                                            <span>{selectedPoints.length} cells selected</span>\n                                            <div className='selection-button-container'>\n                                                <Button small={true} intent='primary'\n                                                    onClick={savePoints}>Save</Button>\n                                                <Button small={true}\n                                                    onClick={clearPoints}>Clear</Button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    :\n                                    \"\"\n                            }\n                        </div>\n                    }\n                    {showGradient ?\n                        <div className='right-sidebar-slider'>\n                            <Divider />\n                            <Callout>\n                                <span>Gradient for <Tag\n                                    minimal={true}\n                                    intent='primary' onRemove={() => {\n                                        setGene(null);\n                                    }}>{genesInfo[geneColSel][gene]}</Tag>&nbsp;\n                                    <Tooltip2 content=\"Use the slider to adjust the color gradient of the plot. Useful when data is skewed\n                                by either a few lowly or highly expressed cells\" openOnTargetFocus={false}>\n                                        <Icon icon=\"help\"></Icon>\n                                    </Tooltip2>\n                                </span>\n                                <div className='dim-slider-container'>\n                                    <div className='dim-slider-gradient'>\n                                        {/* <span>{Math.round(exprMinMax[0])}</span>&nbsp; */}\n                                        <div\n                                            style={{\n                                                backgroundImage: `linear-gradient(to right, #F5F8FA ${(sliderMinMax[0] - exprMinMax[0]) * 100 / (exprMinMax[1] - exprMinMax[0])}%, ${((sliderMinMax[1] + sliderMinMax[0] - (2 * exprMinMax[0]))) * 100 / (2 * (exprMinMax[1] - exprMinMax[0]))}%, #2965CC ${(100 - (exprMinMax[1] - sliderMinMax[1]) * 100 / (exprMinMax[1] - exprMinMax[0]))}%)`,\n                                                width: '175px', height: '15px',\n                                            }}></div>&nbsp;\n                                        {/* <span>{Math.round(exprMinMax[1])}</span> */}\n                                    </div>\n                                    <div className='dim-range-slider'>\n                                        <RangeSlider\n                                            min={Math.round(exprMinMax[0])}\n                                            max={Math.round(exprMinMax[1])}\n                                            stepSize={Math.round(exprMinMax[1] - exprMinMax[0]) / 10}\n                                            labelValues={[Math.round(exprMinMax[0]), Math.round(exprMinMax[1])]}\n                                            onChange={(range) => { setSliderMinMax(range) }}\n                                            value={[Math.round(sliderMinMax[0]), Math.round(sliderMinMax[1])]}\n                                            vertical={false}\n                                        />\n                                    </div>\n                                </div>\n                            </Callout>\n                        </div>\n                        :\n                        \"\"\n                    }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default React.memo(DimPlot);\n","import { useEffect, useRef } from \"react\";\nimport * as d3 from 'd3';\n\nconst StackedHistogram = (props) => {\n    const container = useRef();\n\n    useEffect(() => {\n\n        let data = props?.data;\n        let propwidth = props?.width;\n        let color = props?.color;\n        let clusters = props?.clusters;\n        let clusterlabel = props?.clusterlabel;\n\n        if (!propwidth) {\n            propwidth = 325;\n        }\n\n        if (!color) {\n            color = \"#00B3A4\";\n        }\n\n        if (!data) return \"\";\n\n        let containerEl = container.current;\n        containerEl.innerHTML = \"\";\n\n        const margin = { top: 10, right: 30, bottom: 30, left: 40 },\n            width = propwidth - margin.left - margin.right,\n            height = 150 - margin.top - margin.bottom;\n\n        const svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                `translate(${margin.left},${margin.top})`);\n\n        const x = d3.scaleLinear()\n            .domain(d3.extent(data))\n            .range([0, width]);\n\n        svg.append(\"g\")\n            .attr(\"transform\", `translate(0, ${height/2})`)\n            .call(d3.axisBottom(x)\n                .ticks(5)\n                .tickValues(d3.extent(data)));\n\n        const histogram = d3.bin()\n            .value((d) => { return d; })\n            .domain(x.domain())\n            .thresholds(d3.thresholdScott);\n\n        const allCells = histogram(data.filter((d, i) => { return clusters?.[i] === 0 }));\n        const clusterCells = histogram(data.filter((d, i) => { return clusters?.[i] === 1 }));\n        const allCellsMax = d3.max(allCells, (d) => { return d.length; });\n        const clusterCellsMax = d3.max(clusterCells, (d) => { return d.length; });\n        \n        const y = d3.scaleLinear()\n            .range([height, 0])\n            .domain([-1, 1]);\n\n        // svg.append(\"g\")\n        //     .call(d3.axisLeft(y));\n\n        svg.selectAll(\"rectAll\")\n            .data(allCells)\n            .join(\"rect\")\n            .attr(\"x\", 1)\n            .attr(\"transform\", (d) => { return `translate(${x(d.x0)} , ${y(0)})` })\n            .attr(\"width\", (d) => { return x(d.x1) - x(d.x0) - 1; })\n            .attr(\"height\", (d) => { return y(-d.length/allCellsMax) - height/2; })\n            .style(\"fill\", \"#D3D3D3\")\n            .style(\"opacity\", 0.6)\n\n        svg.selectAll(\"rectCluster\")\n            .data(clusterCells)\n            .enter()\n            .append(\"rect\")\n            .attr(\"x\", 1)\n            .attr(\"transform\", (d) => { return `translate(${x(d.x0)}, ${y(d.length/clusterCellsMax)})` })\n            .attr(\"width\", (d) => { return x(d.x1) - x(d.x0) - 1; })\n            .attr(\"height\", (d) => { return height/2 - y(d.length/clusterCellsMax); })\n            .style(\"fill\", color)\n            .style(\"opacity\", 0.6)\n\n        // svg.append(\"circle\").attr(\"cx\", width - 50).attr(\"cy\", 5).attr(\"r\", 3).style(\"fill\", \"#D3D3D3\")\n        // svg.append(\"circle\").attr(\"cx\", width - 50).attr(\"cy\", 15).attr(\"r\", 3).style(\"fill\", color)\n        \n        svg.append(\"text\").attr(\"x\", width - 20).attr(\"y\", y(-0.5)).text(\"other cells\")\n            .style(\"font-size\", \"10px\").attr(\"alignment-baseline\", \"middle\");\n        \n        if (clusterlabel.startsWith(\"Custom\")) {\n            let text = clusterlabel.split(\" \");\n            text.forEach((t, i) => {\n                svg.append(\"text\").attr(\"x\", width - 20).attr(\"y\", y(0.7 - (i * 0.17))).text(t)\n                .style(\"font-size\", \"10px\").attr(\"alignment-baseline\", \"middle\")\n                .style(\"fill\", color);\n            });\n        } else {\n            svg.append(\"text\").attr(\"x\", width - 20).attr(\"y\", y(0.5)).text(clusterlabel)\n            .style(\"font-size\", \"10px\").attr(\"alignment-baseline\", \"middle\")\n            .style(\"fill\", color);\n        }\n    }, []);\n\n    return (\n        <div ref={container}></div>\n    );\n};\n\nexport default StackedHistogram;","import { useRef } from \"react\";\n\n// uses two divs to fill out bars given various props\nconst Cell = (props) => {\n    const container = useRef();\n\n    let propwidth = props?.width;\n    let minmax = props?.minmax;\n    let score = props?.score;\n    let colorscale = props?.colorscale;\n    let colorscore = props?.colorscore;\n    let color = props?.color;\n\n    let percWidth = ((score - minmax[0]) / (minmax[1] - minmax[0]));\n\n    if (!propwidth) {\n        propwidth = \"100%\";\n    }\n\n    if (!color) {\n        color = \"#00B3A4\";\n    }\n\n    return (\n        <div ref={container}\n            style={{\n                width: propwidth, height: '15px',\n                margin: '1px', border: '1px solid gainsboro',\n                alignItems: 'center'\n            }}>\n            {colorscale ?\n                <div style={{\n                    width: `${colorscore * 100}%`,\n                    backgroundColor: colorscale(colorscore),\n                    height: '100%'\n                }}></div>\n                :\n                <div style={{\n                    width: `${percWidth * 100}%`,\n                    backgroundColor: color,\n                    height: '100%'\n                }}>\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default Cell;","import { useRef } from \"react\";\nimport * as d3 from 'd3';\n\n// similar to cell, but fills the entire div, \n// width is not controlled in this case\nconst HeatmapCell = (props) => {\n    const container = useRef();\n\n    let propwidth = props?.width;\n    let score = props?.score;\n    let minmax = props?.minmax;\n\n    // inverted scale - blue for +ve, red for -ve\n    var lower = minmax[0];\n    var upper = minmax[1];\n\n    var limit = 0;\n    if (lower < 0) {\n        limit = -lower;\n    }\n    if (upper > 0 && upper > limit) {\n        limit = upper;\n    }\n    const detectedScale = d3.scaleSequential(d3.interpolateRdYlBu).domain([limit, -limit]);\n\n    if (!propwidth) {\n        propwidth = \"100%\";\n    }\n\n    return (\n        <div ref={container}\n            style={{\n                width: propwidth, height: '15px',\n                margin: '1px', border: '1px solid gainsboro',\n                alignItems: 'center',\n                backgroundColor: detectedScale(score)\n            }}>\n            <div style={{\n                width: '100%',\n                backgroundColor: detectedScale(score),\n                height: '100%'\n            }}></div>\n        </div>\n    );\n};\n\nexport default HeatmapCell;\n","import React, { useEffect, useContext, useState, useMemo } from 'react';\nimport {\n    Button, H4, H5, Icon, Collapse, InputGroup,\n    RangeSlider, Tag, HTMLSelect, Classes, Card, Elevation\n} from \"@blueprintjs/core\";\nimport { Popover2 } from \"@blueprintjs/popover2\";\nimport { Virtuoso } from 'react-virtuoso';\nimport * as d3 from 'd3';\n\nimport { AppContext } from '../../context/AppContext';\nimport StackedHistogram from '../Plots/StackedHistogram';\n\nimport Cell from '../Plots/Cell.js';\nimport HeatmapCell from '../Plots/HeatmapCell';\nimport './markers.css';\n\nconst MarkerPlot = () => {\n\n    const {\n        genesInfo, clusterData, selectedClusterSummary, setSelectedClusterSummary,\n        selectedCluster, setSelectedCluster, setClusterRank,\n        setReqGene, clusterColors, gene, setGene,\n        customSelection, geneColSel, setGeneColSel } = useContext(AppContext);\n\n    // what cluster is selected\n    const [clusSel, setClusSel] = useState(null);\n    // binary vector for stacked histogram plots, this cluster (1) vs others (0)\n    const [clusArrayStacked, setClusArrayStacked] = useState(null);\n    // gene search\n    const [searchInput, setSearchInput] = useState(null);\n\n    // ranges for various marker stats\n    const [meanMinMax, setMeanMinMax] = useState(null);\n    const [deltaMinMax, setDeltaMinMax] = useState(null);\n    const [lfcMinMax, setLfcMinMax] = useState(null);\n    const [detectedMinMax, setDetectedMinMax] = useState(null);\n    const [minMaxs, setMinMaxs] = useState(null);\n\n    // stores range filters from UI\n    const [markerFilter, setMarkerFilter] = useState({});\n    // records to show after filtering\n    const [prosRecords, setProsRecords] = useState(null);\n\n    // scale to use for detected on expression bar\n    const detectedScale = d3.interpolateRdYlBu; //d3.interpolateRdBu;\n    // d3.scaleSequential()\n    // .domain([0, 1])\n    // .range([\"red\", \"blue\"])\n    // .interpolate(d3.interpolateHcl);\n\n    // if a cluster changes, its summary data is requested from the worker\n    // pre-process results for UI\n    useEffect(() => {\n        if (!selectedClusterSummary) return selectedClusterSummary;\n\n        let trecs = selectedClusterSummary;\n\n        if (trecs.length === 0) return trecs;\n\n        let tmpmeans = trecs.map(x => x?.mean);\n        let tmeanMinMax = d3.extent(tmpmeans)\n        let tmeanval = tmeanMinMax[1] === 0 ? 0.01 : tmeanMinMax[1];\n        setMeanMinMax([parseFloat(tmeanMinMax[0].toFixed(2)), parseFloat(tmeanval.toFixed(2))]);\n\n        let tmpdeltas = trecs.map(x => x?.delta);\n        let tdeltaMinMax = d3.extent(tmpdeltas)\n        let tdeltaval = tdeltaMinMax[1] === 0 ? 0.01 : tdeltaMinMax[1];\n        setDeltaMinMax([parseFloat(tdeltaMinMax[0].toFixed(2)), parseFloat(tdeltaval.toFixed(2))]);\n\n        let tmplfcs = trecs.map(x => x?.lfc);\n        let tlfcsMinMax = d3.extent(tmplfcs)\n        let tlfcsval = tlfcsMinMax[1] === 0 ? 0.01 : tlfcsMinMax[1];\n        setLfcMinMax([parseFloat(tlfcsMinMax[0].toFixed(2)), parseFloat(tlfcsval.toFixed(2))]);\n\n        let tmpdetects = trecs.map(x => x?.detected);\n        let tdetectsMinMax = d3.extent(tmpdetects)\n        let tdetecval = tdetectsMinMax[1] === 0 ? 0.01 : tdetectsMinMax[1];\n        setDetectedMinMax([parseFloat(tdetectsMinMax[0].toFixed(2)), parseFloat(tdetecval.toFixed(2))]);\n\n        setMinMaxs({\n            \"lfc\": [parseFloat(tlfcsMinMax[0].toFixed(2)), parseFloat(tlfcsval.toFixed(2))],\n            \"mean\": [parseFloat(tmeanMinMax[0].toFixed(2)), parseFloat(tmeanval.toFixed(2))],\n            \"detected\": [parseFloat(tdetectsMinMax[0].toFixed(2)), parseFloat(tdetecval.toFixed(2))],\n            \"delta\": [parseFloat(tdeltaMinMax[0].toFixed(2)), parseFloat(tdeltaval.toFixed(2))],\n        });\n\n        let sortedRows = [...trecs];\n\n        setMarkerFilter({\n            \"lfc\": [0, parseFloat(tlfcsval.toFixed(2))],\n            \"delta\": [0, parseFloat(tdeltaval.toFixed(2))]\n        });\n\n        setProsRecords(sortedRows);\n\n    }, [selectedClusterSummary]);\n\n    // genes to show, hook for filters and input\n    const sortedRows = useMemo(() => {\n\n        if (!prosRecords) return [];\n\n        let sortedRows = prosRecords;\n        if (markerFilter) {\n            for (let key in markerFilter) {\n                let range = markerFilter[key];\n                if (range[0] === minMaxs[key][0] && range[1] === minMaxs[key][1]) continue;\n                sortedRows = sortedRows.filter((x) => x[key] >= range[0] && x[key] <= range[1]);\n            }\n        }\n\n        if (!searchInput || searchInput === \"\") return sortedRows;\n\n        sortedRows = sortedRows.filter((x) => genesInfo[geneColSel][x.gene].toLowerCase().indexOf(searchInput.toLowerCase()) !== -1);\n        return sortedRows;\n    }, [prosRecords, searchInput, markerFilter]);\n\n    // update clusters when custom selection is made in the UI\n    useEffect(() => {\n        if (clusterData?.clusters) {\n            let max_clusters = Math.max(...clusterData.clusters);\n\n            let clus = [];\n            for (let i = 0; i < max_clusters + 1; i++) {\n                clus.push(i + 1);\n            }\n\n            clus = clus.concat(Object.keys(customSelection));\n\n            setClusSel(clus);\n            if (selectedCluster === null) {\n                setSelectedCluster(0);\n            }\n        }\n    }, [clusterData, customSelection, selectedCluster]);\n\n    // hook for figure out this vs other cells for stacked histograms\n    useEffect(() => {\n        var clusArray = [];\n        if (String(selectedCluster).startsWith(\"cs\")) {\n            clusterData?.clusters?.forEach((x, i) => customSelection[selectedCluster].includes(i) ? clusArray.push(1) : clusArray.push(0));\n        } else {\n            clusterData?.clusters?.forEach(x => x === selectedCluster ? clusArray.push(1) : clusArray.push(0));\n        }\n        setClusArrayStacked(clusArray);\n    }, [selectedCluster]);\n\n    const handleMarkerFilter = (val, key) => {\n\n        let tmp = { ...markerFilter };\n        tmp[key] = val;\n        setMarkerFilter(tmp);\n    }\n\n    const createColorScale = (lower, upper) => {\n        if (lower > 0) {\n            return `linear-gradient(to right, yellow 0%, red 100%)`;\n        } else if (upper < 0) {\n            return `linear-gradient(to right, blue 0%, yellow 100%)`;\n        } else {\n            var limit = 0;\n            if (lower < 0) {\n                limit = -lower;\n            }\n            if (upper > 0 && upper > limit) {\n                limit = upper;\n            }\n            var scaler = d3.scaleSequential(d3.interpolateRdYlBu).domain([limit, -limit]);\n\n            var leftcol = scaler(lower);\n            var rightcol = scaler(upper);\n            var midprop = Math.round(-lower / (upper - lower) * 100);\n            return `linear-gradient(to right, ${leftcol} 0%, yellow ${midprop}%, ${rightcol} 100%)`;\n        }\n    };\n\n    return (\n        <div className='marker-container'>\n            <H4>Marker Genes\n                <Popover2\n                    popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                    hasBackdrop={false}\n                    interactionKind=\"hover\"\n                    placement='left'\n                    hoverOpenDelay={500}\n                    modifiers={{\n                        arrow: { enabled: true },\n                        flip: { enabled: true },\n                        preventOverflow: { enabled: true },\n                    }}\n                    content={\n                        <Card style={{\n                            width: '450px'\n                        }} elevation={Elevation.ZERO}\n                        >\n                            <H5>Explore markers for various clusters</H5>\n                            <p>Choose the effect size and summary statistic to use for ranking markers. For each gene, effect sizes are computed by pairwise comparisons between clusters:</p>\n                            <ul>\n                                <li><strong><em>Cohen's d</em></strong> is the ratio of the log-fold change to the average standard deviation between two clusters.</li>\n                                <li>The area under the curve (<strong><em>AUC</em></strong>) is the probability that a randomly chosen observation from one cluster is greater than a randomly chosen observation from another cluster.</li>\n                                <li>The log-fold change (<strong><em>lfc</em></strong>) is the difference in the mean log-expression between two clusters.</li>\n                                <li>The <strong><em>Δ-detected</em></strong> is the difference in the detected proportions between two clusters.</li>\n                            </ul>\n                            <p>For each cluster, the effect sizes from the comparisons to all other clusters are summarized into a single statistic for ranking purposes:</p>\n                            <ul>\n                                <li><strong><em>mean</em></strong> uses the mean effect sizes from all pairwise comparisons. This generally provides a good compromise between exclusitivity and robustness.</li>\n                                <li><strong><em>min</em></strong> uses the minimum effect size from all pairwise comparisons. This promotes markers that are exclusively expressed in the chosen cluster, but will perform poorly if no such genes exist.</li>\n                                <li><strong><em>min-rank</em></strong> ranks genes according to their best rank in each of the individual pairwise comparisons. This is the most robust as the combination of top-ranked genes will always be able to distinguish the chosen cluster from the other clusters, but may not give high rankings to exclusive genes.</li>\n                            </ul>\n                        </Card>\n                    }\n                >\n                    <Icon style={{\n                        marginBottom: '4px',\n                        marginLeft: '5px'\n                    }} size={12} icon=\"help\"></Icon>\n                </Popover2>\n            </H4>\n            {\n                clusSel ?\n                    <HTMLSelect\n                        onChange={(x) => {\n                            setGene(null);\n                            let tmpselection = x.currentTarget?.value;\n                            if (tmpselection.startsWith(\"Cluster\")) {\n                                tmpselection = parseInt(tmpselection.replace(\"Cluster \", \"\")) - 1\n                            } else if (tmpselection.startsWith(\"Custom\")) {\n                                tmpselection = tmpselection.replace(\"Custom Selection \", \"\")\n                            }\n                            setSelectedCluster(tmpselection);\n\n                            setMarkerFilter({});\n                            setGene(null);\n                        }}>\n                        {\n                            clusSel.map((x, i) => (\n                                <option key={i}>{String(x).startsWith(\"cs\") ? \"Custom Selection\" : \"Cluster\"} {x}</option>\n                            ))\n                        }\n                    </HTMLSelect>\n                    : \"\"\n            }\n            {\n                selectedClusterSummary ?\n                    <div className='marker-table'>\n                        <div className='marker-header'>\n                            <InputGroup\n                                leftIcon=\"search\"\n                                small={true}\n                                placeholder=\"Search gene...\"\n                                type={\"text\"}\n                                onChange={(e) => setSearchInput(e.target.value)}\n                            />\n                            <span>\n                                <Popover2\n                                    popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                    hasBackdrop={false}\n                                    interactionKind=\"hover\"\n                                    placement='left'\n                                    hoverOpenDelay={500}\n                                    modifiers={{\n                                        arrow: { enabled: true },\n                                        flip: { enabled: true },\n                                        preventOverflow: { enabled: true },\n                                    }}\n                                    content={\n                                        <Card style={{\n                                            width: '450px'\n                                        }} elevation={Elevation.ZERO}\n                                        >\n                                            <p>Choose the effect size and summary statistic to use for ranking markers. For each gene, effect sizes are computed by pairwise comparisons between clusters:</p>\n                                            <ul>\n                                                <li><strong><em>Cohen's d</em></strong> is the ratio of the log-fold change to the average standard deviation between two clusters.</li>\n                                                <li>The area under the curve (<strong><em>AUC</em></strong>) is the probability that a randomly chosen observation from one cluster is greater than a randomly chosen observation from another cluster.</li>\n                                                <li>The log-fold change (<strong><em>lfc</em></strong>) is the difference in the mean log-expression between two clusters.</li>\n                                                <li>The <strong><em>Δ-detected</em></strong> is the difference in the detected proportions between two clusters.</li>\n                                            </ul>\n                                            <p>For each cluster, the effect sizes from the comparisons to all other clusters are summarized into a single statistic for ranking purposes:</p>\n                                            <ul>\n                                                <li><strong><em>mean</em></strong> uses the mean effect sizes from all pairwise comparisons. This generally provides a good compromise between exclusitivity and robustness.</li>\n                                                <li><strong><em>min</em></strong> uses the minimum effect size from all pairwise comparisons. This promotes markers that are exclusively expressed in the chosen cluster, but will perform poorly if no such genes exist.</li>\n                                                <li><strong><em>min-rank</em></strong> ranks genes according to their best rank in each of the individual pairwise comparisons. This is the most robust as the combination of top-ranked genes will always be able to distinguish the chosen cluster from the other clusters, but may not give high rankings to exclusive genes.</li>\n                                            </ul>\n                                        </Card>\n                                    }\n                                >\n                                    <Icon intent=\"warning\" icon=\"sort\" style={{\n                                        paddingRight: '5px'\n                                    }}></Icon>\n                                </Popover2>\n                                <HTMLSelect\n                                    onChange={(x) => {\n                                        setClusterRank(x.currentTarget.value);\n                                    }} defaultValue={\"cohen-min-rank\"}>\n                                    <option>cohen-min</option>\n                                    <option>cohen-mean</option>\n                                    <option>cohen-min-rank</option>\n                                    <option>auc-min</option>\n                                    <option>auc-mean</option>\n                                    <option>auc-min-rank</option>\n                                    <option>lfc-min</option>\n                                    <option>lfc-mean</option>\n                                    <option>lfc-min-rank</option>\n                                    <option>delta-d-min</option>\n                                    <option>delta-d-mean</option>\n                                    <option>delta-d-min-rank</option>\n                                </HTMLSelect>\n                            </span>\n                        </div>\n                        <Virtuoso\n                            components={{\n                                Item: ({ children, ...props }) => {\n                                    return (\n                                        <div className='row-card' {...props}>\n                                            {children}\n                                        </div>\n                                    );\n                                },\n                                Header: () => {\n                                    return (<div className='row-container row-header'>\n                                        <span>\n                                            <HTMLSelect large={false} minimal={true} defaultValue={geneColSel}\n                                                onChange={(nval, val) => setGeneColSel(nval?.currentTarget?.value)}>\n                                                {\n                                                    Object.keys(genesInfo).map((x, i) => (\n                                                        <option key={i}>{x}</option>\n                                                    ))\n                                                }\n                                            </HTMLSelect>\n                                        </span>\n                                        <span>Log-FC &nbsp;\n                                            <Popover2\n                                                popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                                hasBackdrop={false}\n                                                interactionKind=\"hover\"\n                                                placement='auto'\n                                                hoverOpenDelay={500}\n                                                modifiers={{\n                                                    arrow: { enabled: true },\n                                                    flip: { enabled: true },\n                                                    preventOverflow: { enabled: true },\n                                                }}\n                                                content={\n                                                    <Card style={{\n                                                        width: '250px'\n                                                    }} elevation={Elevation.ZERO}>\n                                                        <p>Log-fold change in expression between cells inside and outside the cluster.</p><p>\n                                                            Use the color scale below to apply a filter on this statistic.</p></Card>\n                                                }>\n                                                <Icon style={{\n                                                    marginBottom: '1px'\n                                                }} size={8} icon=\"help\"></Icon>\n                                            </Popover2></span>\n                                        <span>Δ-detected &nbsp;\n                                            <Popover2\n                                                popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                                hasBackdrop={false}\n                                                interactionKind=\"hover\"\n                                                placement='auto'\n                                                hoverOpenDelay={500}\n                                                modifiers={{\n                                                    arrow: { enabled: true },\n                                                    flip: { enabled: true },\n                                                    preventOverflow: { enabled: true },\n                                                }}\n                                                content={\n                                                    <Card style={{\n                                                        width: '250px'\n                                                    }} elevation={Elevation.ZERO}>\n                                                        <p>\n                                                            Difference in the proportion of detected genes inside and outside the cluster. </p><p>\n                                                            Use the color scale below to apply a filter on this statistic.\n                                                        </p>\n                                                    </Card>}>\n                                                <Icon style={{\n                                                    marginBottom: '1px'\n                                                }} size={8} icon=\"help\"></Icon>\n                                            </Popover2></span>\n                                        <span>Expression &nbsp;\n                                            <Popover2\n                                                popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                                hasBackdrop={false}\n                                                interactionKind=\"hover\"\n                                                placement='auto'\n                                                hoverOpenDelay={500}\n                                                modifiers={{\n                                                    arrow: { enabled: true },\n                                                    flip: { enabled: true },\n                                                    preventOverflow: { enabled: true },\n                                                }}\n                                                content={\n                                                    <Card style={{\n                                                        width: '250px'\n                                                    }} elevation={Elevation.ZERO}>\n                                                        <p>The intensity of color represents the mean expression of the gene in this cluster,\n                                                            while the length of the bar represents the percentage of cells in which any expression is detected.\n                                                        </p>\n                                                    </Card>}>\n                                                <Icon style={{\n                                                    marginBottom: '1px'\n                                                }} size={8} icon=\"help\"></Icon>\n                                            </Popover2>\n                                        </span>\n                                    </div>)\n                                }\n                            }}\n                            className='marker-list'\n                            totalCount={sortedRows.length}\n                            itemContent={index => {\n                                const row = sortedRows[index];\n                                const rowexp = row.expanded;\n                                const rowExpr = row.expr;\n\n                                return (\n                                    <div>\n                                        <div className='row-container'>\n                                            <span style={{\n                                                color: row.gene === gene ?\n                                                    String(selectedCluster).startsWith(\"cs\") ? clusterColors[Math.max(...clusterData?.clusters) + parseInt(selectedCluster.replace(\"cs\", \"\"))] : clusterColors[selectedCluster]\n                                                    : 'black'\n                                            }}\n                                                className={row.gene === gene ? 'marker-gene-title-selected' : 'marker-gene-title'}>{genesInfo[geneColSel][row.gene]}</span>\n                                            {\n                                                <Popover2\n                                                    popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                                    hasBackdrop={false}\n                                                    interactionKind=\"hover\"\n                                                    placement='auto'\n                                                    hoverOpenDelay={500}\n                                                    modifiers={{\n                                                        arrow: { enabled: true },\n                                                        flip: { enabled: true },\n                                                        preventOverflow: { enabled: true },\n                                                    }}\n                                                    content={\n                                                        <Card elevation={Elevation.ZERO}>\n                                                            <table>\n                                                                <tr>\n                                                                    <td></td>\n                                                                    <th scope=\"col\">{genesInfo[geneColSel][row.gene]}</th>\n                                                                    <th scope=\"col\">This cluster</th>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Log-FC</th>\n                                                                    <td>{row.lfc.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{lfcMinMax[0].toFixed(2)}, {lfcMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Δ-detected</th>\n                                                                    <td>{row.delta.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{deltaMinMax[0].toFixed(2)}, {deltaMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Detected</th>\n                                                                    <td>{row.detected.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{detectedMinMax[0].toFixed(2)}, {detectedMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Expression</th>\n                                                                    <td>{row.mean.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{meanMinMax[0].toFixed(2)}, {meanMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                            </table>\n                                                        </Card>\n                                                    }>\n                                                    <HeatmapCell minmax={lfcMinMax} colorscale={d3.interpolateRdBu} score={row.lfc} />\n                                                </Popover2>\n                                            }\n                                            {\n                                                <Popover2\n                                                    popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                                    hasBackdrop={false}\n                                                    interactionKind=\"hover\"\n                                                    placement='auto'\n                                                    hoverOpenDelay={500}\n                                                    modifiers={{\n                                                        arrow: { enabled: true },\n                                                        flip: { enabled: true },\n                                                        preventOverflow: { enabled: true },\n                                                    }}\n                                                    content={\n                                                        <Card elevation={Elevation.ZERO}>\n                                                            <table>\n                                                                <tr>\n                                                                    <td></td>\n                                                                    <th scope=\"col\">{genesInfo[geneColSel][row.gene]}</th>\n                                                                    <th scope=\"col\">This cluster</th>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Δ-detected</th>\n                                                                    <td>{row.delta.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{deltaMinMax[0].toFixed(2)}, {deltaMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Detected</th>\n                                                                    <td>{row.detected.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{detectedMinMax[0].toFixed(2)}, {detectedMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Log-FC</th>\n                                                                    <td>{row.lfc.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{lfcMinMax[0].toFixed(2)}, {lfcMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Expression</th>\n                                                                    <td>{row.mean.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{meanMinMax[0].toFixed(2)}, {meanMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                            </table>\n                                                        </Card>\n                                                    }>\n                                                    <HeatmapCell minmax={deltaMinMax} colorscale={d3.interpolateRdBu} score={row.delta} />\n                                                </Popover2>}\n                                            {\n                                                <Popover2\n                                                    popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                                    hasBackdrop={false}\n                                                    interactionKind=\"hover\"\n                                                    placement='auto'\n                                                    hoverOpenDelay={500}\n                                                    modifiers={{\n                                                        arrow: { enabled: true },\n                                                        flip: { enabled: true },\n                                                        preventOverflow: { enabled: true },\n                                                    }}\n                                                    content={\n                                                        <Card elevation={Elevation.ZERO}>\n                                                            <table>\n                                                                <tr>\n                                                                    <td></td>\n                                                                    <th scope=\"col\">{genesInfo[geneColSel][row.gene]}</th>\n                                                                    <th scope=\"col\">This cluster</th>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Expression</th>\n                                                                    <td>{row.mean.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{meanMinMax[0].toFixed(2)}, {meanMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Log-FC</th>\n                                                                    <td>{row.lfc.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{lfcMinMax[0].toFixed(2)}, {lfcMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Δ-detected</th>\n                                                                    <td>{row.delta.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{deltaMinMax[0].toFixed(2)}, {deltaMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Detected</th>\n                                                                    <td>{row.detected.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{detectedMinMax[0].toFixed(2)}, {detectedMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                            </table>\n                                                        </Card>\n                                                    }>\n                                                    <Cell minmax={meanMinMax} colorscale={detectedScale}\n                                                        score={row.mean} colorscore={row.detected}\n                                                    />\n                                                </Popover2>}\n                                            <div className='row-action'>\n                                                <Button icon={rowexp ? 'minus' : 'plus'} small={true} fill={false}\n                                                    className='row-action'\n                                                    onClick={() => {\n                                                        let tmp = [...selectedClusterSummary];\n                                                        tmp[index].expanded = !tmp[index].expanded;\n                                                        setSelectedClusterSummary(tmp);\n                                                        if (!rowExpr) {\n                                                            setReqGene(row.gene);\n                                                        }\n                                                    }}\n                                                >\n                                                </Button>\n                                                <Button small={true} fill={false}\n                                                    className='row-action'\n                                                    onClick={() => {\n                                                        if (row.gene === gene) {\n                                                            setGene(null);\n                                                        } else {\n                                                            setGene(row.gene);\n                                                            if (!rowExpr) {\n                                                                setReqGene(row.gene);\n                                                            }\n                                                        }\n                                                    }}\n                                                >\n                                                    <Icon icon={'tint'}\n                                                        color={row.gene === gene ?\n                                                            String(selectedCluster).startsWith(\"cs\") ? clusterColors[Math.max(...clusterData?.clusters) + parseInt(selectedCluster.replace(\"cs\", \"\"))] : clusterColors[selectedCluster]\n                                                            : ''}\n                                                    ></Icon>\n                                                </Button>\n                                            </div>\n                                        </div>\n                                        <Collapse isOpen={rowexp}>\n                                            {/* <Histogram data={rowExpr} color={clusterColors[selectedCluster]} /> */}\n                                            {rowExpr && <StackedHistogram data={rowExpr}\n                                                color={String(selectedCluster).startsWith(\"cs\") ? clusterColors[Math.max(...clusterData?.clusters) + parseInt(selectedCluster.replace(\"cs\", \"\"))] : clusterColors[selectedCluster]}\n                                                clusterlabel={String(selectedCluster).startsWith(\"cs\") ? `Custom Selection ${selectedCluster}` : `Cluster ${parseInt(selectedCluster + 1)}`}\n                                                clusters={clusArrayStacked} />}\n                                        </Collapse>\n                                    </div>\n                                )\n                            }}\n                        />\n                        <div className='marker-footer'>\n                            <H5 className='marker-footer-title'>Filter Markers</H5>\n\n                            <div className='marker-filter-container'>\n                                <Tag className=\"marker-filter-container-tag\" minimal={true} intent='primary'>Log-FC</Tag>\n                                {/* <Histogram data={lfcs} height={35} minmax={lfcMinMax}/> */}\n                                {lfcMinMax &&\n                                    <div className='marker-slider-container'>\n                                        <div className='marker-filter-gradient'>\n                                            <div\n                                                style={{\n                                                    backgroundImage: createColorScale(lfcMinMax[0], lfcMinMax[1]),\n                                                    width: '100%', height: '5px',\n                                                }}></div>&nbsp;\n                                        </div>\n                                        <RangeSlider\n                                            className='marker-filter-slider'\n                                            min={lfcMinMax[0]}\n                                            max={lfcMinMax[1]}\n                                            labelValues={lfcMinMax}\n                                            stepSize={parseFloat((Math.abs(lfcMinMax[1] - lfcMinMax[0]) / 20).toFixed(2))}\n                                            onChange={(val) => handleMarkerFilter(val, \"lfc\")}\n                                            value={markerFilter?.[\"lfc\"] ? markerFilter?.[\"lfc\"] : [0, lfcMinMax[1]]}\n                                            vertical={false}\n                                        />\n                                    </div>}\n                            </div>\n\n                            <div className='marker-filter-container'>\n                                <Tag className=\"marker-filter-container-tag\" minimal={true} intent='primary'>Δ-detected</Tag>\n                                {/* <Histogram data={deltas} height={35} color=\"#4580E6\" minmax={deltaMinMax} /> */}\n                                {deltaMinMax &&\n                                    <div className='marker-slider-container'>\n                                        <div className='marker-filter-gradient'>\n                                            <div\n                                                style={{\n                                                    backgroundImage: createColorScale(deltaMinMax[0], deltaMinMax[1]),\n                                                    width: '100%', height: '5px',\n                                                }}></div>&nbsp;\n                                        </div>\n                                        <RangeSlider\n                                            className='marker-filter-slider'\n                                            min={deltaMinMax[0]}\n                                            max={deltaMinMax[1]}\n                                            labelValues={deltaMinMax}\n                                            stepSize={parseFloat((Math.abs(deltaMinMax[1] - deltaMinMax[0]) / 20).toFixed(2))}\n                                            onChange={(val) => handleMarkerFilter(val, \"delta\")}\n                                            value={markerFilter?.[\"delta\"] ? markerFilter?.[\"delta\"] : [0, deltaMinMax[1]]}\n                                            vertical={false}\n                                        />\n                                    </div>}\n                            </div>\n\n                            <div className='marker-filter-container'>\n                                <Tag className=\"marker-filter-container-tag\" minimal={true} intent='primary'>Expression (mean)</Tag>\n                                {/* <Histogram data={means} height={35} minmax={meanMinMax} /> */}\n                                {meanMinMax &&\n                                    <div className='marker-slider-container'>\n                                        <div className='marker-filter-gradient'>\n                                            <div\n                                                style={{\n                                                    backgroundImage: `linear-gradient(to right, #F5F8FA, #2965CC)`,\n                                                    width: '100%', height: '5px',\n                                                }}></div>&nbsp;\n                                        </div>\n                                        <RangeSlider\n                                            className='marker-filter-slider'\n                                            min={meanMinMax[0]}\n                                            max={meanMinMax[1]}\n                                            labelValues={meanMinMax}\n                                            stepSize={parseFloat((Math.abs(meanMinMax[1] - meanMinMax[0]) / 20).toFixed(2))}\n                                            onChange={(val) => handleMarkerFilter(val, \"mean\")}\n                                            value={markerFilter?.[\"mean\"] ? markerFilter?.[\"mean\"] : meanMinMax}\n                                            vertical={false}\n                                        />\n                                    </div>}\n                            </div>\n\n                            <div className='marker-filter-container'>\n                                <Tag className=\"marker-filter-container-tag\" minimal={true} intent='primary'>Expression (detected)</Tag>\n                                {/* <Histogram data={detects} height={35} minmax={detectedMinMax} /> */}\n                                {detectedMinMax &&\n                                    <div className='marker-slider-container'>\n                                        {/* <div className='marker-filter-gradient'>\n                                            <div\n                                                style={{\n                                                    backgroundImage: `linear-gradient(to right, yellow 33%, red 50%, blue 100%)`,\n                                                    width: '100%', height: '5px',\n                                                }}></div>&nbsp;\n                                        </div> */}\n                                        <RangeSlider\n                                            className='marker-filter-slider'\n                                            min={detectedMinMax[0]}\n                                            max={detectedMinMax[1]}\n                                            labelValues={detectedMinMax}\n                                            stepSize={parseFloat((Math.abs(detectedMinMax[1] - detectedMinMax[0]) / 20).toFixed(2))}\n                                            onChange={(val) => handleMarkerFilter(val, \"detected\")}\n                                            value={markerFilter?.[\"detected\"] ? markerFilter?.[\"detected\"] : detectedMinMax}\n                                            vertical={false}\n                                        />\n                                    </div>}\n                            </div>\n                        </div>\n                    </div>\n                    : \"\"\n            }\n        </div>\n    );\n};\n\nexport default React.memo(MarkerPlot);\n","import { useEffect, useRef } from \"react\";\n\nimport './Pong.css';\nimport './coffee.css';\nimport { Label } from \"@blueprintjs/core\";\n\nconst Pong = () => {\n    const container = useRef();\n\n    useEffect(() => {\n\n        const elem = container.current;\n\n        // Global Variables\n        var DIRECTION = {\n            IDLE: 0,\n            UP: 1,\n            DOWN: 2,\n            LEFT: 3,\n            RIGHT: 4\n        };\n\n        var rounds = [5, 5, 3, 3, 2];\n        var colors = ['#1abc9c', '#2ecc71', '#3498db', '#e74c3c', '#9b59b6'];\n\n        // The ball object (The cube that bounces back and forth)\n        var Ball = {\n            new: function (incrementedSpeed) {\n                return {\n                    width: 18,\n                    height: 18,\n                    x: (this.canvas.width / 2) - 9,\n                    y: (this.canvas.height / 2) - 9,\n                    moveX: DIRECTION.IDLE,\n                    moveY: DIRECTION.IDLE,\n                    speed: incrementedSpeed || 9\n                };\n            }\n        };\n\n        // The paddle object (The two lines that move up and down)\n        var Paddle = {\n            new: function (side) {\n                return {\n                    width: 18,\n                    height: 70,\n                    x: side === 'left' ? 150 : this.canvas.width - 150,\n                    y: (this.canvas.height / 2) - 35,\n                    score: 0,\n                    move: DIRECTION.IDLE,\n                    speed: 10\n                };\n            }\n        };\n\n        var Game = {\n            initialize: function () {\n                this.canvas = elem.querySelector('canvas');\n                this.context = this.canvas.getContext('2d');\n\n                this.canvas.width = 1400;\n                this.canvas.height = 1000;\n\n                this.canvas.style.width = (this.canvas.width / 2) + 'px';\n                this.canvas.style.height = (this.canvas.height / 2) + 'px';\n\n                this.player = Paddle.new.call(this, 'left');\n                this.paddle = Paddle.new.call(this, 'right');\n                this.ball = Ball.new.call(this);\n\n                this.paddle.speed = 8;\n                this.running = this.over = false;\n                this.turn = this.paddle;\n                this.timer = this.round = 0;\n                this.color = '#2c3e50';\n\n                Pong.menu();\n                Pong.listen();\n            },\n\n            endGameMenu: function (text) {\n                // Change the canvas font size and color\n                Pong.context.font = '50px Courier New';\n                Pong.context.fillStyle = this.color;\n\n                // Draw the rectangle behind the 'Press any key to begin' text.\n                Pong.context.fillRect(\n                    Pong.canvas.width / 2 - 350,\n                    Pong.canvas.height / 2 - 48,\n                    700,\n                    100\n                );\n\n                // Change the canvas color;\n                Pong.context.fillStyle = '#ffffff';\n\n                // Draw the end game menu text ('Game Over' and 'Winner')\n                Pong.context.fillText(text,\n                    Pong.canvas.width / 2,\n                    Pong.canvas.height / 2 + 15\n                );\n\n                setTimeout(function () {\n                    Pong = Object.assign({}, Game);\n                    Pong.initialize();\n                }, 3000);\n            },\n\n            menu: function () {\n                // Draw all the Pong objects in their current state\n                Pong.draw();\n\n                // Change the canvas font size and color\n                this.context.font = '50px Courier New';\n                this.context.fillStyle = this.color;\n\n                // Draw the rectangle behind the 'Press any key to begin' text.\n                this.context.fillRect(\n                    this.canvas.width / 2 - 350,\n                    this.canvas.height / 2 - 48,\n                    700,\n                    100\n                );\n\n                // Change the canvas color;\n                this.context.fillStyle = '#ffffff';\n\n                // Draw the 'press any key to begin' text\n                this.context.fillText('Press any key to begin',\n                    this.canvas.width / 2,\n                    this.canvas.height / 2 + 15\n                );\n            },\n\n            // Update all objects (move the player, paddle, ball, increment the score, etc.)\n            update: function () {\n                if (!this.over) {\n                    // If the ball collides with the bound limits - correct the x and y coords.\n                    if (this.ball.x <= 0) Pong._resetTurn.call(this, this.paddle, this.player);\n                    if (this.ball.x >= this.canvas.width - this.ball.width) Pong._resetTurn.call(this, this.player, this.paddle);\n                    if (this.ball.y <= 0) this.ball.moveY = DIRECTION.DOWN;\n                    if (this.ball.y >= this.canvas.height - this.ball.height) this.ball.moveY = DIRECTION.UP;\n\n                    // Move player if they player.move value was updated by a keyboard event\n                    if (this.player.move === DIRECTION.UP) this.player.y -= this.player.speed;\n                    else if (this.player.move === DIRECTION.DOWN) this.player.y += this.player.speed;\n\n                    // On new serve (start of each turn) move the ball to the correct side\n                    // and randomize the direction to add some challenge.\n                    if (Pong._turnDelayIsOver.call(this) && this.turn) {\n                        this.ball.moveX = this.turn === this.player ? DIRECTION.LEFT : DIRECTION.RIGHT;\n                        this.ball.moveY = [DIRECTION.UP, DIRECTION.DOWN][Math.round(Math.random())];\n                        this.ball.y = Math.floor(Math.random() * this.canvas.height - 200) + 200;\n                        this.turn = null;\n                    }\n\n                    // If the player collides with the bound limits, update the x and y coords.\n                    if (this.player.y <= 0) this.player.y = 0;\n                    else if (this.player.y >= (this.canvas.height - this.player.height)) this.player.y = (this.canvas.height - this.player.height);\n\n                    // Move ball in intended direction based on moveY and moveX values\n                    if (this.ball.moveY === DIRECTION.UP) this.ball.y -= (this.ball.speed / 1.5);\n                    else if (this.ball.moveY === DIRECTION.DOWN) this.ball.y += (this.ball.speed / 1.5);\n                    if (this.ball.moveX === DIRECTION.LEFT) this.ball.x -= this.ball.speed;\n                    else if (this.ball.moveX === DIRECTION.RIGHT) this.ball.x += this.ball.speed;\n\n                    // Handle paddle (AI) UP and DOWN movement\n                    if (this.paddle.y > this.ball.y - (this.paddle.height / 2)) {\n                        if (this.ball.moveX === DIRECTION.RIGHT) this.paddle.y -= this.paddle.speed / 1.5;\n                        else this.paddle.y -= this.paddle.speed / 4;\n                    }\n                    if (this.paddle.y < this.ball.y - (this.paddle.height / 2)) {\n                        if (this.ball.moveX === DIRECTION.RIGHT) this.paddle.y += this.paddle.speed / 1.5;\n                        else this.paddle.y += this.paddle.speed / 4;\n                    }\n\n                    // Handle paddle (AI) wall collision\n                    if (this.paddle.y >= this.canvas.height - this.paddle.height) this.paddle.y = this.canvas.height - this.paddle.height;\n                    else if (this.paddle.y <= 0) this.paddle.y = 0;\n\n                    // Handle Player-Ball collisions\n                    if (this.ball.x - this.ball.width <= this.player.x && this.ball.x >= this.player.x - this.player.width) {\n                        if (this.ball.y <= this.player.y + this.player.height && this.ball.y + this.ball.height >= this.player.y) {\n                            this.ball.x = (this.player.x + this.ball.width);\n                            this.ball.moveX = DIRECTION.RIGHT;\n\n                            // beep1.play();\n                        }\n                    }\n\n                    // Handle paddle-ball collision\n                    if (this.ball.x - this.ball.width <= this.paddle.x && this.ball.x >= this.paddle.x - this.paddle.width) {\n                        if (this.ball.y <= this.paddle.y + this.paddle.height && this.ball.y + this.ball.height >= this.paddle.y) {\n                            this.ball.x = (this.paddle.x - this.ball.width);\n                            this.ball.moveX = DIRECTION.LEFT;\n\n                            // beep1.play();\n                        }\n                    }\n                }\n\n                // Handle the end of round transition\n                // Check to see if the player won the round.\n                if (this.player.score === rounds[this.round]) {\n                    // Check to see if there are any more rounds/levels left and display the victory screen if\n                    // there are not.\n                    if (!rounds[this.round + 1]) {\n                        this.over = true;\n                        setTimeout(function () { Pong.endGameMenu('Winner!'); }, 1000);\n                    } else {\n                        // If there is another round, reset all the values and increment the round number.\n                        this.color = this._generateRoundColor();\n                        this.player.score = this.paddle.score = 0;\n                        this.player.speed += 0.5;\n                        this.paddle.speed += 1;\n                        this.ball.speed += 1;\n                        this.round += 1;\n\n                        // beep3.play();\n                    }\n                }\n                // Check to see if the paddle/AI has won the round.\n                else if (this.paddle.score === rounds[this.round]) {\n                    this.over = true;\n                    setTimeout(function () { Pong.endGameMenu('Game Over!'); }, 1000);\n                }\n            },\n\n            // Draw the objects to the canvas element\n            draw: function () {\n                // Clear the Canvas\n                this.context.clearRect(\n                    0,\n                    0,\n                    this.canvas.width,\n                    this.canvas.height\n                );\n\n                // Set the fill style to black\n                this.context.fillStyle = this.color;\n\n                // Draw the background\n                this.context.fillRect(\n                    0,\n                    0,\n                    this.canvas.width,\n                    this.canvas.height\n                );\n\n                // Set the fill style to white (For the paddles and the ball)\n                this.context.fillStyle = '#ffffff';\n\n                // Draw the Player\n                this.context.fillRect(\n                    this.player.x,\n                    this.player.y,\n                    this.player.width,\n                    this.player.height\n                );\n\n                // Draw the Paddle\n                this.context.fillRect(\n                    this.paddle.x,\n                    this.paddle.y,\n                    this.paddle.width,\n                    this.paddle.height\n                );\n\n                // Draw the Ball\n                if (Pong._turnDelayIsOver.call(this)) {\n                    this.context.fillRect(\n                        this.ball.x,\n                        this.ball.y,\n                        this.ball.width,\n                        this.ball.height\n                    );\n                }\n\n                // Draw the net (Line in the middle)\n                this.context.beginPath();\n                this.context.setLineDash([7, 15]);\n                this.context.moveTo((this.canvas.width / 2), this.canvas.height - 140);\n                this.context.lineTo((this.canvas.width / 2), 140);\n                this.context.lineWidth = 10;\n                this.context.strokeStyle = '#ffffff';\n                this.context.stroke();\n\n                // Set the default canvas font and align it to the center\n                this.context.font = '100px Courier New';\n                this.context.textAlign = 'center';\n\n                // Draw the players score (left)\n                this.context.fillText(\n                    this.player.score.toString(),\n                    (this.canvas.width / 2) - 300,\n                    200\n                );\n\n                // Draw the paddles score (right)\n                this.context.fillText(\n                    this.paddle.score.toString(),\n                    (this.canvas.width / 2) + 300,\n                    200\n                );\n\n                // Change the font size for the center score text\n                this.context.font = '30px Courier New';\n\n                // Draw the winning score (center)\n                this.context.fillText(\n                    'Round ' + (Pong.round + 1),\n                    (this.canvas.width / 2),\n                    35\n                );\n\n                // Change the font size for the center score value\n                this.context.font = '40px Courier';\n\n                // Draw the current round number\n                this.context.fillText(\n                    rounds[Pong.round] ? rounds[Pong.round] : rounds[Pong.round - 1],\n                    (this.canvas.width / 2),\n                    100\n                );\n            },\n\n            loop: function () {\n                Pong.update();\n                Pong.draw();\n\n                // If the game is not over, draw the next frame.\n                if (!Pong.over) requestAnimationFrame(Pong.loop);\n            },\n\n            listen: function () {\n                document.addEventListener('keydown', function (key) {\n                    // Handle the 'Press any key to begin' function and start the game.\n                    if (Pong.running === false) {\n                        Pong.running = true;\n                        window.requestAnimationFrame(Pong.loop);\n                    }\n\n                    // Handle up arrow and w key events\n                    if (key.keyCode === 38 || key.keyCode === 87) Pong.player.move = DIRECTION.UP;\n\n                    // Handle down arrow and s key events\n                    if (key.keyCode === 40 || key.keyCode === 83) Pong.player.move = DIRECTION.DOWN;\n                });\n\n                // Stop the player from moving when there are no keys being pressed.\n                document.addEventListener('keyup', function (key) { Pong.player.move = DIRECTION.IDLE; });\n            },\n\n            // Reset the ball location, the player turns and set a delay before the next round begins.\n            _resetTurn: function (victor, loser) {\n                this.ball = Ball.new.call(this, this.ball.speed);\n                this.turn = loser;\n                this.timer = (new Date()).getTime();\n\n                victor.score++;\n                // beep2.play();\n            },\n\n            // Wait for a delay to have passed after each turn.\n            _turnDelayIsOver: function () {\n                return ((new Date()).getTime() - this.timer >= 1000);\n            },\n\n            // Select a random color as the background of each level/round.\n            _generateRoundColor: function () {\n                var newColor = colors[Math.floor(Math.random() * colors.length)];\n                if (newColor === this.color) return Pong._generateRoundColor();\n                return newColor;\n            }\n        };\n\n        var Pong = Object.assign({}, Game);\n        Pong.initialize();\n    }, []);\n\n    return (\n        <div ref={container} className='pong-container'>\n            {/* <Label>Get some coffee or play pong while you wait for the analysis to finish..</Label> */}\n            <canvas></canvas>\n            <p className=\"credit\">Game Credits <a href=\"https://codepen.io/gdube/pen/JybxxZ\" target=\"_blank\">Pong Game</a></p>\n        </div>\n    );\n};\n\nexport default Pong;","import './Spinner2.css';\n\nconst Spinner2 = () => {\n    return (\n        <div className='dots-bars-5'></div>\n    )    \n}\n\nexport default Spinner2;","import './App.css';\nimport Header from \"./components/Header\";\nimport Gallery from './components/Gallery';\n\nimport { Button, Label, Overlay, Spinner } from \"@blueprintjs/core\";\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { AppContext } from './context/AppContext';\n\nimport DimPlot from './components/Plots/ScatterPlot.js';\nimport MarkerPlot from './components/Markers';\nimport Pong from './components/Spinners/Pong';\nimport Spinner2 from './components/Spinners/Spinner2';\n\n// App is the single point of contact with the web workers\n// All requests and responses are received here\n\nfunction App() {\n\n  // show loading screen ?\n  const [loading, setLoading] = useState(true);\n  // use local state for tsne/umap animation\n  const [animateData, setAnimateData] = useState(null);\n  // props for dialogs\n  const loadingProps = {\n    autoFocus: true,\n    canEscapeKeyClose: false,\n    canOutsideClickClose: false,\n    enforceFocus: true,\n    hasBackdrop: true,\n    usePortal: true,\n    useTallContent: false,\n  };\n\n  const { setWasmInitialized, setTsneData, setRedDims, redDims,\n    setGenesInfo, setInitDims, setQcDims, defaultRedDims, setDefaultRedDims,\n    setQcData, qcData, setClusterData, setFSelectionData,\n    setUmapData, setPcaVarExp, logs, setLogs,\n    selectedCluster, clusterRank,\n    selectedClusterSummary, setSelectedClusterSummary,\n    selectedClusterIndex, setSelectedClusterIndex,\n    reqGene, customSelection, clusterData,\n    delCustomSelection, setDelCustomSelection,\n    setSelectedCluster, setShowGame, showGame, datasetName, setExportState,\n    setShowAnimation, triggerAnimation, setTriggerAnimation, params,\n    setGeneColSel, setKanaIDBRecs, setLoadParams,\n    setInitLoadState, setIndexedDBState } = useContext(AppContext);\n\n  // initializes various things on the worker side\n  useEffect(() => {\n    window.scranWorker.postMessage({\n      \"type\": \"INIT\",\n      \"msg\": \"Initial Load\"\n    });\n  }, [])\n\n  // request worker for new markers \n  // if either the cluster or the ranking changes\n  useEffect(() => {\n\n    if (selectedCluster !== null) {\n      let type = String(selectedCluster).startsWith(\"cs\") ?\n        \"getMarkersForSelection\" : \"getMarkersForCluster\";\n      window.scranWorker.postMessage({\n        \"type\": type,\n        \"payload\": {\n          \"cluster\": selectedCluster,\n          \"rank_type\": clusterRank,\n        }\n      });\n    }\n  }, [selectedCluster, clusterRank]);\n\n  // compute markers in the worker \n  // when a new custom selection of cells is made through the UI\n  useEffect(() => {\n\n    if (customSelection !== null && Object.keys(customSelection).length > 0) {\n      let csLen = `cs${Object.keys(customSelection).length}`;\n      var cs = customSelection[csLen];\n      window.scranWorker.postMessage({\n        \"type\": \"computeCustomMarkers\",\n        \"payload\": {\n          \"selection\": cs,\n          \"id\": csLen\n        }\n      });\n    }\n  }, [customSelection]);\n\n  // Remove a custom selection from cache\n  useEffect(() => {\n    if (delCustomSelection !== null) {\n      window.scranWorker.postMessage({\n        \"type\": \"removeCustomMarkers\",\n        \"payload\": {\n          \"id\": delCustomSelection\n        }\n      });\n\n      setDelCustomSelection(null);\n    }\n  }, [delCustomSelection]);\n\n  // get expression for a gene from worker\n  useEffect(() => {\n\n    reqGene !== null && window.scranWorker.postMessage({\n      \"type\": \"getGeneExpression\",\n      \"payload\": {\n        \"gene\": reqGene\n      }\n    });\n  }, [reqGene]);\n\n  useEffect(() => {\n    triggerAnimation && defaultRedDims && window.scranWorker.postMessage({\n      \"type\": \"animate\" + defaultRedDims,\n      payload: {\n        params: params[defaultRedDims.toLowerCase()]\n      }\n    });\n  }, [triggerAnimation]);\n\n  // callback for all responses from workers\n  // all interactions are logged and shown on the UI\n  window.scranWorker.onmessage = (msg) => {\n    const payload = msg.data;\n\n    if (payload?.msg) {\n      let tmp = [...logs];\n      let d = new Date();\n      tmp.push(`${d.getHours() + \":\" + d.getMinutes() + \":\" + d.getSeconds()} - ${payload?.type} - ${payload?.msg}`);\n\n      setLogs(tmp);\n    }\n\n    if (payload.type === \"INIT\") {\n      setLoading(false);\n      setWasmInitialized(true);\n    } else if (payload.type === \"KanaDB_store\") {\n      const { resp } = payload;\n      if (resp.length > 0) {\n        setKanaIDBRecs(resp);\n      }\n      setIndexedDBState(false);\n    } else if (payload.type === \"inputs_DATA\") {\n      setInitDims(`${payload.resp.dimensions.num_genes} genes, ${payload.resp.dimensions.num_cells} cells`);\n      setGenesInfo(payload.resp.genes);\n      setGeneColSel(Object.keys(payload.resp.genes)[0]);\n    } else if (payload.type === \"quality_control_metrics_DATA\") {\n      const { resp } = payload;\n      setQcData(resp);\n    } else if (payload.type === \"quality_control_thresholds_DATA\") {\n      const { resp } = payload;\n      let tmp = { ...qcData };\n      tmp[\"thresholds\"] = resp;\n      setQcData(tmp);\n    } else if (payload.type === \"quality_control_filtered_DATA\") {\n      setQcDims(`${payload.resp.retained}`);\n    } else if (payload.type === \"feature_selection_DATA\") {\n      const { resp } = payload;\n      setFSelectionData(resp);\n    } else if (payload.type === \"pca_DATA\") {\n      const { resp } = payload;\n      setPcaVarExp(resp);\n    } else if (payload.type === \"snn_cluster_graph_DATA\") {\n      const { resp } = payload;\n      setClusterData(resp);\n\n      // show markers for the first cluster\n      setSelectedCluster(0);\n    } else if (payload.type === \"tsne_DATA\") {\n      const { resp } = payload;\n      setTsneData(resp);\n\n      let tmp = [...redDims];\n      tmp.push(\"TSNE\");\n      // once t-SNE is available, set this as the default display\n      if (!defaultRedDims) {\n        setDefaultRedDims(\"TSNE\");\n      }\n\n      setRedDims(tmp);\n      // also don't show the pong game anymore\n      setShowGame(false);\n      setShowAnimation(false);\n      setTriggerAnimation(false);\n\n    } else if (payload.type === \"tsne_iter\" || payload.type === \"umap_iter\") {\n      const { resp } = payload;\n      setAnimateData(resp);\n    } else if (payload.type === \"umap_DATA\") {\n      const { resp } = payload;\n      setUmapData(resp);\n\n      // enable UMAP selection\n      let tmp = [...redDims];\n      tmp.push(\"UMAP\");\n      setRedDims(tmp);\n\n      setShowAnimation(false);\n      setTriggerAnimation(false);\n    } else if (payload.type === \"markerGene_DATA\") {\n    } else if (payload.type === \"setMarkersForCluster\"\n      || payload.type === \"setMarkersForCustomSelection\") {\n      const { resp } = payload;\n      let records = [];\n      let index = Array(resp.ordering.length);\n      resp.means.forEach((x, i) => {\n        index[resp.ordering[i]] = i;\n        records.push({\n          \"gene\": resp?.ordering?.[i],\n          \"mean\": x,\n          \"delta\": resp?.delta_detected?.[i],\n          \"lfc\": resp?.lfc?.[i],\n          \"detected\": resp?.detected?.[i],\n          \"expanded\": false,\n          \"expr\": null,\n        });\n      });\n      setSelectedClusterIndex(index);\n      setSelectedClusterSummary(records);\n    } else if (payload.type === \"setGeneExpression\") {\n      const { resp } = payload;\n      let tmp = [...selectedClusterSummary];\n      tmp[selectedClusterIndex[resp.gene]].expr = Object.values(resp.expr);\n      setSelectedClusterSummary(tmp);\n    } else if (payload.type === \"exportState\") {\n      const { resp } = payload;\n\n      let tmpLink = document.createElement(\"a\");\n      var fileNew = new Blob([resp], {\n        type: \"text/plain\"\n      });\n      tmpLink.href = URL.createObjectURL(fileNew);\n      tmpLink.download = datasetName.split(' ').join('_') + \".kana\";\n      tmpLink.click();\n\n      setExportState(false);\n    } else if (payload.type === \"KanaDB\") {\n      setIndexedDBState(false);\n    } else if (payload.type === \"loadedParameters\") {\n      const { resp } = payload;\n      setLoadParams(resp.params);\n\n      setTimeout(() => {\n        setInitLoadState(false);\n      }, 1000);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"App-content\">\n        <div className=\"plot\">\n          {\n            defaultRedDims ?\n              <DimPlot animateData={animateData}/> :\n              showGame ?\n                <div style={{\n                  height: '100%',\n                  width: '100%',\n                  display: 'flex',\n                  flexDirection: 'column',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  paddingTop: '50px'\n                }}>\n                  <Label>Get some coffee or play pong while you wait for the analysis to finish..</Label>\n                  <Button onClick={() => { setShowGame(false) }}>I'm good, go back</Button>\n                  <Pong />\n                </div>\n                :\n                <div style={{\n                  height: '100%',\n                  width: '100%',\n                  display: 'flex',\n                  flexDirection: 'column',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  paddingTop: '50px'\n                }}>\n                  <Spinner2 />\n                  <Label>Get some coffee or play pong while you wait for the analysis to finish..</Label>\n                  <Button onClick={() => { setShowGame(true) }}>Play Pong</Button>\n                </div>\n          }\n        </div>\n        <div className=\"marker\">\n          {clusterData ?\n            <MarkerPlot /> :\n            <div style={{\n              height: '100%',\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center'\n            }}>\n              <Spinner2 />\n              <Label>Generating nearest neighbor graph to compute clusters....</Label>\n            </div>}\n        </div>\n        <div className=\"analysis\">\n          <Gallery />\n        </div>\n      </div>\n      <Overlay\n        isOpen={loading}\n        {...loadingProps}\n      >\n        <div className=\"spinner\">\n          <Spinner size={100} />\n          <p>Initializing kana</p>\n        </div>\n      </Overlay>\n    </div>\n  );\n}\n\nexport default React.memo(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport AppContext from \"./context/AppContext\";\n\nReactDOM.render(\n  // <React.StrictMode>\n    <AppContext>\n      <App />\n    </AppContext>,\n  //  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n// serviceWorkerRegistration.unregister();\n// serviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}