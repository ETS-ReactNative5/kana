{"version":3,"file":"static/js/653.3f25e014.chunk.js","mappings":"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","sources":["../node_modules/scran.js/module/runUMAP.js","workers/_utils.js","workers/umap.worker.js","workers/_utils_viz_child.js","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport { NeighborSearchIndex, findNearestNeighbors } from \"./findNearestNeighbors.js\";\nimport { Float64WasmArray } from \"./WasmArray.js\";\n\n/**\n * Wrapper around the UMAP status object on the Wasm heap.\n */\nexport class UMAPStatus {\n    /**\n     * @param {Object} raw_status Status object allocated on the Wasm heap.\n     * @param {Float64WasmArray} raw_coordinates Buffer containing the initial UMAP coordinates.\n     *\n     * This should not be called directly by developers;\n     * use `initializeUMAP()` instead.\n     */\n    constructor(raw_status, raw_coordinates) {\n        this.status = raw_status;\n        this.coordinates = raw_coordinates;\n        return;\n    }\n\n    /**\n     * @return A deep copy of the status object.\n     */\n    clone() {\n        return new UMAPStatus(this.status.deepcopy(), this.coordinates.clone());\n    }\n\n    /**\n     * @return Number of cells in the dataset.\n     */\n    numberOfCells () {\n        return this.status.num_obs();\n    }\n\n    /**\n     * @return Number of epochs processed so far.\n     * This changes with repeated invocations of `runUMAP()`.\n     */\n    currentEpoch() {\n        return this.status.epoch();\n    }\n\n    /**\n     * @return Total number of epochs used to initialize this object.\n     */\n    totalEpochs() {\n        return this.status.num_epochs();\n    }\n\n    /**\n     * @return Object with `x` and `y` keys,\n     * where values are `Float64Array` objects of length equal to the number of cells,\n     * containing the x- and  y- coordinates for each cell at the current state of the algorithm.\n     */\n    extractCoordinates() {\n        return utils.extractXY(this.numberOfCells(), this.coordinates.array()); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */   \n    free () {\n        this.status.delete();\n        this.coordinates.free();\n        this.status = null;\n        this.coordinates = null;\n        return;\n    }\n}\n\n/**\n * @param {(NeighborSearchIndex|NeighborSearchResults)} x \n * Either a pre-built neighbor search index for the dataset (see `buildNeighborSearchIndex()`),\n * or a pre-computed set of neighbor search results for all cells (see `findNearestNeighbors()`).\n * @param {Object} [options] - Optional parameters.\n * @param {number} [options.neighbors] - Number of neighbors to use in the UMAP algorithm.\n * Ignored if `x` is a `NeighborSearchResults` object.\n * @param {number} [options.epochs] - Number of epochs to run the UMAP algorithm.\n * @param {number} [options.minDist] - Minimum distance between points in the UMAP algorithm.\n *\n * @return A `UMAPStatus` object containing the initial status of the UMAP algorithm.\n */\nexport function initializeUMAP(x, { neighbors = 15, epochs = 500, minDist = 0.01 } = {}) {\n    var my_neighbors;\n    var raw_status;\n    var raw_coords;\n    var output;\n\n    try {\n        let nnres;\n\n        if (x instanceof NeighborSearchIndex) {\n            my_neighbors = findNearestNeighbors(x, neighbors);\n            nnres = my_neighbors;\n        } else {\n            nnres = x;\n        }\n\n        raw_coords = new Float64WasmArray(2 * nnres.numberOfCells());\n        raw_status = wasm.call(module => module.initialize_umap(nnres.results, epochs, minDist, raw_coords.offset));\n        output = new UMAPStatus(raw_status, raw_coords);\n\n    } catch(e) {\n        utils.free(raw_status);\n        utils.free(raw_coords);\n        throw e;\n\n    } finally {\n        utils.free(my_neighbors);\n    }\n\n    return output;\n}\n\n/**\n * Run the UMAP algorithm on an initialized `UMAPStatus`.\n *\n * @param {UMAPStatus} x A previously initialized status object.\n * This may be passed through `runUMAP()` any number of times.\n * @param {Object} [options] - Optional parameters.\n * @param {?number} [options.runTime] - Number of milliseconds for which the algorithm is allowed to run before returning.\n * If `null`, no limit is imposed on the runtime.\n *\n * @return The algorithm status in `x` is advanced up to the total number of epochs used to initialize `x`,\n * or until the requested run time is exceeded, whichever comes first.\n */\nexport function runUMAP(x, { runTime = null } = {}) {\n    if (runTime === null) {\n        runTime = -1;\n    }\n    wasm.call(module => module.run_umap(x.status, runTime, x.coordinates.offset));\n    return;\n}\n","import * as scran from \"scran.js\";\n\nexport function freeCache(object) {\n    if (object !== undefined && object !== null) {\n        object.free();\n    }\n    return;\n}\n\nexport function freeReloaded(cache) {\n    if (\"reloaded\" in cache) {\n        for (const [k, v] of Object.entries(cache.reloaded)) {\n            if (v instanceof scran.WasmArray) {\n                v.free();\n            }\n        }\n        delete cache.reloaded;\n    }\n}\n\nexport function changedParameters(x, y) {\n    return JSON.stringify(x) != JSON.stringify(y);\n}\n\nexport function computeRange(arr) {\n    var max = -Infinity, min = Infinity;\n    arr.forEach(function (x) {\n        if (max < x) {\n            max = x;\n        }\n        if (min > x) {\n            min = x;\n        }\n    });\n    return [min, max];\n}\n\nexport function allocateCachedArray(size, type, cache, name = \"buffer\") {\n    var reallocate = true;\n    if (name in cache) {\n        var candidate = cache[name];\n        if (candidate.size != size || candidate.constructor.className != type) {\n            candidate.free();\n        } else {\n            reallocate = false;\n        }\n    }\n  \n    if (reallocate) {\n        switch (type) {\n            case \"Uint8Array\":\n                cache[name] = new scran.Uint8WasmArray(size);\n                break;\n            case \"Int32Array\":\n                cache[name] = new scran.Int32WasmArray(size);\n                break;\n            case \"Float64Array\":\n                cache[name] = new scran.Float64WasmArray(size);\n                break;\n            default:\n                // We only ever use one of the three above types in our \n                // internal data stores, so no need to go all-out here.\n                throw \"allocating '\" + type + \"' not yet supported\";\n        }\n    }\n\n    return cache[name];\n}\n\nexport function extractBuffers(object, store) {\n    if (Array.isArray(object)) {\n        for (const element of object) {\n            extractBuffers(element, store);\n        }\n    } else if (object.constructor == Object) {\n        for (const [key, element] of Object.entries(object)) {\n            extractBuffers(element, store);\n        }\n    } else if (ArrayBuffer.isView(object)) {\n        if (! (object.buffer instanceof ArrayBuffer)) {\n            throw \"only ArrayBuffers should be in the message payload\";\n        }\n        store.push(object.buffer);\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./_utils.js\";\nimport * as vizutils from \"./_utils_viz_child.js\";\n\nvar cache = {};\nvar init_changed = false;\nvar init_parameters = {};\nvar run_parameters = {};\n\nfunction rerun(animate) {\n    var delay = vizutils.chooseDelay(animate);\n    var current_status = cache.init.clone();\n\n    try {\n        cache.total = current_status.totalEpochs();\n        for (; current_status.currentEpoch() < cache.total; ) {\n            scran.runUMAP(current_status, { runTime: delay });\n\n            if (animate) {\n                var xy = current_status.extractCoordinates();\n                postMessage({\n                    \"type\": \"umap_iter\",\n                    \"x\": xy.x,\n                    \"y\": xy.y,\n                    \"iteration\": current_status.currentEpoch()\n                }, [xy.x.buffer, xy.y.buffer]);\n            }\n        }\n        cache.final = current_status.extractCoordinates();\n    } finally {\n        current_status.free();\n    }\n}\n\nvar loaded;\nonmessage = function(msg) {\n    var id = msg.data.id;\n\n    if (msg.data.cmd == \"INIT\") {\n        loaded = scran.initialize({ numberOfThreads: 1 });\n        loaded\n            .then(x => {\n                postMessage({\n                    \"id\": id,\n                    \"type\": \"init_worker\",\n                    \"data\": { \"status\": \"SUCCESS\" }\n                });\n            })\n            .catch(error => {\n                postMessage({ \n                    \"id\": id,\n                    \"type\": \"error\",\n                    \"error\": error\n                });\n            });\n\n    } else if (msg.data.cmd == \"RUN\") {\n        loaded\n            .then(x => {\n                var new_neighbors;\n                if (\"neighbors\" in msg.data) {\n                    utils.freeCache(cache.neighbors);\n                    cache.neighbors = vizutils.recreateNeighbors(msg.data.neighbors);\n                    new_neighbors = true;\n                } else {\n                    new_neighbors = false;\n                }\n        \n                var init_args = { \"min_dist\": msg.data.params.min_dist, \"num_epochs\": msg.data.params.num_epochs };\n                if (!new_neighbors && !utils.changedParameters(init_args, init_parameters)) {\n                    init_changed = false;\n                } else {\n                    utils.freeCache(cache.init);\n                    cache.init = scran.initializeUMAP(cache.neighbors, { epochs: init_args.num_epochs, minDist: init_args.min_dist });\n                    init_parameters = init_args;\n                    init_changed = true;\n                }\n        \n                // Nothing downstream depends on the run results, so we don't set any changed flag.\n                var run_args = {};\n                if (init_changed || utils.changedParameters(run_args, run_parameters)) {\n                    rerun(msg.data.params.animate);\n                    run_parameters = run_args;\n                }\n        \n                postMessage({\n                    \"id\": id,\n                    \"type\": \"umap_run\",\n                    \"data\": { \"status\": \"SUCCESS\" }\n                });\n            })\n            .catch(error => {\n                postMessage({ \n                    \"id\": id,\n                    \"type\": \"error\",\n                    \"error\": error\n                });\n            });\n    \n    } else if (msg.data.cmd == \"RERUN\") {\n        loaded\n            .then(x => {\n                rerun(true);\n                postMessage({\n                    \"id\": id,\n                    \"type\": \"umap_rerun\",\n                    \"data\": { \"status\": \"SUCCESS\" }\n                });\n            })\n            .catch(error => {\n                postMessage({\n                    \"id\": id,\n                    \"type\": \"error\",\n                    \"error\": error\n                });\n            });\n          \n    } else if (msg.data.cmd == \"FETCH\") {\n        loaded\n            .then(x => {\n                var info = {\n                    \"x\": cache.final.x.slice(),\n                    \"y\": cache.final.y.slice(),\n                    \"iterations\": cache.total\n                };\n                \n                var transfer = [];\n                utils.extractBuffers(info, transfer);\n                postMessage({\n                    \"id\": id,\n                    \"type\": \"umap_fetch\",\n                    \"data\": info\n                }, transfer);\n            })\n            .catch(error => {\n                postMessage({ \n                    \"id\": id,\n                    \"type\": \"error\",\n                    \"error\": error\n                });\n            });\n    }\n}\n","import * as scran from \"scran.js\";\n\nexport function chooseDelay(animate) {\n    if (animate) {\n        // TODO: using 75 for now\n        // in the future the user can choose a bar for speed on the UI\n        // options would be 1x, 2x, 3x\n        return 75;\n    } else {\n        return 1000000; // effectively no delay.\n    }\n};\n\nexport function recreateNeighbors(neighbors) {\n    var output = null;\n    var rbuf = null;\n    var ibuf = null;\n    var dbuf = null;\n  \n    try {\n        var num_obs = neighbors.num_obs;\n        var size = neighbors.size;\n\n        rbuf = new scran.Int32WasmArray(num_obs);\n        rbuf.set(neighbors.runs);\n        ibuf = new scran.Int32WasmArray(size);\n        ibuf.set(neighbors.indices);\n        dbuf = new scran.Float64WasmArray(size);\n        dbuf.set(neighbors.distances);\n\n        output = scran.NeighborSearchResults.unserialize(rbuf, ibuf, dbuf);\n\n    } finally {\n        if (rbuf !== null) {\n            rbuf.free();\n        }\n        if (ibuf !== null) {\n            ibuf.free();\n        }\n        if (dbuf !== null) {\n            dbuf.free();\n        }\n    }\n\n    return output;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [890,450], function() { return __webpack_require__(8653); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + {\"450\":\"3afdb060\",\"495\":\"a868a7b8\",\"890\":\"93589049\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.p = \"/kana/\";","__webpack_require__.b = self.location + \"/../../../\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t653: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkkana\"] = self[\"webpackChunkkana\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn Promise.all([\n\t\t__webpack_require__.e(890),\n\t\t__webpack_require__.e(450)\n\t]).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["UMAPStatus","raw_status","raw_coordinates","this","status","coordinates","deepcopy","clone","num_obs","epoch","num_epochs","utils","numberOfCells","array","delete","free","runUMAP","x","runTime","wasm","module","run_umap","offset","freeCache","object","undefined","changedParameters","y","JSON","stringify","extractBuffers","store","Array","isArray","constructor","Object","entries","ArrayBuffer","isView","buffer","push","loaded","cache","init_changed","init_parameters","run_parameters","rerun","animate","delay","vizutils","current_status","init","total","totalEpochs","currentEpoch","scran","xy","extractCoordinates","postMessage","final","onmessage","msg","id","data","cmd","numberOfThreads","then","catch","error","new_neighbors","neighbors","output","rbuf","ibuf","dbuf","size","set","runs","indices","distances","init_args","params","min_dist","my_neighbors","raw_coords","epochs","minDist","nnres","NeighborSearchIndex","findNearestNeighbors","Float64WasmArray","initialize_umap","results","e","run_args","info","slice","transfer","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","__webpack_modules__","m","__webpack_exports__","O","deferred","result","chunkIds","fn","priority","notFulfilled","Infinity","i","length","fulfilled","j","keys","every","key","splice","r","d","definition","o","defineProperty","enumerable","get","f","chunkId","Promise","all","reduce","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","call","p","b","self","location","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop","next"],"sourceRoot":""}