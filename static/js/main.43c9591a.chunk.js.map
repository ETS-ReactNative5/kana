{"version":3,"sources":["components/Spinners/AppToaster.js","context/AppContext.js","components/Analysis/index.js","components/Stats/index.js","components/Logs/index.js","components/Intro/index.js","components/Header/index.js","components/Plots/BarPlot.js","components/Plots/PCABarPlot.js","components/Plots/ClusterBarPlot.js","components/Plots/ViolinPlotBasic.js","components/Plots/QCPlotMgr.js","components/Gallery/index.js","components/Plots/utils.js","components/Plots/rainbowvis.js","components/Plots/ScatterPlot.js","components/Plots/StackedHistogram.js","components/Plots/Histogram.js","components/Plots/Cell.js","components/Plots/HeatmapCell.js","components/Markers/index.js","components/Spinners/Pong.js","components/Spinners/Spinner2.js","App.js","reportWebVitals.js","index.js"],"names":["AppToaster","Toaster","create","className","position","Position","TOP_RIGHT","maxToasts","AppContext","createContext","AppContextProvider","children","useState","format","files","inputFiles","setInputFiles","qc","fSelection","pca","cluster","tsne","umap","markerGene","params","setParams","openInput","setOpenInput","showGame","setShowGame","String","Date","now","slice","datasetName","setDatasetName","exportState","setExportState","wasmInitialized","setWasmInitialized","error","setError","initDims","setInitDims","qcDims","setQcDims","fSelDims","setFSelDims","genesInfo","setGenesInfo","qcData","setQcData","qcThreshold","setQcThreshold","fSelectionData","setFSelectionData","redDims","setRedDims","defaultRedDims","setDefaultRedDims","plotRedDims","setPlotRedDims","clusterData","setClusterData","selectedCluster","setSelectedCluster","selectedClusterSummary","setSelectedClusterSummary","clusterColors","setClusterColors","clusterRank","setClusterRank","customSelection","setCustomSelection","delCustomSelection","setDelCustomSelection","pcaData","setPcaData","pcaVarExp","setPcaVarExp","tsneData","setTsneData","umapData","setUmapData","gene","setGene","reqGene","setReqGene","logs","setLogs","useEffect","window","Worker","postMessage","show","icon","intent","message","Provider","value","AnalysisDialog","buttonText","includeFooter","props","isOpen","setIsOpen","showStepHelper","setShowStepHelper","handleButtonClick","useCallback","handleClose","useContext","mtx","barcode","tmpInputFiles","setTmpInputFiles","inputText","setInputText","tmpInputParams","setTmpInputParams","tmpInputValid","setTmpInputValid","tabSelected","setTabSelected","newImportFormat","setNewImportFormat","handleNewImportTab","currTab","prevTab","file","toLowerCase","endsWith","onClick","text","onClose","Classes","DIALOG_BODY","animate","renderActiveTabPanelOnly","vertical","onChange","defaultSelectedTabId","id","title","panel","style","paddingBottom","round","onMouseEnter","onMouseLeave","onInputChange","msg","target","name","marginTop","placeholder","onValueChange","nval","val","defaultValue","large","checked","innerLabelChecked","innerLabel","e","parseInt","currentTarget","marginBottom","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","content","disabled","margin","Stats","Logs","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","hasBackdrop","RIGHT","size","undefined","usePortal","state","setState","outlined","DRAWER_BODY","map","x","i","IntroDialog","showClose","setShowClose","elevation","Elevation","ZERO","href","Header","shouldReturnFocusOnClose","align","Alignment","LEFT","onConfirm","placement","rightIcon","Intro","BarPlot","container","useRef","data","propwidth","width","color","ymax","Math","max","d","containerEl","current","innerHTML","height","svg","d3","append","attr","range","domain","key","padding","call","selectAll","y","enter","bandwidth","Array","isArray","ref","PCABarPlot","var_exp","chart_data","Object","values","forEach","push","ClusterBarPlot","clusters","tmpColors","setTmpColors","cluster_count","keys","length","cluster_colors","palette","randomColor","luminosity","count","toString","clus","z","ViolinPlotBasic","rdata","nice","showLabel","bins","thresholds","ticks","histogram","max_bin","xNum","label","datum","x0","x1","curve","threshold","on","lines","this","QCPlotMgr","props2","log2","Gallery","ONE","getMinMax","arr","Number","MAX_VALUE","min","Rainbow","gradients","minNum","maxNum","colours","setColours","spectrum","Error","increment","firstGradient","ColourGradient","setGradient","setNumberRange","colourGradient","setSpectrum","arguments","setSpectrumByArray","array","colourAt","number","isNaN","TypeError","segment","index","floor","colorAt","minNumber","maxNumber","RangeError","startColour","endColour","calcHex","channelStart_Base16","channelEnd_Base16","num","hex","numRange","cStart_Base10","cPerUnit","c_Base10","getHexColour","string","test","isHexColour","substring","colourNames","hasOwnProperty","colourStart","colourEnd","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","DimPlot","scatterplot","setScatterplot","clusHighlight","setClusHighlight","showGradient","setShowGradient","exprMinMax","setExprMinMax","sliderMinMax","setSliderMinMax","gradient","selectedPoints","setSelectedPoints","plotMode","setPlotMode","expr","tmpgradient","tmp_scatterplot","ScatterGL","onSelect","points","orbitControls","zoomSpeed","styles","point","scaleDefault","scaleSelected","scaleHover","setPanMode","plot","cluster_mappings","metadata","dataset","Dataset","render","setPointColorer","selectedIndices","hoverIndex","has","startsWith","includes","tmpclus","replace","changeRedDim","setInteraction","setSelectMode","minWidth","minHeight","fill","minimal","indexOf","active","paddingTop","openOnTargetFocus","display","alignItems","flexDirection","alignSelf","paddingLeft","tmpSel","tmpcolors","small","tmpcolor","cid","tmpSelection","select","backgroundImage","stepSize","StackedHistogram","allCells","filter","clusterCells","join","Histogram","propheight","Cell","minmax","score","colorscale","colorscore","percWidth","border","backgroundColor","HeatmapCell","detectedScale","MarkerPlot","clusSel","setClusSel","clusArrayStacked","setClusArrayStacked","searchInput","setSearchInput","meanMinMax","setMeanMinMax","deltaMinMax","setDeltaMinMax","lfcMinMax","setLfcMinMax","detectedMinMax","setDetectedMinMax","minMaxs","setMinMaxs","means","setMeans","deltas","setDeltas","lfcs","setLfcs","detects","setDetects","markerFilter","setMarkerFilter","prosRecords","setProsRecords","trecs","tmpmeans","mean","tmeanMinMax","tmeanval","parseFloat","toFixed","tmpdeltas","delta","tdeltaMinMax","tdeltaval","tmplfcs","lfc","tlfcsMinMax","tlfcsval","tmpdetects","detected","tdetectsMinMax","tdetecval","sortedRows","useMemo","row","max_clusters","concat","clusArray","handleMarkerFilter","tmp","tmpselection","leftIcon","type","paddingRight","components","Item","totalCount","itemContent","rowexp","expanded","rowExpr","popoverClassName","POPOVER2_CONTENT_SIZING","interactionKind","hoverOpenDelay","modifiers","arrow","enabled","flip","preventOverflow","scope","fontStyle","abs","Pong","elem","DIRECTION","rounds","colors","Ball","new","incrementedSpeed","canvas","moveX","moveY","speed","Paddle","side","move","Game","initialize","querySelector","context","getContext","player","paddle","ball","running","over","turn","timer","menu","listen","endGameMenu","font","fillStyle","fillRect","fillText","setTimeout","assign","draw","update","_resetTurn","_turnDelayIsOver","random","_generateRoundColor","clearRect","beginPath","setLineDash","moveTo","lineTo","lineWidth","strokeStyle","stroke","textAlign","loop","requestAnimationFrame","document","addEventListener","keyCode","victor","loser","getTime","newColor","Spinner2","App","loading","setLoading","csLen","cs","onmessage","payload","getHours","getMinutes","getSeconds","resp","dimensions","num_genes","num_cells","gene_names","retained","records","ordering","delta_detected","tmpLink","createElement","fileNew","Blob","URL","createObjectURL","download","split","click","justifyContent","useTallContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.43c9591a.chunk.js","sourcesContent":["import { Position, Toaster } from \"@blueprintjs/core\";\n\nexport const AppToaster = Toaster.create({\n    className: \"notifications\",\n    position: Position.TOP_RIGHT,\n    maxToasts: 5,\n});","import React, { createContext, useEffect, useState } from \"react\";\nimport { AppToaster } from \"../components/Spinners/AppToaster\";\n\nexport const AppContext = createContext(null);\n\nconst AppContextProvider = ({ children }) => {\n  // Input State\n  const [inputFiles, setInputFiles] = useState({\n    format: null,\n    files: null\n  });\n\n  // default params \n  const [params, setParams] = useState({\n    qc: {\n      \"qc-nmads\": 3\n    },\n    fSelection: {\n      \"fsel-span\": 0.3\n    },\n    pca: {\n      \"pca-npc\": 5,\n      \"pca-hvg\": 4000,\n    },\n    cluster: {\n      \"clus-k\": 10,\n      \"clus-res\": 0.5,\n      \"clus-scheme\": 0,\n      \"clus-approx\": true,\n      \"clus-method\": \"snn_graph\",\n    },\n    tsne: {\n      \"tsne-iter\": 500,\n      \"tsne-perp\": 30,\n    },\n    umap: {\n      \"umap-nn\": 15,\n      \"umap-epochs\": 500,\n      \"umap-min_dist\": 0.01,\n    },\n    markerGene: {}\n  });\n\n  // app open inputs\n  const [openInput, setOpenInput] = useState(false);\n  // show in-app game ?\n  const [showGame, setShowGame] = useState(false);\n\n  // creates a default dataset name\n  const [datasetName, setDatasetName] = useState(\"kana-\" + String(Date.now()).slice(0, 5));\n\n  // app export state \n  const [exportState, setExportState] = useState(false);\n\n  // wasm state and error \n  const [wasmInitialized, setWasmInitialized] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Response State for various components\n  // dim sizes\n  const [initDims, setInitDims] = useState(null);\n  const [qcDims, setQcDims] = useState(null);\n  const [fSelDims, setFSelDims] = useState(null);\n\n  // Gene details \n  const [genesInfo, setGenesInfo] = useState(null);\n\n  // QC Data\n  const [qcData, setQcData] = useState(null);\n  const [qcThreshold, setQcThreshold] = useState(null);\n\n  // Feature Selection\n  const [fSelectionData, setFSelectionData] = useState(null);\n\n  // UI dimensions reduction dropdown\n  const [redDims, setRedDims] = useState([]);\n  // which dimension is selected\n  const [defaultRedDims, setDefaultRedDims] = useState(null);\n  // the actual dimensions\n  const [plotRedDims, setPlotRedDims] = useState(null);\n\n  // Cluster Analysis\n  // cluster assignments\n  const [clusterData, setClusterData] = useState(null);\n  // which cluster is selected\n  const [selectedCluster, setSelectedCluster] = useState(null);\n  // cohen, mean scores per gene\n  const [selectedClusterSummary, setSelectedClusterSummary] = useState([]);\n  // set cluster colors\n  const [clusterColors, setClusterColors] = useState(null);\n  // set Cluster rank-type\n  const [clusterRank, setClusterRank] = useState(null);\n  // custom selection on tsne plot\n  const [customSelection, setCustomSelection] = useState({});\n  // remove custom Selection\n  const [delCustomSelection, setDelCustomSelection] = useState(null);\n\n  // PCA\n  const [pcaData, setPcaData] = useState(null);\n  const [pcaVarExp, setPcaVarExp] = useState(null);\n\n  // TSNE\n  const [tsneData, setTsneData] = useState(null);\n\n  // UMAP\n  const [umapData, setUmapData] = useState(null);\n\n  // geneExpression\n  // what gene is selected for scatterplot\n  const [gene, setGene] = useState(null);\n  // request gene expression\n  const [reqGene, setReqGene] = useState(null);\n\n  // Logs\n  const [logs, setLogs] = useState([]);\n\n  useEffect(() => {\n\n    if (wasmInitialized && inputFiles.files != null) {\n      window.Worker.postMessage({\n        \"type\": \"RUN\",\n        \"payload\": {\n          \"files\": inputFiles,\n          \"params\": params\n        },\n        \"msg\": \"not much to pass\"\n      });\n\n      // setShowGame(true);\n    }\n  }, [inputFiles, params, wasmInitialized]);\n\n  useEffect(() => {\n\n    if (exportState) {\n      window.Worker.postMessage({\n        \"type\": \"EXPORT\",\n        \"payload\": {\n          \"files\": inputFiles,\n          \"params\": params\n        },\n        \"msg\": \"not much to pass\"\n      });\n\n      AppToaster.show({ icon:\"download\", intent: \"primary\", message: \"Exporting analysis in the background\" });\n    } else {\n      inputFiles?.files && AppToaster.show({ icon:\"download\", intent: \"primary\", message: \"Analysis saved. Please check your downloads directory!\" });\n    }\n  }, [exportState]);\n\n  return (\n    <AppContext.Provider\n      value={{\n        inputFiles, setInputFiles,\n        params, setParams,\n        error, setError,\n        wasmInitialized, setWasmInitialized,\n        pcaData, setPcaData,\n        pcaVarExp, setPcaVarExp,\n        tsneData, setTsneData,\n        umapData, setUmapData,\n        genesInfo, setGenesInfo,\n        initDims, setInitDims,\n        qcDims, setQcDims,\n        qcData, setQcData,\n        qcThreshold, setQcThreshold,\n        fSelDims, setFSelDims,\n        redDims, setRedDims,\n        defaultRedDims, setDefaultRedDims,\n        plotRedDims, setPlotRedDims,\n        clusterData, setClusterData,\n        fSelectionData, setFSelectionData,\n        logs, setLogs,\n        selectedCluster, setSelectedCluster,\n        selectedClusterSummary, setSelectedClusterSummary,\n        clusterRank, setClusterRank,\n        gene, setGene,\n        clusterColors, setClusterColors,\n        reqGene, setReqGene,\n        openInput, setOpenInput,\n        customSelection, setCustomSelection,\n        delCustomSelection, setDelCustomSelection,\n        showGame, setShowGame,\n        exportState, setExportState,\n        datasetName, setDatasetName\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default AppContextProvider;\n","import {\n    Button, Classes, Dialog, Text, FileInput, NumericInput,\n    Label, H5, Tag, HTMLSelect, Switch, Callout, Tabs, Tab\n} from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport React, { useContext, useState, useCallback, useEffect } from \"react\";\n\nimport { AppContext } from \"../../context/AppContext\";\nimport \"./Analysis.css\";\n\nfunction AnalysisDialog({\n    buttonText,\n    includeFooter,\n    ...props\n}) {\n    const [isOpen, setIsOpen] = useState(false);\n    const [showStepHelper, setShowStepHelper] = useState(1);\n    const handleButtonClick = useCallback(() => setIsOpen(!isOpen), [isOpen]);\n    const handleClose = useCallback(() => setIsOpen(false), []);\n    const { inputFiles, setInputFiles,\n        params, setParams, openInput } = useContext(AppContext);\n\n    // assuming new is the default tab\n    let [tmpInputFiles, setTmpInputFiles] = useState({\n        gene: null,\n        mtx: null,\n        barcode: null,\n    });\n\n    const [inputText, setInputText] = useState({\n        mtx: \"Choose Matrix Market file\",\n        gene: \"Choose feature/gene annotation\",\n        barcode: \"Choose barcode annotation\",\n    });\n\n    let [tmpInputParams, setTmpInputParams] = useState(params);\n    let [tmpInputValid, setTmpInputValid] = useState(true);\n\n    const [tabSelected, setTabSelected] = useState(\"new\");\n    const [newImportFormat, setNewImportFormat] = useState(\"mtx\");\n    // const [hdfFormat, sethdfFormat] = useState(\"tenx\");\n\n    function handleImport() {\n        setParams(tmpInputParams);\n\n        setInputFiles({\n            \"format\": tabSelected == \"new\" ?\n                newImportFormat : \"kana\",\n            \"files\": tmpInputFiles\n        });\n\n        handleClose();\n    }\n\n    function handleTabInput(currTab, prevTab) {\n        if (currTab === \"new\") {\n            handleNewImportTab(newImportFormat);\n        } else if (currTab === \"load\") {\n            setTmpInputFiles({\n                file: null\n            });\n\n            setInputText({\n                file: \"Choose kana analysis file\"\n            });\n        }\n        setTabSelected(currTab);\n    }\n\n    function handleNewImportTab(currTab, prevTab) {\n        if (currTab === \"mtx\") {\n            setTmpInputFiles({\n                gene: null,\n                mtx: null,\n                barcode: null,\n            });\n\n            setInputText({\n                mtx: \"Choose Matrix Market file\",\n                gene: \"Choose feature/gene annotation\",\n                barcode: \"Choose barcode annotation\",\n            });\n        } else if (currTab === \"tenx\") {\n            setTmpInputFiles({\n                file: null,\n            });\n\n            setInputText({\n                file: \"Choose 10x v3 H5 file\",\n            });\n        } else if (currTab === \"h5ad\") {\n            setTmpInputFiles({\n                file: null,\n            });\n\n            setInputText({\n                file: \"Choose H5ad file\",\n            });\n        }\n\n        setNewImportFormat(currTab);\n    }\n\n    useEffect(() => {\n        openInput && setIsOpen(true);\n    }, [openInput]);\n\n    useEffect(() => {\n        if (tmpInputFiles) {\n            if (tabSelected === \"new\") {\n                if (newImportFormat === \"mtx\") {\n                    if (\n                        tmpInputFiles?.mtx && !(inputText?.mtx.toLowerCase().endsWith(\"mtx\") ||\n                            inputText?.mtx.toLowerCase().endsWith(\"mtx.gz\")\n                        ) ||\n                        tmpInputFiles?.gene && !(inputText?.gene.toLowerCase().endsWith(\"tsv\") ||\n                            inputText?.gene.toLowerCase().endsWith(\"tsv.gz\")\n                        ) ||\n                        tmpInputFiles?.barcode && !(inputText?.barcode.toLowerCase().endsWith(\"tsv\") ||\n                            inputText?.barcode.toLowerCase().endsWith(\"tsv.gz\")\n                        )\n                    ) {\n                        setTmpInputValid(false);\n                    } else {\n                        setTmpInputValid(true);\n                    }\n                } else if (newImportFormat === \"tenx\" || newImportFormat === \"h5ad\") {\n                    if (\n                        tmpInputFiles?.file && !(\n                            inputText?.file.toLowerCase().endsWith(\"hdf5\") ||\n                            inputText?.file.toLowerCase().endsWith(\"h5\") ||\n                            inputText?.file.toLowerCase().endsWith(\"h5ad\")\n                        )\n                    ) {\n                        setTmpInputValid(false);\n                    } else {\n                        setTmpInputValid(true);\n                    }\n                }\n\n            } else if (tabSelected === \"load\" && inputText?.file) {\n                if (\n                    tmpInputFiles?.file != null && !(inputText?.file.toLowerCase().endsWith(\"kana\") ||\n                        inputText?.file.toLowerCase().endsWith(\"kana.gz\")\n                    )\n                ) {\n                    setTmpInputValid(false);\n                } else {\n                    setTmpInputValid(true);\n                }\n            }\n        }\n    }, [tmpInputFiles]);\n\n    return (\n        <>\n            <Button onClick={handleButtonClick} icon=\"social-media\" intent=\"primary\" text={buttonText} />\n            <Dialog className=\"analysis-dialog\" {...props} isOpen={isOpen} onClose={handleClose}>\n\n                <div className={Classes.DIALOG_BODY}>\n\n                    <Tabs\n                        animate={true}\n                        renderActiveTabPanelOnly={true}\n                        vertical={false}\n                        onChange={handleTabInput}\n                        defaultSelectedTabId={tabSelected}\n                    >\n                        <Tab id=\"new\" title=\"Import new dataset\" panel={\n                            <div className=\"inputs-container\">\n                                <div className='row-input'>\n                                    <div className=\"col\"\n                                        style={{\n                                            // paddingTop: '10px',\n                                            paddingBottom: '15px'\n                                        }}>\n                                        <div>\n                                            <H5><Tag round={true}>1</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(1)}\n                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                    Load input files\n                                                </span>\n                                            </H5>\n                                            <Tabs\n                                                animate={true}\n                                                renderActiveTabPanelOnly={true}\n                                                vertical={true}\n                                                onChange={handleNewImportTab}\n                                                defaultSelectedTabId={newImportFormat}\n                                            >\n                                                <Tab id=\"mtx\" title=\"Matrix Market file\" panel={\n                                                    <div className=\"row\"\n                                                    >\n                                                        <Label className=\"row-input\">\n                                                            <FileInput text={inputText.mtx} onInputChange={(msg) => { setInputText({ ...inputText, \"mtx\": msg.target.files[0].name }); setTmpInputFiles({ ...tmpInputFiles, \"mtx\": msg.target.files }) }} />\n                                                        </Label>\n                                                        <Label className=\"row-input\">\n                                                            <FileInput text={inputText.gene} onInputChange={(msg) => { setInputText({ ...inputText, \"gene\": msg.target.files[0].name }); setTmpInputFiles({ ...tmpInputFiles, \"gene\": msg.target.files }) }} />\n                                                        </Label>\n                                                        {/* <Label className=\"row-input\">\n                                                            <FileInput text={inputText.barcode} onInputChange={(msg) => { setInputText({ ...inputText, \"barcode\": msg.target.files[0].name }); setTmpInputFiles({ ...tmpInputFiles, \"barcode\": msg.target.files }) }} />\n                                                        </Label> */}\n                                                    </div>\n                                                } />\n                                                <Tab id=\"tenx\" title=\"10x v3 H5\" panel={\n                                                    <div className=\"row\"\n                                                    >\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\">\n                                                                    Choose 10x V3 H5 file\n                                                                </span>\n                                                            </Text>\n                                                            <FileInput style={{\n                                                                marginTop: '5px'\n                                                            }}\n                                                                text={inputText.file}\n                                                                onInputChange={(msg) => {\n                                                                    setInputText({ ...inputText, \"file\": msg.target.files[0].name });\n                                                                    setTmpInputFiles({ ...tmpInputFiles, \"file\": msg.target.files })\n                                                                }} />\n                                                        </Label>\n\n                                                        {/* <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\">\n                                                                    HDF5 format\n                                                                </span>\n                                                            </Text>\n                                                            <HTMLSelect onChange={(nval, val) => sethdfFormat(nval?.currentTarget.key)}>\n                                                                <option key=\"tenx\">10x genomics</option>\n                                                                <option key=\"h5ad\">H5ad</option>\n                                                            </HTMLSelect>\n                                                        </Label> */}\n                                                    </div>\n                                                } />\n                                                <Tab id=\"h5ad\" title=\"H5ad\" panel={\n                                                    <div className=\"row\"\n                                                    >\n                                                        <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\">\n                                                                    Choose H5ad file\n                                                                </span>\n                                                            </Text>\n                                                            <FileInput style={{\n                                                                marginTop: '5px'\n                                                            }}\n                                                                text={inputText.file}\n                                                                onInputChange={(msg) => {\n                                                                    setInputText({ ...inputText, \"file\": msg.target.files[0].name });\n                                                                    setTmpInputFiles({ ...tmpInputFiles, \"file\": msg.target.files })\n                                                                }} />\n                                                        </Label>\n                                                    </div>\n                                                } />\n                                            </Tabs>\n\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col\">\n                                        <div>\n                                            <H5><Tag round={true}>2</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(2)}\n                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                    Quality control\n                                                </span>\n                                            </H5>\n                                            <div className=\"row\">\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(2)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Number of MADs\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"3\" value={tmpInputParams[\"qc\"][\"qc-nmads\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"qc\": { ...tmpInputParams[\"qc\"], \"qc-nmads\": nval } }) }} />\n                                                </Label>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col\">\n                                        <div>\n                                            <H5><Tag round={true}>3</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(3)}\n                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                    Feature Selection\n                                                </span>\n                                            </H5>\n                                            <div className=\"row\">\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(3)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Lowess span\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"0.3\" value={tmpInputParams[\"fSelection\"][\"fsel-span\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"fSelection\": { ...tmpInputParams[\"fSelection\"], \"fsel-span\": nval } }) }} />\n                                                </Label>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col\">\n                                        <div>\n                                            <H5><Tag round={true}>4</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(4)}\n                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                    Principal components analysis\n                                                </span>\n                                            </H5>\n                                            <div className=\"row\">\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(4)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Number of HVGs\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"2500\" value={tmpInputParams[\"pca\"][\"pca-hvg\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"pca\": { ...tmpInputParams[\"pca\"], \"pca-hvg\": nval } }) }} />\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(4)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Number of PCs\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"25\" value={tmpInputParams[\"pca\"][\"pca-npc\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"pca\": { ...tmpInputParams[\"pca\"], \"pca-npc\": nval } }) }} />\n                                                </Label>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col\">\n                                        <div>\n                                            <H5><Tag round={true}>5</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(5)}\n                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                    Clustering\n                                                </span>\n                                            </H5>\n                                            <div className=\"row\">\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(5)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Method\n                                                        </span>\n                                                    </Text>\n                                                    <HTMLSelect defaultValue={tmpInputParams[\"cluster\"][\"clus-method\"]}>\n                                                        <option>{tmpInputParams[\"cluster\"][\"clus-method\"]}</option>\n                                                    </HTMLSelect>\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(5)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Number of neighbors\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"10\" value={tmpInputParams[\"cluster\"][\"clus-k\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-k\": nval } }) }} />\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(5)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Use ANN\n                                                        </span>\n                                                    </Text>\n                                                    <Switch style={{ marginTop: '10px' }} large={true} checked={tmpInputParams[\"cluster\"][\"clus-approx\"]}\n                                                        innerLabelChecked=\"true\" innerLabel=\"false\"\n                                                        onChange={(e) => { setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-approx\": e.target.checked } }) }} />\n                                                </Label>\n\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(5)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Weighting scheme\n                                                        </span>\n                                                    </Text>\n                                                    <HTMLSelect onChange={(nval, val) => setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-scheme\": parseInt(nval?.currentTarget?.value) } })}>\n                                                        <option key=\"0\">Rank</option>\n                                                        <option key=\"1\">Number</option>\n                                                        <option key=\"2\">Jaccard</option>\n                                                    </HTMLSelect>\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(5)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Resolution\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"0.5\" value={tmpInputParams[\"cluster\"][\"clus-res\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-res\": nval } }) }} />\n                                                </Label>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col\">\n                                        <div>\n                                            <H5><Tag round={true}>6</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(6)}\n                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                    t-SNE\n                                                </span>\n                                            </H5>\n                                            <div className=\"row\">\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(6)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Perplexity\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"30\" value={tmpInputParams[\"tsne\"][\"tsne-perp\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"tsne\": { ...tmpInputParams[\"tsne\"], \"tsne-perp\": nval } }) }} />\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(6)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Iterations\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"500\" value={tmpInputParams[\"tsne\"][\"tsne-iter\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"tsne\": { ...tmpInputParams[\"tsne\"], \"tsne-iter\": nval } }) }} />\n                                                </Label>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"col\">\n                                        <div>\n                                            <H5><Tag round={true}>7</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(7)}\n                                                    onMouseLeave={() => setShowStepHelper(null)}>\n                                                    UMAP\n                                                </span>\n                                            </H5>\n                                            <div className=\"row\">\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(7)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Number of neighbors\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"15\" value={tmpInputParams[\"umap\"][\"umap-nn\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { ...tmpInputParams[\"umap\"], \"umap-nn\": nval } }) }} />\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(7)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Minimum distance\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"0.01\" value={tmpInputParams[\"umap\"][\"umap-min_dist\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { ...tmpInputParams[\"umap\"], \"umap-min_dist\": nval } }) }} />\n                                                </Label>\n                                                <Label className=\"row-input\">\n                                                    <Text className=\"text-100\">\n                                                        <span className=\"row-tooltip\"\n                                                            onMouseEnter={() => setShowStepHelper(7)}\n                                                            onMouseLeave={() => setShowStepHelper(null)}>\n                                                            Epochs\n                                                        </span>\n                                                    </Text>\n                                                    <NumericInput\n                                                        placeholder=\"500\" value={tmpInputParams[\"umap\"][\"umap-epoch\"]}\n                                                        onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { ...tmpInputParams[\"umap\"], \"umap-epoch\": nval } }) }} />\n                                                </Label>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div className=\"row-input-tooltips\">\n                                    {\n                                        !tmpInputValid &&\n                                        <Callout intent=\"danger\"\n                                            title=\"Incorrect file format\"\n                                            style={{\n                                                marginBottom: '10px'\n                                            }}>\n                                            <p>Upload files that in one of these formats;\n                                                <ul>\n                                                    <li>Matrix Market - <code>*.mtx</code> or <code>*.mtx.gz</code></li>\n                                                    <li>features or genes, <code>*.tsv</code> or <code>*.tsv.gz</code></li>\n                                                    <li>HDF5 (10x or h5ad) - <code>*.h5</code> or <code>*.hdf5</code> or <code>*.h5ad</code></li>\n                                                </ul>\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper == 1 &&\n                                        <Callout intent=\"primary\">\n                                            <p>We currently support files in the Cellranger format -\n                                                namely, a Matrix Market file containing the count matrix.\n                                                We also recommend supplying the feature annotation\n                                                (<code>features.tsv.gz</code> or <code>genes.tsv.gz</code>).\n                                                Users may also provide a TSV file containing the barcode annotations, if any.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper == 2 &&\n                                        <Callout intent=\"primary\">\n                                            <p>At this step, we compute per-cell quality control (QC)\n                                                metrics such as the total count per cell, the total number\n                                                of detected features and (if the feature annotation is supplied)\n                                                the mitochondrial proportion in each cell.\n                                            </p>\n                                            <p>We remove low-quality\n                                                cells based on these metrics - specifically, cells with low total\n                                                counts/number of detected features or high mitochondrial proportions\n                                                are filtered out.\n                                            </p>\n                                            <p>We use an outlier-based approach to define the\n                                                filter threshold under the assumption that most cells in the\n                                                dataset are of acceptable quality.\n                                            </p>\n                                            <p>\n                                                <strong>Number of MADs</strong>:\n                                                Number of median absolute deviations (MADs) from the median,\n                                                used to define a filter threshold in the appropriate direction\n                                                for each QC metric. Increasing this value will reduce the stringency\n                                                of the filtering.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper == 3 &&\n                                        <Callout intent=\"primary\">\n                                            <p>\n                                                Identify highly variable genes while accounting\n                                                for the mean-variance relationship. We do so by\n                                                fitting a mean-dependent trend to the variances,\n                                                computed from the log-transformed normalized expression\n                                                values. The residuals from the trend are then used to\n                                                rank highly variable genes.\n                                            </p>\n                                            <p>\n                                                <strong>Lowess span</strong>:\n                                                The span of the LOWESS smoother for fitting the mean-variance trend.\n                                                Larger values increase the smoothness of the global trend at the\n                                                cost of decreasing sensitivity to local variations.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper == 4 &&\n                                        <Callout intent=\"primary\">\n                                            <p>\n                                                Perform a principal components analysis (PCA)\n                                                to obtain per-cell coordinates in a low-dimensional space.\n                                                This is used to compact the data for faster downstream computation,\n                                                as well as to remove uninteresting high-dimensional noise.\n                                            </p>\n                                            <p>\n                                                <strong>Number of HVGs</strong>:\n                                                Number of highly variable genes to use to perform the PCA. Larger values\n                                                will capture more biological signal at the cost of increasing\n                                                noise and computational work.\n                                            </p>\n                                            <p>\n                                                <strong>Number of PCs</strong>:\n                                                Number of principal components with the highest variance\n                                                to retain in downstream analyses. Larger values will capture\n                                                more biological signal at the cost of increasing noise and\n                                                computational work.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper == 5 &&\n                                        <Callout intent=\"primary\">\n                                            <p>\n                                                Cluster cells into discrete groupings based on their\n                                                relative similarity in the low-dimensional space.\n                                                The set of clusters serve as a summary of the cellular\n                                                heterogeneity in the population, allowing us to easily\n                                                perform further characterization on subpopulations of\n                                                interest.\n                                            </p>\n                                            <p>\n                                                <strong>Method</strong>:\n                                                Clustering algorithm to use. Currently, we use multi-level\n                                                community detection on an shared nearest neighbor (SNN)\n                                                graph where cells are the nodes and edges are created\n                                                between neighboring cells.\n                                            </p>\n                                            <p>\n                                                <strong>Number of neighbors</strong>:\n                                                Number of neighbors to use to construct the shared\n                                                nearest neighbor graph. Larger values result in broader clusters.\n                                            </p>\n                                            <p>\n                                                <strong>Use ANN ?</strong>:\n                                                Use an approximate method to speed up the nearest neighbor search.\n                                                This sacrifices some accuracy for speed in larger datasets.\n                                            </p>\n                                            <p>\n                                                <strong>Weighting scheme</strong>:\n                                                Weighting scheme to use for the edges of the shared nearest neighbor graph.\n                                                The Rank approach derives a weight from the rank of the closest shared neighbor;\n                                                the Number approach uses the number of shared neighbors; and the Jaccard approach\n                                                uses the Jaccard index of the neighbor sets.\n                                            </p>\n                                            <p>\n                                                <strong>Resolution</strong>:\n                                                Resolution parameter for the multi-level clustering, used to adjust\n                                                the modularity calculation during community optimization.\n                                                Larger values yield more fine-grained clusters.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper == 6 &&\n                                        <Callout intent=\"primary\">\n                                            <p>\n                                                Create a t-SNE plot to visualize cells in two dimensions, because our\n                                                feeble human minds cannot interpret high-dimensional spaces.\n                                                Cells that were neighbors in the original space are kept close\n                                                together in the 2D embedding, while dissimilar cells are placed\n                                                (arbitrarily) far away.\n                                            </p>\n                                            <p>\n                                                <strong>Perplexity</strong>:\n                                                Perplexity parameter, which determines the size of the neighborhood of each cell.\n                                                Larger values will favor preservation of global structure in the 2D embedding.\n                                            </p>\n                                            <p>\n                                                <strong>Iterations</strong>:\n                                                Number of t-SNE iterations. Doesn't usually have much of an effect if\n                                                you leave it as it is.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {showStepHelper == 7 &&\n                                        <Callout title=\"Visually important content\" intent=\"primary\">\n                                            <p>\n                                                Create a UMAP plot to visualize cells in two dimensions.\n                                                Like the t-SNE, this aims to map cells from a high-dimensional\n                                                space into a 2D embedding, where neighboring cells are kept close\n                                                together and dissimilar cells are placed far apart.\n                                            </p>\n                                            <p>\n                                                <strong>Number of neighbors</strong>:\n                                                Number of neighbors to use when defining the size of the local neighborhood.\n                                                Larger values will favor preservation of global structure.\n                                            </p>\n                                            <p>\n                                                <strong>Minimum distance</strong>:\n                                                Minimum distance between points. Smaller values result in more tightly\n                                                packed embedding and favor local structure.\n                                            </p>\n                                            <p>\n                                                <strong>Epochs</strong>:\n                                                Number of epochs to use for convergence. This doesn't really\n                                                change all too much.\n                                            </p>\n                                        </Callout>\n                                    }\n                                </div>\n                            </div>\n                        } />\n                        <Tab id=\"load\" title=\"Load saved analysis\" panel={\n                            <div className=\"inputs-container\">\n                                <div className='row-input'>\n                                    <div className=\"col\">\n                                        <div>\n                                            <H5><Tag round={true}>1</Tag>\n                                                <span className=\"row-tooltip\">\n                                                    Load analysis file\n                                                </span>\n                                            </H5>\n                                            <div className=\"row\">\n                                                <Label className=\"row-input\">\n                                                    <FileInput text={inputText.file} onInputChange={(msg) => { setInputText({ ...inputText, \"file\": msg.target.files[0].name }); setTmpInputFiles({ ...tmpInputFiles, \"file\": msg.target.files }) }} />\n                                                </Label>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className='row-input-tooltips'>\n                                    {\n                                        !tmpInputValid &&\n                                        <Callout intent=\"danger\"\n                                            title=\"Incorrect file format\"\n                                            style={{\n                                                marginBottom: '10px'\n                                            }}>\n                                        </Callout>\n                                    }\n                                    <Callout intent=\"primary\">\n                                        Import a saved analysis from <strong>kana</strong>. These files\n                                        are gzipped and are stored as <strong><code>*.kana.gz</code></strong>.\n                                    </Callout>\n                                </div>\n                            </div>\n                        } />\n                    </Tabs>\n                </div >\n\n                {\n                    includeFooter ? (\n                        <div className={Classes.DIALOG_FOOTER} >\n                            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                                <Tooltip2 content=\"Run Analysis\">\n                                    <Button disabled={!tmpInputValid} icon=\"function\" onClick={handleImport}>Analyze</Button>\n                                </Tooltip2>\n                            </div>\n                        </div>\n                    ) : (\n                        <div style={{ margin: \"0 20px\" }}>\n                        </div>\n                    )\n                }\n            </Dialog >\n        </>\n    );\n}\n\nexport default AnalysisDialog;\n","import { useContext } from 'react';\nimport { AppContext } from '../../context/AppContext';\n\nconst Stats = () => {\n    const { initDims, qcDims } = useContext(AppContext);\n\n    return (\n        <>\n            {\n                <span>\n                    : {initDims ? `${initDims}` : \" ???\"}\n                    {qcDims ?  ` (after QC: ${qcDims})` : \"\" }\n                </span>\n            }\n        </>\n    );\n};\n\nexport default Stats;\n","import {\n    Button,\n    Classes,\n    Drawer,\n    Position,\n} from \"@blueprintjs/core\";\nimport React, { useState, useContext } from 'react';\n\nimport { AppContext } from '../../context/AppContext';\n\nconst Logs = () => {\n    const { logs } = useContext(AppContext);\n\n    const [state, setState] = useState({\n        autoFocus: true,\n        canEscapeKeyClose: true,\n        canOutsideClickClose: true,\n        enforceFocus: true,\n        hasBackdrop: true,\n        isOpen: false,\n        position: Position.RIGHT,\n        size: undefined,\n        usePortal: true,\n    });\n\n    const handleOpen = () => setState({ isOpen: true });\n\n    const handleClose = () => setState({ isOpen: false });\n\n    return (\n        <>\n            <Button onClick={handleOpen} icon=\"wrench\" outlined={true}\n                intent=\"warning\"></Button>\n            <Drawer\n                icon=\"info-sign\"\n                onClose={handleClose}\n                title=\"What's happening ?\"\n                {...state}\n            >\n                <div className={Classes.DRAWER_BODY}>\n                    <div className={Classes.DIALOG_BODY}>\n                        <ul className=\"list\">\n                            {\n                                logs.map((x, i) => (\n                                    <li key={i}>{x}</li>\n                                ))\n                            }\n                        </ul>\n                    </div>\n                </div>\n            </Drawer>\n        </>\n    )\n}\n\nexport default Logs;\n","import {\n    Button, Classes, Dialog, H5, Card, Elevation\n} from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport React, { useContext, useState, useCallback } from \"react\";\n\nimport { AppContext } from \"../../context/AppContext\";\n\nfunction IntroDialog({\n    buttonText,\n    includeFooter,\n    ...props\n}) {\n    const { setOpenInput } = useContext(AppContext);\n\n    const [isOpen, setIsOpen] = useState(true);\n    const [showClose, setShowClose] = useState(false);\n\n    const handleButtonClick = useCallback(() => {\n        setIsOpen(!isOpen);\n        setShowClose(true);\n    }, [isOpen]);\n    const handleClose = useCallback(() => setIsOpen(false), []);\n\n    const handleInputs = () => {\n        setOpenInput(true);\n        handleClose();\n    }\n\n    return (\n        <>\n            <Button onClick={handleButtonClick} icon=\"info-sign\" intent=\"primary\" text=\"\" />\n            <Dialog {...props} isOpen={isOpen} onClose={handleClose}>\n                <div className={Classes.DIALOG_BODY}>\n                    <Card elevation={Elevation.ZERO}>\n                        <p><strong>kana</strong> performs a standard scRNA-seq data analysis directly inside the browser.</p>\n\n                        <p>With just a few clicks, you can get a UMAP/t-SNE and marker genes in an intuitive interface for further exploration.\n                            No need to transfer data, no need to install software, no need to configure a backend server -\n                            just point to a Matrix Market file and we'll analyze <em>your</em> data on <em>your</em> computer, no questions asked.\n                        </p>\n                        <p>Check out our <a href=\"https://github.com/jkanche/scran.js.app\" target=\"_blank\">GitHub page</a> for more details.\n                            Or you could just play around with the app to see what it can do - after all, it's totally free!\n                        </p>\n                        <H5>Authors</H5>\n                        Jayaram Kancherla (<a href=\"https://github.com/jkanche\" target=\"_blank\"><strong>@jkanche</strong></a>),\n                        Aaron Lun (<a href=\"https://github.com/LTLA\" target=\"_blank\"><strong>@LTLA</strong></a>)\n                    </Card>\n                </div>\n                <div className={Classes.DIALOG_FOOTER}>\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                        {\n                            showClose ? <Button icon=\"cross\" onClick={handleClose}>Close</Button>\n                                :\n                                <Tooltip2 content=\"行くぞ!\">\n                                    <Button icon=\"bring-data\" onClick={handleInputs}>Get started</Button>\n                                </Tooltip2>\n                        }\n                    </div>\n                </div>\n            </Dialog>\n        </>\n    );\n}\n\nexport default IntroDialog;\n","import {\n  Alignment,\n  Button,\n  Navbar,\n  NavbarDivider,\n  NavbarGroup,\n  NavbarHeading,\n  ButtonGroup,\n  Menu,\n  MenuItem,\n  EditableText\n} from \"@blueprintjs/core\";\n\nimport { Popover2, Tooltip2 } from \"@blueprintjs/popover2\";\n\nimport { useContext, useState } from 'react';\n\nimport AnalysisDialog from '../Analysis';\nimport Stats from '../Stats';\nimport Logs from '../Logs';\nimport IntroDialog from \"../Intro\";\n\nimport { AppContext } from \"../../context/AppContext\";\n\nconst Header = () => {\n  // state for dialogs\n  const [state] = useState({\n    autoFocus: true,\n    canEscapeKeyClose: true,\n    canOutsideClickClose: false,\n    enforceFocus: true,\n    shouldReturnFocusOnClose: true,\n  });\n\n  const { setExportState, datasetName, setDatasetName } = useContext(AppContext);\n\n  return (\n    <>\n      <Navbar className=\"bp3-dark\">\n        <NavbarGroup className=\"navbar-group\" align={Alignment.LEFT}>\n\n          <NavbarHeading>kana</NavbarHeading>\n\n          <NavbarDivider />\n          <span>Single cell RNA-seq analysis in the browser</span>\n          <NavbarDivider />\n\n          <AnalysisDialog\n            icon=\"document\"\n            title=\"Import dataset & update parameters (mouseover for info)\"\n            buttonText=\"Start Analysis\"\n            includeFooter={true}\n            {...state} />\n          <NavbarDivider />\n\n          <Tooltip2 content=\"Modify dataset title\">\n            <EditableText defaultValue={datasetName} intent=\"primary\"\n              onConfirm={(val) => { setDatasetName(val) }} />\n          </Tooltip2>\n\n          <Stats />\n          <NavbarDivider />\n\n          <ButtonGroup>\n            <Popover2 content={\n              <Menu>\n                <MenuItem text=\"Save\" icon=\"floppy-disk\" disabled={true} />\n                <MenuItem text=\"Download\" icon=\"download\"\n                  onClick={() => {\n                    setExportState(true);\n                  }} />\n              </Menu>\n            } placement=\"bottom-start\">\n              <Button intent=\"warning\" rightIcon=\"caret-down\" text=\"Export\" />\n            </Popover2>\n          </ButtonGroup>\n          <NavbarDivider />\n\n          <Logs />\n          <NavbarDivider />\n\n          <IntroDialog\n            icon=\"document\"\n            title=\"Single-cell RNA-seq analysis in the browser\"\n            isOpen={true}\n            {...state}\n          />\n        </NavbarGroup>\n      </Navbar>\n    </>\n  );\n};\n\nexport default Header;\n","import { useEffect, useRef } from \"react\";\nimport * as d3 from 'd3';\n\n// a typical d3 bar plot\nconst BarPlot = (props) => {\n    const container = useRef();\n\n    useEffect(() => {\n        let data = props?.data;\n        let propwidth = props?.width;\n        let color = props?.color;\n        let ymax = props?.ymax;\n\n        if (!ymax) {\n            ymax = Math.max(...data.map((d) => { return d.value; }));\n        }\n\n        if (!propwidth) {\n            propwidth = 325;\n        }\n\n        if (!color) {\n            color = \"#00B3A4\";\n        }\n\n        if (!data) return \"\";\n\n        let containerEl = container.current;\n        containerEl.innerHTML = \"\";\n\n        const margin = { top: 10, right: 30, bottom: 30, left: 40 },\n            width = propwidth - margin.left - margin.right,\n            height = 200 - margin.top - margin.bottom;\n\n        const svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                `translate(${margin.left},${margin.top})`);\n\n        var x = d3.scaleBand()\n            .range([0, width])\n            .domain(data.map((d) => { return d.key; }))\n            .padding(0.2);\n\n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x))\n            .selectAll(\"text\")\n            .attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n            .style(\"text-anchor\", \"end\");\n\n        var y = d3.scaleLinear()\n            .domain([0, ymax])\n            .range([height, 0]);\n\n        svg.append(\"g\")\n            .call(d3.axisLeft(y));\n\n        svg.selectAll(\"bars\")\n            .data(data)\n            .enter()\n            .append(\"rect\")\n            .attr(\"x\", (d) => { return x(d.key); })\n            .attr(\"y\", (d) => { return y(d.value); })\n            .attr(\"width\", x.bandwidth())\n            .attr(\"height\", (d) => { return height - y(d.value); })\n            .attr(\"fill\", (d, i) => {\n                if (Array.isArray(color)) {\n                    return color[i];\n                }\n                return color;\n            })\n    }, []);\n\n    return (\n        <div ref={container}></div>\n    );\n};\n\nexport default BarPlot;","import BarPlot from './BarPlot';\n\nconst PCABarPlot = (props) => {\n\n    let data = props?.pca?.var_exp;\n\n    if (!data) return \"\";\n\n    let chart_data = [];\n    Object.values(data)?.forEach((x, i) => {\n        chart_data.push({\n            key: i + 1,\n            value: x * 100\n        });\n    });\n\n    return (\n        <BarPlot data={chart_data} />\n    );\n};\n\nexport default PCABarPlot;","import { randomColor } from 'randomcolor';\nimport { useContext, useEffect, useState } from 'react';\nimport { AppContext } from '../../context/AppContext';\nimport BarPlot from './BarPlot';\n\nconst ClusterBarPlot = (props) => {\n\n    let data = props?.data?.clusters;\n\n    const { setClusterColors } = useContext(AppContext);\n    const [tmpColors, setTmpColors] = useState(null);\n\n    useEffect(() => {\n        let cluster_count = Object.keys(x).length;\n        let cluster_colors = null;\n        if (cluster_count > Object.keys(palette).length) {\n            cluster_colors = randomColor({ luminosity: 'dark', count: cluster_count + 1 });\n        } else {\n            cluster_colors = palette[cluster_count.toString()];\n        }\n        setTmpColors(cluster_colors);\n    }, []);\n\n    useEffect(() => {\n        setClusterColors(tmpColors);\n    }, [tmpColors]);\n\n    if (!data) return \"\";\n\n\n    const palette = {\n        1: ['#1b9e77'],\n        2: ['#1b9e77', '#d95f02'],\n        3: ['#1b9e77', '#d95f02', '#7570b3'],\n        4: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a'],\n        5: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e'],\n        6: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02'],\n        7: [\n            '#1b9e77',\n            '#d95f02',\n            '#7570b3',\n            '#e7298a',\n            '#66a61e',\n            '#e6ab02',\n            '#a6761d',\n        ],\n        8: [\n            '#1b9e77',\n            '#d95f02',\n            '#7570b3',\n            '#e7298a',\n            '#66a61e',\n            '#e6ab02',\n            '#a6761d',\n            '#666666',\n        ],\n        9: [\n            '#a6cee3',\n            '#1f78b4',\n            '#b2df8a',\n            '#33a02c',\n            '#fb9a99',\n            '#e31a1c',\n            '#fdbf6f',\n            '#ff7f00',\n            '#cab2d6',\n        ],\n        10: [\n            '#a6cee3',\n            '#1f78b4',\n            '#b2df8a',\n            '#33a02c',\n            '#fb9a99',\n            '#e31a1c',\n            '#fdbf6f',\n            '#ff7f00',\n            '#cab2d6',\n            '#6a3d9a',\n        ],\n        11: [\n            '#a6cee3',\n            '#1f78b4',\n            '#b2df8a',\n            '#33a02c',\n            '#fb9a99',\n            '#e31a1c',\n            '#fdbf6f',\n            '#ff7f00',\n            '#cab2d6',\n            '#6a3d9a',\n            '#ffff99',\n        ],\n        12: [\n            '#a6cee3',\n            '#1f78b4',\n            '#b2df8a',\n            '#33a02c',\n            '#fb9a99',\n            '#e31a1c',\n            '#fdbf6f',\n            '#ff7f00',\n            '#cab2d6',\n            '#6a3d9a',\n            '#ffff99',\n            '#b15928',\n        ],\n    };\n\n    let x = {};\n    for (var i = 0; i < data?.length; i++) {\n        var clus = data[i];\n        if (\"CLUS_\" + clus in x) {\n            x[\"CLUS_\" + clus]++;\n        } else {\n            x[\"CLUS_\" + clus] = 0;\n        }\n    }\n\n    let chart_data = [];\n    Object.values(x)?.forEach((z, i) => {\n        chart_data.push({\n            key: i + 1,\n            value: z\n        });\n    });\n\n    return (\n        tmpColors && <BarPlot data={chart_data} color={tmpColors} />\n    );\n};\n\nexport default ClusterBarPlot;","import { useEffect, useRef } from \"react\";\nimport * as d3 from 'd3';\n\nconst ViolinPlotBasic = (props) => {\n    const container = useRef();\n\n    useEffect(() => {\n\n        let data = props?.rdata;\n        let propwidth = props?.width;\n        let color = props?.color;\n\n        if (!propwidth) {\n            propwidth = 200;\n        }\n\n        if (!color) {\n            color = \"#00B3A4\";\n        }\n\n        if (!data) return \"\";\n\n        let containerEl = container.current;\n        containerEl.innerHTML = \"\";\n\n        const margin = { top: 10, right: 30, bottom: 30, left: 40 },\n            width = propwidth - margin.left - margin.right,\n            height = 200 - margin.top - margin.bottom;\n\n        const svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                `translate(${margin.left},${margin.top})`);\n\n        var y = d3.scaleLinear()\n            .domain(props?.range)\n            .range([height, 0]).nice();\n\n        svg.append(\"g\").call(d3.axisLeft(y));\n\n        var x = d3.scaleBand()\n            .range([0, width])\n            .domain([props?.showLabel])\n            .padding(0.05)\n\n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x))\n\n        var histogram = d3.histogram()\n            .domain(y.domain())\n            .thresholds(y.ticks(20))\n            .value(d => d)\n\n        let bins = histogram(data);\n        var max_bin = d3.max(bins, (d) => { return d.length; })\n\n        var xNum = d3.scaleLinear()\n            .range([0, x.bandwidth()])\n            .domain([-max_bin, max_bin]);\n\n        svg\n            .selectAll(\"violins\")\n            .data([props?.label])\n            .enter()\n            .append(\"g\")\n            .attr(\"transform\", (d) => { return (\"translate(\" + x(d) + \" ,0)\") })\n            .append(\"path\")\n            .datum(() => { return bins })\n            .style(\"stroke\", \"none\")\n            .style(\"fill\", color)\n            .attr(\"d\", d3.area()\n                .x0((d) => { return (xNum(-d.length)) })\n                .x1((d) => { return (xNum(d.length)) })\n                .y((d) => { return (y(d.x0)) })\n                .curve(d3.curveCatmullRom)\n            );\n\n        svg\n            .selectAll(\"threshold\")\n            .data([props?.threshold])\n            .enter()\n            .append(\"line\")\n            .attr(\"transform\", () => { return (\"translate(\" + x(props?.label) + \" ,0)\") })\n            .attr(\"class\", \"threshold\")\n            .attr(\"x1\", 5)\n            .attr(\"y1\", (d) => y(d))\n            .attr(\"x2\", x.bandwidth() - 5)\n            .attr(\"y2\", (d) => y(d))\n            .attr(\"stroke-width\", 2)\n            .attr(\"stroke\", \"Orange\")\n            .on(\"mouseover\", function () {\n                var lines = d3.select(this);\n                lines.attr(\"stroke\", \"black\");\n                lines.attr(\"stroke-width\", \"8\");\n            })\n            .on(\"mouseout\", function () {\n                var lines = d3.select(this);\n                lines.attr(\"stroke\", \"Orange\");\n                lines.attr(\"stroke-width\", \"5\");\n            });\n    }, []);\n\n    return (\n        <div ref={container}></div>\n    );\n};\n\nexport default ViolinPlotBasic;","import ViolinPlotBasic from './ViolinPlotBasic';\nimport './QCPlots.css';\n\n// shows the QC plots for sums, detected and proportion\n// transforms data to a log scale or %\nconst QCPlotMgr = (props) => {\n\n    let qcData = props.data;\n\n    return (\n        <div className=\"qc-plots\">\n            {\n                [\"sums\", \"detected\", \"proportion\"].map(x => {\n                    const props2 = {\n                        \"threshold\": x !== \"proportion\" ?\n                        Math.log2(qcData?.[\"thresholds\"]?.[x]) : qcData?.[\"thresholds\"]?.[x] * 100,\n                        \"range\": x !== \"proportion\" ? \n                            qcData?.[\"ranges\"]?.[x].map((x) => Math.log2(x + 1)) :\n                            qcData?.[\"ranges\"]?.[x].map((x) => x * 100),\n                        \"label\": x,\n                        \"showLabel\": x !== \"proportion\" ? \n                        x + \" (log)\" : x + \" (%)\",\n                        \"rdata\": x !== \"proportion\" ? \n                            qcData?.[\"data\"]?.[x].map((x) => Math.log2(x + 1)) :\n                            qcData?.[\"data\"]?.[x].map((x) => x * 100)\n                    }\n                    return (\n                        <div key={x}>\n                            <ViolinPlotBasic {...props2} />\n                        </div>)\n                })\n            }\n        </div>\n    );\n};\n\nexport default QCPlotMgr;","import React from \"react\";\nimport PCABarPlot from \"../Plots/PCABarPlot\";\nimport ClusterBarPlot from \"../Plots/ClusterBarPlot\";\nimport { useContext } from 'react';\nimport { AppContext } from './../../context/AppContext';\nimport { Card, Elevation } from \"@blueprintjs/core\";\nimport QCPlotMgr from \"../Plots/QCPlotMgr\";\n\nimport './Gallery.css';\n\nconst Gallery = () => {\n  const { pcaVarExp, qcData, clusterData } = useContext(AppContext);\n\n  return (\n    <>\n      <div className=\"gallery-cont\">\n        {\n          clusterData ?\n            <Card className=\"gallery-elem\" elevation={Elevation.ONE}>\n              <h5># of cells per cluster</h5>\n              <ClusterBarPlot data={clusterData} />\n            </Card>\n            : \"\"\n        }\n        {\n          pcaVarExp ?\n            <Card className=\"gallery-elem\" elevation={Elevation.ONE}>\n              <h5>PCA (% variance explained)</h5>\n              <PCABarPlot pca={pcaVarExp} />\n            </Card>\n            : \"\"\n        }\n        {\n          qcData && qcData?.[\"thresholds\"] ?\n            <Card className=\"gallery-elem\" elevation={Elevation.ONE}>\n              <h5>QC Statistics</h5>\n              <QCPlotMgr data={qcData} />\n            </Card>\n            : \"\"\n        }\n      </div>\n    </>\n  );\n};\n\nexport default Gallery;\n","const getMinMax = (arr) => {\n    var max = -Number.MAX_VALUE,\n        min = Number.MAX_VALUE;\n    arr.forEach(function (x) {\n        if (max < x) {\n            max = x;\n        }\n        if (min > x) {\n            min = x;\n        }\n    });\n    return [min, max];\n}\n\nexport default getMinMax;","/*\nRainbowVis-JS \nReleased under Eclipse Public License - v 1.0\n*/\n\nexport default function Rainbow() {\n\t\"use strict\";\n\tvar gradients = null;\n\tvar minNum = 0;\n\tvar maxNum = 100;\n\tvar colours = ['ff0000', 'ffff00', '00ff00', '0000ff'];\n\tsetColours(colours);\n\n\tfunction setColours(spectrum) {\n\t\tif (spectrum.length < 2) {\n\t\t\tthrow new Error('Rainbow must have two or more colours.');\n\t\t} else {\n\t\t\tvar increment = (maxNum - minNum) / (spectrum.length - 1);\n\t\t\tvar firstGradient = new ColourGradient();\n\t\t\tfirstGradient.setGradient(spectrum[0], spectrum[1]);\n\t\t\tfirstGradient.setNumberRange(minNum, minNum + increment);\n\t\t\tgradients = [firstGradient];\n\n\t\t\tfor (var i = 1; i < spectrum.length - 1; i++) {\n\t\t\t\tvar colourGradient = new ColourGradient();\n\t\t\t\tcolourGradient.setGradient(spectrum[i], spectrum[i + 1]);\n\t\t\t\tcolourGradient.setNumberRange(minNum + increment * i, minNum + increment * (i + 1));\n\t\t\t\tgradients[i] = colourGradient;\n\t\t\t}\n\n\t\t\tcolours = spectrum;\n\t\t}\n\t}\n\n\tthis.setSpectrum = function () {\n\t\tsetColours(arguments);\n\t\treturn this;\n\t}\n\n\tthis.setSpectrumByArray = function (array) {\n\t\tsetColours(array);\n\t\treturn this;\n\t}\n\n\tthis.colourAt = function (number) {\n\t\tif (isNaN(number)) {\n\t\t\tthrow new TypeError(number + ' is not a number');\n\t\t} else if (gradients.length === 1) {\n\t\t\treturn gradients[0].colourAt(number);\n\t\t} else {\n\t\t\tvar segment = (maxNum - minNum) / (gradients.length);\n\t\t\tvar index = Math.min(Math.floor((Math.max(number, minNum) - minNum) / segment), gradients.length - 1);\n\t\t\treturn gradients[index].colourAt(number);\n\t\t}\n\t}\n\n\tthis.colorAt = this.colourAt;\n\n\tthis.setNumberRange = function (minNumber, maxNumber) {\n\t\tif (maxNumber > minNumber) {\n\t\t\tminNum = minNumber;\n\t\t\tmaxNum = maxNumber;\n\t\t\tsetColours(colours);\n\t\t} else {\n\t\t\tthrow new RangeError('maxNumber (' + maxNumber + ') is not greater than minNumber (' + minNumber + ')');\n\t\t}\n\t\treturn this;\n\t}\n}\n\nfunction ColourGradient() {\n\t\"use strict\";\n\tvar startColour = 'ff0000';\n\tvar endColour = '0000ff';\n\tvar minNum = 0;\n\tvar maxNum = 100;\n\n\tthis.setGradient = function (colourStart, colourEnd) {\n\t\tstartColour = getHexColour(colourStart);\n\t\tendColour = getHexColour(colourEnd);\n\t}\n\n\tthis.setNumberRange = function (minNumber, maxNumber) {\n\t\tif (maxNumber > minNumber) {\n\t\t\tminNum = minNumber;\n\t\t\tmaxNum = maxNumber;\n\t\t} else {\n\t\t\tthrow new RangeError('maxNumber (' + maxNumber + ') is not greater than minNumber (' + minNumber + ')');\n\t\t}\n\t}\n\n\tthis.colourAt = function (number) {\n\t\treturn calcHex(number, startColour.substring(0, 2), endColour.substring(0, 2))\n\t\t\t+ calcHex(number, startColour.substring(2, 4), endColour.substring(2, 4))\n\t\t\t+ calcHex(number, startColour.substring(4, 6), endColour.substring(4, 6));\n\t}\n\n\tfunction calcHex(number, channelStart_Base16, channelEnd_Base16) {\n\t\tvar num = number;\n\t\tif (num < minNum) {\n\t\t\tnum = minNum;\n\t\t}\n\t\tif (num > maxNum) {\n\t\t\tnum = maxNum;\n\t\t}\n\t\tvar numRange = maxNum - minNum;\n\t\tvar cStart_Base10 = parseInt(channelStart_Base16, 16);\n\t\tvar cEnd_Base10 = parseInt(channelEnd_Base16, 16);\n\t\tvar cPerUnit = (cEnd_Base10 - cStart_Base10) / numRange;\n\t\tvar c_Base10 = Math.round(cPerUnit * (num - minNum) + cStart_Base10);\n\t\treturn formatHex(c_Base10.toString(16));\n\t}\n\n\tfunction formatHex(hex) {\n\t\tif (hex.length === 1) {\n\t\t\treturn '0' + hex;\n\t\t} else {\n\t\t\treturn hex;\n\t\t}\n\t}\n\n\tfunction isHexColour(string) {\n\t\tvar regex = /^#?[0-9a-fA-F]{6}$/i;\n\t\treturn regex.test(string);\n\t}\n\n\tfunction getHexColour(string) {\n\t\tif (isHexColour(string)) {\n\t\t\treturn string.substring(string.length - 6, string.length);\n\t\t} else {\n\t\t\tvar name = string.toLowerCase();\n\t\t\tif (colourNames.hasOwnProperty(name)) {\n\t\t\t\treturn colourNames[name];\n\t\t\t}\n\t\t\tthrow new Error(string + ' is not a valid colour.');\n\t\t}\n\t}\n\n\t// Extended list of CSS colornames s taken from\n\t// http://www.w3.org/TR/css3-color/#svg-color\n\tvar colourNames = {\n\t\taliceblue: \"F0F8FF\",\n\t\tantiquewhite: \"FAEBD7\",\n\t\taqua: \"00FFFF\",\n\t\taquamarine: \"7FFFD4\",\n\t\tazure: \"F0FFFF\",\n\t\tbeige: \"F5F5DC\",\n\t\tbisque: \"FFE4C4\",\n\t\tblack: \"000000\",\n\t\tblanchedalmond: \"FFEBCD\",\n\t\tblue: \"0000FF\",\n\t\tblueviolet: \"8A2BE2\",\n\t\tbrown: \"A52A2A\",\n\t\tburlywood: \"DEB887\",\n\t\tcadetblue: \"5F9EA0\",\n\t\tchartreuse: \"7FFF00\",\n\t\tchocolate: \"D2691E\",\n\t\tcoral: \"FF7F50\",\n\t\tcornflowerblue: \"6495ED\",\n\t\tcornsilk: \"FFF8DC\",\n\t\tcrimson: \"DC143C\",\n\t\tcyan: \"00FFFF\",\n\t\tdarkblue: \"00008B\",\n\t\tdarkcyan: \"008B8B\",\n\t\tdarkgoldenrod: \"B8860B\",\n\t\tdarkgray: \"A9A9A9\",\n\t\tdarkgreen: \"006400\",\n\t\tdarkgrey: \"A9A9A9\",\n\t\tdarkkhaki: \"BDB76B\",\n\t\tdarkmagenta: \"8B008B\",\n\t\tdarkolivegreen: \"556B2F\",\n\t\tdarkorange: \"FF8C00\",\n\t\tdarkorchid: \"9932CC\",\n\t\tdarkred: \"8B0000\",\n\t\tdarksalmon: \"E9967A\",\n\t\tdarkseagreen: \"8FBC8F\",\n\t\tdarkslateblue: \"483D8B\",\n\t\tdarkslategray: \"2F4F4F\",\n\t\tdarkslategrey: \"2F4F4F\",\n\t\tdarkturquoise: \"00CED1\",\n\t\tdarkviolet: \"9400D3\",\n\t\tdeeppink: \"FF1493\",\n\t\tdeepskyblue: \"00BFFF\",\n\t\tdimgray: \"696969\",\n\t\tdimgrey: \"696969\",\n\t\tdodgerblue: \"1E90FF\",\n\t\tfirebrick: \"B22222\",\n\t\tfloralwhite: \"FFFAF0\",\n\t\tforestgreen: \"228B22\",\n\t\tfuchsia: \"FF00FF\",\n\t\tgainsboro: \"DCDCDC\",\n\t\tghostwhite: \"F8F8FF\",\n\t\tgold: \"FFD700\",\n\t\tgoldenrod: \"DAA520\",\n\t\tgray: \"808080\",\n\t\tgreen: \"008000\",\n\t\tgreenyellow: \"ADFF2F\",\n\t\tgrey: \"808080\",\n\t\thoneydew: \"F0FFF0\",\n\t\thotpink: \"FF69B4\",\n\t\tindianred: \"CD5C5C\",\n\t\tindigo: \"4B0082\",\n\t\tivory: \"FFFFF0\",\n\t\tkhaki: \"F0E68C\",\n\t\tlavender: \"E6E6FA\",\n\t\tlavenderblush: \"FFF0F5\",\n\t\tlawngreen: \"7CFC00\",\n\t\tlemonchiffon: \"FFFACD\",\n\t\tlightblue: \"ADD8E6\",\n\t\tlightcoral: \"F08080\",\n\t\tlightcyan: \"E0FFFF\",\n\t\tlightgoldenrodyellow: \"FAFAD2\",\n\t\tlightgray: \"D3D3D3\",\n\t\tlightgreen: \"90EE90\",\n\t\tlightgrey: \"D3D3D3\",\n\t\tlightpink: \"FFB6C1\",\n\t\tlightsalmon: \"FFA07A\",\n\t\tlightseagreen: \"20B2AA\",\n\t\tlightskyblue: \"87CEFA\",\n\t\tlightslategray: \"778899\",\n\t\tlightslategrey: \"778899\",\n\t\tlightsteelblue: \"B0C4DE\",\n\t\tlightyellow: \"FFFFE0\",\n\t\tlime: \"00FF00\",\n\t\tlimegreen: \"32CD32\",\n\t\tlinen: \"FAF0E6\",\n\t\tmagenta: \"FF00FF\",\n\t\tmaroon: \"800000\",\n\t\tmediumaquamarine: \"66CDAA\",\n\t\tmediumblue: \"0000CD\",\n\t\tmediumorchid: \"BA55D3\",\n\t\tmediumpurple: \"9370DB\",\n\t\tmediumseagreen: \"3CB371\",\n\t\tmediumslateblue: \"7B68EE\",\n\t\tmediumspringgreen: \"00FA9A\",\n\t\tmediumturquoise: \"48D1CC\",\n\t\tmediumvioletred: \"C71585\",\n\t\tmidnightblue: \"191970\",\n\t\tmintcream: \"F5FFFA\",\n\t\tmistyrose: \"FFE4E1\",\n\t\tmoccasin: \"FFE4B5\",\n\t\tnavajowhite: \"FFDEAD\",\n\t\tnavy: \"000080\",\n\t\toldlace: \"FDF5E6\",\n\t\tolive: \"808000\",\n\t\tolivedrab: \"6B8E23\",\n\t\torange: \"FFA500\",\n\t\torangered: \"FF4500\",\n\t\torchid: \"DA70D6\",\n\t\tpalegoldenrod: \"EEE8AA\",\n\t\tpalegreen: \"98FB98\",\n\t\tpaleturquoise: \"AFEEEE\",\n\t\tpalevioletred: \"DB7093\",\n\t\tpapayawhip: \"FFEFD5\",\n\t\tpeachpuff: \"FFDAB9\",\n\t\tperu: \"CD853F\",\n\t\tpink: \"FFC0CB\",\n\t\tplum: \"DDA0DD\",\n\t\tpowderblue: \"B0E0E6\",\n\t\tpurple: \"800080\",\n\t\tred: \"FF0000\",\n\t\trosybrown: \"BC8F8F\",\n\t\troyalblue: \"4169E1\",\n\t\tsaddlebrown: \"8B4513\",\n\t\tsalmon: \"FA8072\",\n\t\tsandybrown: \"F4A460\",\n\t\tseagreen: \"2E8B57\",\n\t\tseashell: \"FFF5EE\",\n\t\tsienna: \"A0522D\",\n\t\tsilver: \"C0C0C0\",\n\t\tskyblue: \"87CEEB\",\n\t\tslateblue: \"6A5ACD\",\n\t\tslategray: \"708090\",\n\t\tslategrey: \"708090\",\n\t\tsnow: \"FFFAFA\",\n\t\tspringgreen: \"00FF7F\",\n\t\tsteelblue: \"4682B4\",\n\t\ttan: \"D2B48C\",\n\t\tteal: \"008080\",\n\t\tthistle: \"D8BFD8\",\n\t\ttomato: \"FF6347\",\n\t\tturquoise: \"40E0D0\",\n\t\tviolet: \"EE82EE\",\n\t\twheat: \"F5DEB3\",\n\t\twhite: \"FFFFFF\",\n\t\twhitesmoke: \"F5F5F5\",\n\t\tyellow: \"FFFF00\",\n\t\tyellowgreen: \"9ACD32\"\n\t}\n}\n\n// if (typeof module !== 'undefined') {\n//   module.exports = Rainbow;\n// }\n","import { ScatterGL } from 'scatter-gl';\nimport { useEffect, useRef, useContext, useState } from 'react';\nimport {\n    ControlGroup, Button, Icon, ButtonGroup, Callout, RangeSlider,\n    Divider\n} from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\n\nimport { AppContext } from '../../context/AppContext';\nimport getMinMax from './utils';\n\nimport Rainbow from './rainbowvis';\nimport { randomColor } from 'randomcolor';\n\nimport \"./ScatterPlot.css\";\n\nconst DimPlot = () => {\n    const container = useRef();\n\n    // ref to the plot object\n    const [scatterplot, setScatterplot] = useState(null);\n    // set which cluster to highlight, also for custom selections\n    const [clusHighlight, setClusHighlight] = useState(null);\n    // show a gradient on the plot ?\n    const [showGradient, setShowGradient] = useState(false);\n    // expression min & max\n    const [exprMinMax, setExprMinMax] = useState(null);\n    // user selected min and max from UI\n    const [sliderMinMax, setSliderMinMax] = useState(exprMinMax);\n    // gradient scale\n    const [gradient, setGradient] = useState(null);\n\n    const { plotRedDims, redDims, defaultRedDims, setDefaultRedDims, clusterData,\n        tsneData, umapData, setPlotRedDims, clusterColors, setClusterColors,\n        gene, selectedClusterSummary,\n        customSelection, setCustomSelection,\n        setDelCustomSelection } = useContext(AppContext);\n\n    // keeps track of what points were selected in lasso selections\n    const [selectedPoints, setSelectedPoints] = useState(null);\n    // set mode for plot\n    const [plotMode, setPlotMode] = useState('PAN');\n\n    // if either gene or expression changes, compute gradients and min/max\n    useEffect(() => {\n        if (gene === null) {\n            setShowGradient(false);\n            setGradient(null);\n        }\n\n        if (selectedClusterSummary?.[gene]?.expr) {\n            let exprMinMax = getMinMax(selectedClusterSummary?.[gene]?.expr);\n            let val = exprMinMax[1] === 0 ? 0.01 : exprMinMax[1];\n            let tmpgradient = new Rainbow();\n            tmpgradient.setSpectrum('#F5F8FA', \"#2965CC\");\n            tmpgradient.setNumberRange(0, val);\n            setShowGradient(true);\n            setGradient(tmpgradient);\n            setSliderMinMax([0, val]);\n            setExprMinMax([0, val]);\n        }\n    }, [selectedClusterSummary?.[gene]?.expr], gene);\n\n    // hook to also react when user changes the slider\n    useEffect(() => {\n\n        if (Array.isArray(sliderMinMax)) {\n            let tmpgradient = new Rainbow();\n            tmpgradient.setSpectrum('#F5F8FA', \"#2965CC\");\n            tmpgradient.setNumberRange(...sliderMinMax);\n            setGradient(tmpgradient);\n            setShowGradient(true);\n        }\n\n    }, [sliderMinMax]);\n\n    useEffect(() => {\n\n        const containerEl = container.current;\n\n        if (containerEl) {\n\n            let tmp_scatterplot = scatterplot;\n\n            // only create the plot object once\n            if (!tmp_scatterplot) {\n                const containerEl = container.current;\n\n                containerEl.style.width = \"95%\";\n                containerEl.style.height = \"95%\";\n\n                tmp_scatterplot = new ScatterGL(containerEl, {\n                    onSelect: (points) => {\n                        if (points.length !== 0) {\n                            setSelectedPoints(points);\n                        }\n                    },\n                    orbitControls: {\n                        zoomSpeed: 1.25,\n                    },\n                    styles: {\n                        point: {\n                            scaleDefault: 1.75,\n                            scaleSelected: 2,\n                            scaleHover: 2,\n                        }\n                    }\n                });\n\n                tmp_scatterplot.setPanMode();\n                setScatterplot(tmp_scatterplot);\n            }\n\n            // if dimensions are available\n            if (plotRedDims?.plot) {\n\n                let cluster_mappings = plotRedDims?.clusters;\n                const cluster_colors = clusterColors\n\n                let points = []\n                plotRedDims?.plot.x.forEach((x, i) => {\n                    points.push([x, plotRedDims?.plot.y[i]]);\n                });\n\n                let metadata = {\n                    clusters: cluster_mappings\n                };\n                const dataset = new ScatterGL.Dataset(points, metadata);\n                const max = Math.max(...clusterData?.clusters);\n                tmp_scatterplot.render(dataset);\n\n                // callback for coloring cells on the plot\n                // by default chooses the cluster assigned color for the plot\n                // if a gradient bar is available, sets gradient \n                // if a cluster is highlighted, grays out all other cells except the cells\n                // in the cluster or selection\n                // priority of rendering\n                // gradient selection > cluster selection > graying out\n                // an initial implementation also used a per cluster gradient to color cells\n                // by expression, commmented out\n                tmp_scatterplot.setPointColorer((i, selectedIndices, hoverIndex) => {\n\n                    if (selectedIndices.has(i)) {\n                        return \"#30404D\";\n                    }\n\n                    if (clusHighlight != null) {\n                        if (!String(clusHighlight).startsWith(\"cs\")) {\n                            if (clusHighlight !== cluster_mappings[i]) return '#D3D3D3';\n                        } else {\n                            if (!customSelection[clusHighlight].includes(i)) return '#D3D3D3';\n                        }\n                    }\n\n                    if (gene !== null && Array.isArray(selectedClusterSummary?.[gene]?.expr)) {\n\n                        return \"#\" + gradient.colorAt(selectedClusterSummary?.[gene]?.expr?.[i]);\n                        // if we want per cell gradient \n                        // let colorGradients = cluster_colors.map(x => {\n                        //     var gradient = new Rainbow();\n                        //     gradient.setSpectrum('#D3D3D3', x);\n                        //     let val = exprMinMax[1] === 0 ? 0.01 : exprMinMax[1];\n                        //     gradient.setNumberRange(0, val);\n                        //     return gradient;\n                        // });\n\n                        // return \"#\" + colorGradients[cluster_mappings[i]].colorAt(selectedClusterSummary?.[gene]?.expr?.[i])\n                    }\n\n                    if (clusHighlight != null && String(clusHighlight).startsWith(\"cs\")) {\n                        let tmpclus = parseInt(clusHighlight.replace(\"cs\", \"\"));\n                        return cluster_colors[max + tmpclus];\n                    } else {\n                        return cluster_colors[cluster_mappings[i]];\n                    }\n                });\n            }\n        }\n    }, [plotRedDims, gradient, clusHighlight]);\n\n    useEffect(() => {\n        changeRedDim(defaultRedDims);\n    }, [defaultRedDims])\n\n    // handler for switching dimensions\n    const changeRedDim = (x) => {\n        if (defaultRedDims === \"TSNE\") {\n            setPlotRedDims({\n                \"plot\": tsneData,\n                \"clusters\": clusterData?.clusters\n            });\n        } else if (defaultRedDims === \"UMAP\") {\n            setPlotRedDims({\n                \"plot\": umapData,\n                \"clusters\": clusterData?.clusters\n            });\n        }\n    };\n\n    const setInteraction = (x) => {\n        if (x === \"PAN\") {\n            scatterplot.setPanMode();\n            setPlotMode(\"PAN\");\n        } else if (x === \"SELECT\") {\n            scatterplot.setSelectMode();\n            setPlotMode(\"SELECT\");\n        }\n    }\n\n    const clearPoints = () => {\n        setSelectedPoints(null);\n        scatterplot.select(null);\n    }\n\n    // save use selected selection of cells\n    const savePoints = () => {\n        // generate random color\n        let color = randomColor({ luminosity: 'dark', count: 1 });\n        let tmpcolor = [...clusterColors];\n        tmpcolor.push(color[0]);\n        setClusterColors(tmpcolor);\n\n        let cid = Object.keys(customSelection).length;\n        let tmpSelection = { ...customSelection };\n        tmpSelection[`cs${cid + 1}`] = selectedPoints;\n        setCustomSelection(tmpSelection);\n\n        setSelectedPoints(null);\n        scatterplot.select(null);\n    }\n\n    return (\n        <div className=\"scatter-plot\">\n            <ButtonGroup style={{ minWidth: 75, minHeight: 150 }}\n                fill={false}\n                large={false}\n                minimal={false}\n                vertical={true}\n                className='left-sidebar'\n            >\n                <Button className='dim-button'\n                    disabled={redDims.indexOf(\"TSNE\") === -1}\n                    onClick={() => setDefaultRedDims(\"TSNE\")}\n                    intent={defaultRedDims === \"TSNE\" ? \"primary\" : \"\"}\n                >\n                    <Icon icon=\"database\"></Icon>\n                    <br />\n                    <span>TSNE</span>\n                </Button>\n                <Button className='dim-button'\n                    disabled={redDims.indexOf(\"UMAP\") === -1}\n                    onClick={() => setDefaultRedDims(\"UMAP\")}\n                    intent={defaultRedDims === \"UMAP\" ? \"primary\" : \"\"}\n                >\n                    <Icon icon=\"database\"></Icon><br />\n                    <span>UMAP</span>\n                </Button>\n            </ButtonGroup>\n            <ControlGroup className=\"top-header\" fill={false} vertical={false}>\n                <Button active={plotMode == \"PAN\"}\n                    intent={plotMode === \"PAN\" ? \"primary\" : \"none\"}\n                    icon=\"hand-up\" onClick={x => setInteraction(\"PAN\")}>Pan</Button>\n                <Button active={plotMode == \"SELECT\"}\n                    intent={plotMode === \"SELECT\" ? \"primary\" : \"none\"}\n                    icon=\"widget\" onClick={x => setInteraction(\"SELECT\")}>Selection</Button>\n            </ControlGroup>\n            <div className='dim-plot'>\n                {\n                    plotRedDims?.plot ?\n                        <div ref={container} ></div> :\n                        \"Choose an Embedding... or Embeddings are being computed...\"\n                }\n            </div>\n            <div className='right-sidebar'>\n                <div style={{ width: '100%' }}>\n                    {\n                        <div className='right-sidebar-cluster'>\n                            <Callout title=\"CLUSTERS\">\n                                <ul>\n                                    {clusterColors?.map((x, i) => {\n                                        return i < clusterColors.length - Object.keys(customSelection).length ?\n                                            (<li key={i}\n                                                className={clusHighlight == i ? 'legend-highlight' : ''}\n                                                style={{ color: x }}\n                                                onClick={() => {\n                                                    if (i === clusHighlight) {\n                                                        setClusHighlight(null);\n                                                    } else {\n                                                        setClusHighlight(i);\n                                                    }\n                                                }}\n                                            > Cluster {i + 1} </li>)\n                                            : \"\"\n                                    })}\n                                </ul>\n                                {\n                                    Object.keys(customSelection).length > 0 ?\n                                        <div\n                                            style={{\n                                                paddingTop: '5px'\n                                            }}>\n                                            <span>Custom Selection &nbsp;\n                                                <Tooltip2 content=\"Custom selection of cells\" openOnTargetFocus={false}>\n                                                    <Icon icon=\"help\"></Icon>\n                                                </Tooltip2>\n                                            </span>\n                                            <ul>\n                                                {Object.keys(customSelection)?.map((x, i) => {\n                                                    return (<li key={x}\n                                                        className={clusHighlight == x ? 'legend-highlight' : ''}\n                                                        style={{ color: clusterColors[Math.max(...clusterData?.clusters) + 1 + i] }}\n                                                    >\n                                                        <div style={{\n                                                            display: 'inline-flex',\n                                                            alignItems: 'center',\n                                                            flexDirection: 'row'\n                                                        }}>\n                                                            <span\n                                                                style={{\n                                                                    alignSelf: 'center'\n                                                                }}\n                                                                onClick={() => {\n                                                                    if (x === clusHighlight) {\n                                                                        setClusHighlight(null);\n\n                                                                    } else {\n                                                                        setClusHighlight(x);\n                                                                    }\n                                                                }}>Custom Selection {x.replace(\"cs\", \"\")}\n                                                            </span>\n                                                            <Icon\n                                                                size={12}\n                                                                icon=\"trash\"\n                                                                style={{\n                                                                    paddingLeft: '2px'\n                                                                }}\n                                                                onClick={() => {\n                                                                    let tmpSel = { ...customSelection };\n                                                                    delete tmpSel[x];\n                                                                    setCustomSelection(tmpSel);\n\n                                                                    let tmpcolors = [...clusterColors];\n                                                                    tmpcolors = tmpcolors.slice(0, tmpcolors.length - 1);\n                                                                    setClusterColors(tmpcolors);\n\n                                                                    setDelCustomSelection(x);\n\n                                                                    if (clusHighlight === x) {\n                                                                        setClusHighlight(null);\n                                                                    }\n                                                                }}></Icon>\n                                                        </div>\n                                                    </li>)\n                                                })}\n                                            </ul>\n                                        </div>\n                                        :\n                                        \"\"\n                                }\n                            </Callout>\n                            {\n                                selectedPoints && selectedPoints.length > 0 ?\n                                    <div>\n                                        <Divider />\n                                        <span>Selection &nbsp;\n                                            <Tooltip2 content=\"save this selection of cells\" openOnTargetFocus={false}>\n                                                <Icon icon=\"help\"></Icon>\n                                            </Tooltip2>\n                                        </span>\n                                        <div className='selection-container'>\n                                            <span>{selectedPoints.length} cells selected</span>\n                                            <div className='selection-button-container'>\n                                                <Button small={true} intent='primary'\n                                                    onClick={savePoints}>Save</Button>\n                                                <Button small={true}\n                                                    onClick={clearPoints}>Clear</Button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    :\n                                    \"\"\n                            }\n                        </div>\n                    }\n                    {showGradient ?\n                        <div className='right-sidebar-slider'>\n                            <Divider />\n                            <Callout>\n                                <span>Customize Gradient &nbsp;\n                                    <Tooltip2 content=\"Use the slider to adjust the color gradient of the plot. Useful when data is skewed\n                                by either a few lowly or highly expressed cells\" openOnTargetFocus={false}>\n                                        <Icon icon=\"help\"></Icon>\n                                    </Tooltip2>\n                                </span>\n                                <div className='dim-slider-container'>\n                                    <div className='dim-slider-gradient'>\n                                        <span>{Math.round(exprMinMax[0])}</span>&nbsp;\n                                        <div\n                                            style={{\n                                                backgroundImage: `linear-gradient(to right, #F5F8FA ${(sliderMinMax[0] - exprMinMax[0]) * 100 / (exprMinMax[1] - exprMinMax[0])}%, ${((sliderMinMax[1] + sliderMinMax[0] - (2 * exprMinMax[0]))) * 100 / (2 * (exprMinMax[1] - exprMinMax[0]))}%, #2965CC ${(100 - (exprMinMax[1] - sliderMinMax[1]) * 100 / (exprMinMax[1] - exprMinMax[0]))}%)`,\n                                                width: '175px', height: '15px',\n                                            }}></div>&nbsp;\n                                        <span>{Math.round(exprMinMax[1])}</span>\n                                    </div>\n                                    <div className='dim-range-slider'>\n                                        <RangeSlider\n                                            min={Math.round(exprMinMax[0])}\n                                            max={Math.round(exprMinMax[1])}\n                                            stepSize={Math.round(exprMinMax[1] - exprMinMax[0]) / 25}\n                                            onChange={(range) => { setSliderMinMax(range) }}\n                                            value={[Math.round(sliderMinMax[0]), Math.round(sliderMinMax[1])]}\n                                            vertical={false}\n                                        />\n                                    </div>\n                                </div>\n                            </Callout>\n                        </div>\n                        :\n                        \"\"\n                    }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DimPlot;\n","import { useEffect, useRef } from \"react\";\nimport * as d3 from 'd3';\n\nconst StackedHistogram = (props) => {\n    const container = useRef();\n\n    useEffect(() => {\n\n        let data = props?.data;\n        let propwidth = props?.width;\n        let color = props?.color;\n        let clusters = props?.clusters;\n\n        if (!propwidth) {\n            propwidth = 325;\n        }\n\n        if (!color) {\n            color = \"#00B3A4\";\n        }\n\n        if (!data) return \"\";\n\n        let containerEl = container.current;\n        containerEl.innerHTML = \"\";\n\n        const margin = { top: 10, right: 30, bottom: 30, left: 40 },\n            width = propwidth - margin.left - margin.right,\n            height = 150 - margin.top - margin.bottom;\n\n        const svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                `translate(${margin.left},${margin.top})`);\n\n        const x = d3.scaleLinear()\n            .domain([0, Math.max(...data)])\n            .range([0, width]);\n\n        svg.append(\"g\")\n            .attr(\"transform\", `translate(0, ${height})`)\n            .call(d3.axisBottom(x));\n\n        const histogram = d3.histogram()\n            .value((d) => { return d; })\n            .domain(x.domain())\n            .thresholds(x.ticks(25));\n\n        const bins = histogram(data);\n        const allCells = histogram(data.filter((d, i) => { return clusters?.[i] === 0 }));\n        const clusterCells = histogram(data.filter((d, i) => { return clusters?.[i] === 1 }));\n\n        const y = d3.scaleLinear()\n            .range([height, 0])\n            .domain([0, d3.max(bins, (d) => { return d.length; })]);\n\n        // svg.append(\"g\")\n        //     .call(d3.axisLeft(y));\n\n        svg.selectAll(\"rectAll\")\n            .data(allCells)\n            .join(\"rect\")\n            .attr(\"x\", 1)\n            .attr(\"transform\", (d) => { return `translate(${x(d.x0)} , ${y(d.length)})` })\n            .attr(\"width\", (d) => { return x(d.x1) - x(d.x0) - 1; })\n            .attr(\"height\", (d) => { return height - y(d.length); })\n            .style(\"fill\", \"#D3D3D3\")\n            .style(\"opacity\", 0.6)\n\n        svg.selectAll(\"rectCluster\")\n            .data(clusterCells)\n            .enter()\n            .append(\"rect\")\n            .attr(\"x\", 1)\n            .attr(\"transform\", (d) => { return `translate(${x(d.x0)}, ${y(d.length)})` })\n            .attr(\"width\", (d) => { return x(d.x1) - x(d.x0) - 1; })\n            .attr(\"height\", (d) => { return height - y(d.length); })\n            .style(\"fill\", color)\n            .style(\"opacity\", 0.6)\n\n        svg.append(\"circle\").attr(\"cx\", width - 50).attr(\"cy\", 5).attr(\"r\", 3).style(\"fill\", \"#D3D3D3\")\n        svg.append(\"circle\").attr(\"cx\", width - 50).attr(\"cy\", 15).attr(\"r\", 3).style(\"fill\", color)\n        svg.append(\"text\").attr(\"x\", width - 40).attr(\"y\", 5).text(\"all cells\").style(\"font-size\", \"10px\").attr(\"alignment-baseline\", \"middle\")\n        svg.append(\"text\").attr(\"x\", width - 40).attr(\"y\", 15).text(\"this cluster\").style(\"font-size\", \"10px\").attr(\"alignment-baseline\", \"middle\")\n    }, []);\n\n    return (\n        <div ref={container}></div>\n    );\n};\n\nexport default StackedHistogram;","import { useEffect, useRef } from \"react\";\nimport * as d3 from 'd3';\n\nconst Histogram = (props) => {\n    const container = useRef();\n\n    useEffect(() => {\n\n        let data = props?.data;\n        let propwidth = props?.width;\n        let propheight = props?.height;\n        let color = props?.color;\n\n        if (!propwidth) {\n            propwidth = 325;\n        }\n\n        if (!propheight) {\n            propheight = 150;\n        }\n\n        if (!color) {\n            color = \"#00B3A4\";\n        }\n\n        if (!data) return \"\";\n\n        let containerEl = container.current;\n        containerEl.innerHTML = \"\";\n\n        const margin = { top: 5, right: 5, bottom: 5, left: 5 },\n            width = propwidth - margin.left - margin.right,\n            height = propheight - margin.top - margin.bottom;\n\n        const svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                `translate(${margin.left},${margin.top})`);\n\n        const x = d3.scaleLinear()\n            .domain([0, Math.max(...data)])\n            .range([0, width]);\n\n        svg.append(\"g\")\n            .attr(\"transform\", `translate(0, ${height})`)\n            .call(d3.axisBottom(x));\n\n        const histogram = d3.histogram()\n            .value((d) => { return d; })\n            .domain(x.domain())\n            .thresholds(x.ticks(25));\n\n        const bins = histogram(data);\n\n        const y = d3.scaleLinear()\n            .range([height, 0]);\n\n        y.domain([0, d3.max(bins, (d) => { return d.length; })]);\n\n        // Hide y-axis\n        // svg.append(\"g\")\n        //     .call(d3.axisLeft(y));\n\n        svg.selectAll(\"rect\")\n            .data(bins)\n            .join(\"rect\")\n            .attr(\"x\", 1)\n            .attr(\"transform\", (d) => { return `translate(${x(d.x0)} , ${y(d.length)})` })\n            .attr(\"width\", (d) => { return x(d.x1) - x(d.x0) - 1 })\n            .attr(\"height\", (d) => { return height - y(d.length); })\n            .style(\"fill\", color)\n    }, [props?.data]);\n\n    return (\n        <div ref={container}></div>\n    );\n};\n\nexport default Histogram;","import { useRef } from \"react\";\n\n// uses two divs to fill out bars given various props\nconst Cell = (props) => {\n    const container = useRef();\n\n    let propwidth = props?.width;\n    let minmax = props?.minmax;\n    let score = props?.score;\n    let colorscale = props?.colorscale;\n    let colorscore = props?.colorscore;\n    let color = props?.color;\n\n    let percWidth = ((score - minmax[0]) / (minmax[1] - minmax[0]));\n\n    if (!propwidth) {\n        propwidth = \"100%\";\n    }\n\n    if (!color) {\n        color = \"#00B3A4\";\n    }\n\n    return (\n        <div ref={container}\n            style={{\n                width: propwidth, height: '15px',\n                margin: '5px', border: '1px solid gainsboro',\n                alignItems: 'center'\n            }}>\n            {colorscale ?\n                <div style={{\n                    width: `${colorscore * 100}%`,\n                    backgroundColor: colorscale(colorscore),\n                    height: '100%'\n                }}></div>\n                :\n                <div style={{\n                    width: `${percWidth * 100}%`,\n                    backgroundColor: color,\n                    height: '100%'\n                }}>\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default Cell;","import { useRef } from \"react\";\nimport * as d3 from 'd3';\n\n// similar to cell, but fills the entire div, \n// width is not controlled in this case\nconst HeatmapCell = (props) => {\n    const container = useRef();\n\n    let propwidth = props?.width;\n    let score = props?.score;\n    let minmax = props?.minmax;\n\n    // inverted scale - blue for +ve, red for -ve\n    const detectedScale = d3.scaleSequential(d3.interpolateRdYlBu)\n        .domain([minmax[1], minmax[0]]);\n\n    if (!propwidth) {\n        propwidth = \"100%\";\n    }\n\n    return (\n        <div ref={container}\n            style={{\n                width: propwidth, height: '15px',\n                margin: '5px', border: '1px solid gainsboro',\n                alignItems: 'center',\n                backgroundColor: detectedScale(score)\n            }}>\n            <div style={{\n                width: '100%',\n                backgroundColor: detectedScale(score),\n                height: '100%'\n            }}></div>\n        </div>\n    );\n};\n\nexport default HeatmapCell;","import React, { useEffect, useContext, useState, useMemo } from 'react';\nimport {\n    Button, H4, H5, Icon, Collapse, InputGroup,\n    RangeSlider, Tag, HTMLSelect, Classes, Card, Elevation\n} from \"@blueprintjs/core\";\nimport { Tooltip2, Popover2 } from \"@blueprintjs/popover2\";\nimport { Virtuoso } from 'react-virtuoso';\nimport * as d3 from 'd3';\n\nimport { AppContext } from '../../context/AppContext';\nimport StackedHistogram from '../Plots/StackedHistogram';\nimport Histogram from '../Plots/Histogram';\n\nimport Cell from '../Plots/Cell.js';\nimport HeatmapCell from '../Plots/HeatmapCell';\n\nimport './markers.css';\n\nconst MarkerPlot = () => {\n\n    const { \n        genesInfo, clusterData, selectedClusterSummary, setSelectedClusterSummary,\n        selectedCluster, setSelectedCluster, setClusterRank,\n        setReqGene, clusterColors, gene, setGene,\n        customSelection } = useContext(AppContext);\n\n    // what cluster is selected\n    const [clusSel, setClusSel] = useState(null);\n    // binary vector for stacked histogram plots, this cluster (1) vs others (0)\n    const [clusArrayStacked, setClusArrayStacked] = useState(null);\n    // gene search\n    const [searchInput, setSearchInput] = useState(null);\n\n    // ranges for various marker stats\n    const [meanMinMax, setMeanMinMax] = useState(null);\n    const [deltaMinMax, setDeltaMinMax] = useState(null);\n    const [lfcMinMax, setLfcMinMax] = useState(null);\n    const [detectedMinMax, setDetectedMinMax] = useState(null);\n    const [minMaxs, setMinMaxs] = useState(null);\n\n    // params for filtering\n    const [means, setMeans] = useState(null);\n    const [deltas, setDeltas] = useState(null);\n    const [lfcs, setLfcs] = useState(null);\n    const [detects, setDetects] = useState(null);\n\n    // stores range filters from UI\n    const [markerFilter, setMarkerFilter] = useState({});\n    // records to show after filtering\n    const [prosRecords, setProsRecords] = useState(null);\n\n    // scale to use for detected on expression bar\n    const detectedScale = d3.interpolateRdYlBu; //d3.interpolateRdBu;\n    // d3.scaleSequential()\n    // .domain([0, 1])\n    // .range([\"red\", \"blue\"])\n    // .interpolate(d3.interpolateHcl);\n\n    // if a cluster changes, its summary data is requested from the worker\n    // pre-process results for UI\n    useEffect(() => {\n        if (!selectedClusterSummary) return selectedClusterSummary;\n\n        let trecs = selectedClusterSummary;\n\n        if (trecs.length === 0) return trecs;\n\n        let tmpmeans = trecs.map(x => x?.mean);\n        let tmeanMinMax = d3.extent(tmpmeans)\n        let tmeanval = tmeanMinMax[1] === 0 ? 0.01 : tmeanMinMax[1];\n        setMeanMinMax([parseFloat(tmeanMinMax[0].toFixed(2)), parseFloat(tmeanval.toFixed(2))]);\n        setMeans(tmpmeans);\n\n        let tmpdeltas = trecs.map(x => x?.delta);\n        let tdeltaMinMax = d3.extent(tmpdeltas)\n        let tdeltaval = tdeltaMinMax[1] === 0 ? 0.01 : tdeltaMinMax[1];\n        setDeltaMinMax([parseFloat(tdeltaMinMax[0].toFixed(2)), parseFloat(tdeltaval.toFixed(2))]);\n        setDeltas(tmpdeltas);\n\n        let tmplfcs = trecs.map(x => x?.lfc);\n        let tlfcsMinMax = d3.extent(tmplfcs)\n        let tlfcsval = tlfcsMinMax[1] === 0 ? 0.01 : tlfcsMinMax[1];\n        setLfcMinMax([parseFloat(tlfcsMinMax[0].toFixed(2)), parseFloat(tlfcsval.toFixed(2))]);\n        setLfcs(tmplfcs);\n\n        let tmpdetects = trecs.map(x => x?.detected);\n        let tdetectsMinMax = d3.extent(tmpdetects)\n        let tdetecval = tdetectsMinMax[1] === 0 ? 0.01 : tdetectsMinMax[1];\n        setDetectedMinMax([parseFloat(tdetectsMinMax[0].toFixed(2)), parseFloat(tdetecval.toFixed(2))]);\n        setDetects(tmpdetects);\n\n        setMinMaxs({\n            \"lfc\": [parseFloat(tlfcsMinMax[0].toFixed(2)), parseFloat(tlfcsval.toFixed(2))],\n            \"mean\": [parseFloat(tmeanMinMax[0].toFixed(2)), parseFloat(tmeanval.toFixed(2))],\n            \"detected\": [parseFloat(tdetectsMinMax[0].toFixed(2)), parseFloat(tdetecval.toFixed(2))],\n            \"delta\": [parseFloat(tdeltaMinMax[0].toFixed(2)), parseFloat(tdeltaval.toFixed(2))],\n        });\n\n        let sortedRows = [...trecs];\n\n        setProsRecords(sortedRows);\n\n    }, [selectedClusterSummary]);\n\n    // genes to show, hook for filters and input\n    const sortedRows = useMemo(() => {\n\n        if (!prosRecords) return [];\n\n        let sortedRows = prosRecords;\n        if (markerFilter) {\n            for (let key in markerFilter) {\n                let range = markerFilter[key];\n                if (range[0] == minMaxs[key][0] && range[1] == minMaxs[key][1]) continue;\n                sortedRows = sortedRows.filter((x) => x[key] >= range[0] && x[key] <= range[1]);\n            }\n        }\n\n        if (!searchInput || searchInput === \"\") return sortedRows;\n\n        sortedRows = sortedRows.filter((x) => genesInfo[x.row].toLowerCase().indexOf(searchInput.toLowerCase()) !== -1);\n        return sortedRows;\n    }, [prosRecords, searchInput, markerFilter]);\n\n    // update clusters when custom selection is made in the UI\n    useEffect(() => {\n        if (clusterData?.clusters) {\n            let max_clusters = Math.max(...clusterData.clusters);\n\n            let clus = [];\n            for (let i = 0; i < max_clusters + 1; i++) {\n                clus.push(i + 1);\n            }\n\n            clus = clus.concat(Object.keys(customSelection));\n\n            setClusSel(clus);\n            if (selectedCluster == null) {\n                setSelectedCluster(0);\n            }\n        }\n    }, [clusterData, customSelection, selectedCluster]);\n\n    // hook for figure out this vs other cells for stacked histograms\n    useEffect(() => {\n        var clusArray = [];\n        if(String(selectedCluster).startsWith(\"cs\")) {\n            clusterData?.clusters?.forEach((x,i) => customSelection[selectedCluster].includes(i) ? clusArray.push(1) : clusArray.push(0));\n        } else {\n            clusterData?.clusters?.forEach(x => x === selectedCluster ? clusArray.push(1) : clusArray.push(0));\n        }\n        setClusArrayStacked(clusArray);\n    }, [selectedCluster]);\n\n    const handleMarkerFilter = (val, key) => {\n\n        let tmp = { ...markerFilter };\n        tmp[key] = val;\n        setMarkerFilter(tmp);\n    }\n\n    return (\n        <div className='marker-container'>\n            <H4>Marker Genes</H4>\n            {\n                clusSel ?\n                    <HTMLSelect\n                        onChange={(x) => {\n                            setGene(null);\n                            let tmpselection = x.currentTarget?.value;\n                            if (tmpselection.startsWith(\"Cluster\")) {\n                                tmpselection = parseInt(tmpselection.replace(\"Cluster \", \"\")) - 1\n                            } else if (tmpselection.startsWith(\"Custom\")) {\n                                tmpselection = tmpselection.replace(\"Custom Selection \", \"\")\n                            }\n                            setSelectedCluster(tmpselection);\n\n                            setMarkerFilter({});\n                            setGene(null);\n                        }}>\n                        {\n                            clusSel.map((x, i) => (\n                                <option key={i}>{String(x).startsWith(\"cs\") ? \"Custom Selection\" : \"Cluster\"} {x}</option>\n                            ))\n                        }\n                    </HTMLSelect>\n                    : \"\"\n            }\n            {\n                selectedClusterSummary ?\n                    <div className='marker-table'>\n                        <div className='marker-header'>\n                            <InputGroup\n                                leftIcon=\"search\"\n                                small={true}\n                                placeholder=\"Search gene...\"\n                                type={\"text\"}\n                                onChange={(e) => setSearchInput(e.target.value)}\n                            />\n                            <span>\n                                <Icon icon=\"sort\" style={{\n                                    paddingRight: '5px'\n                                }}></Icon>\n                                <HTMLSelect\n                                    onChange={(x) => {\n                                        setClusterRank(x.currentTarget.value);\n                                    }} defaultValue={\"cohen-min-rank\"}>\n                                    <option>cohen-min</option>\n                                    <option>cohen-mean</option>\n                                    <option>cohen-min-rank</option>\n                                    <option>auc-min</option>\n                                    <option>auc-mean</option>\n                                    <option>auc-min-rank</option>\n                                    <option>lfc-min</option>\n                                    <option>lfc-mean</option>\n                                    <option>lfc-min-rank</option>\n                                    <option>delta-d-min</option>\n                                    <option>delta-d-mean</option>\n                                    <option>delta-d-min-rank</option>\n                                </HTMLSelect>\n                            </span>\n                        </div>\n                        <Virtuoso\n                            components={{\n                                Item: ({ children, ...props }) => {\n                                    return (\n                                        <div className='row-card' {...props}>\n                                            {children}\n                                        </div>\n                                    );\n                                },\n                                Header: () => {\n                                    return (<div className='row-container row-header'>\n                                        <span>Gene</span>\n                                        <span>Log-FC</span>\n                                        <span>Δ-detected</span>\n                                        <span>Expression &nbsp;\n                                            <Tooltip2 content=\"bar represents the mean expression of the gene and the color gradient represents detected.\" openOnTargetFocus={false}>\n                                                <Icon size={12} icon=\"help\"></Icon>\n                                            </Tooltip2>\n                                        </span>\n                                        <span></span>\n                                    </div>)\n                                }\n                            }}\n                            className='marker-list'\n                            totalCount={sortedRows.length}\n                            itemContent={index => {\n                                const row = sortedRows[index];\n                                const rowexp = row.expanded;\n                                const rowExpr = row.expr;\n\n                                return (\n                                    <div>\n                                        <div className='row-container'>\n                                            <span>{genesInfo[row.row]}</span>\n                                            {\n                                                <Popover2\n                                                    popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                                    hasBackdrop={false}\n                                                    interactionKind=\"hover\"\n                                                    placement='auto'\n                                                    hoverOpenDelay={500}\n                                                    modifiers={{\n                                                        arrow: { enabled: true },\n                                                        flip: { enabled: true },\n                                                        preventOverflow: { enabled: true },\n                                                    }}\n                                                    content={\n                                                        <Card elevation={Elevation.ZERO}>\n                                                            <table>\n                                                                <tr>\n                                                                    <td></td>\n                                                                    <th scope=\"col\">{genesInfo[row.row]}</th>\n                                                                    <th scope=\"col\">This cluster</th>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Log-FC</th>\n                                                                    <td>{row.lfc.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{lfcMinMax[0].toFixed(2)}, {lfcMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Δ-detected</th>\n                                                                    <td>{row.delta.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{deltaMinMax[0].toFixed(2)}, {deltaMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Detected</th>\n                                                                    <td>{row.detected.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{detectedMinMax[0].toFixed(2)}, {detectedMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Expression</th>\n                                                                    <td>{row.mean.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{meanMinMax[0].toFixed(2)}, {meanMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                            </table>\n                                                        </Card>\n                                                    }>\n                                                    <HeatmapCell minmax={lfcMinMax} colorscale={d3.interpolateRdBu} score={row.lfc} />\n                                                </Popover2>\n                                            }\n                                            {\n                                                <Popover2\n                                                    popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                                    hasBackdrop={false}\n                                                    interactionKind=\"hover\"\n                                                    placement='auto'\n                                                    hoverOpenDelay={500}\n                                                    modifiers={{\n                                                        arrow: { enabled: true },\n                                                        flip: { enabled: true },\n                                                        preventOverflow: { enabled: true },\n                                                    }}\n                                                    content={\n                                                        <Card elevation={Elevation.ZERO}>\n                                                            <table>\n                                                                <tr>\n                                                                    <td></td>\n                                                                    <th scope=\"col\">{genesInfo[row.row]}</th>\n                                                                    <th scope=\"col\">This cluster</th>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Δ-detected</th>\n                                                                    <td>{row.delta.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{deltaMinMax[0].toFixed(2)}, {deltaMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Detected</th>\n                                                                    <td>{row.detected.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{detectedMinMax[0].toFixed(2)}, {detectedMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Log-FC</th>\n                                                                    <td>{row.lfc.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{lfcMinMax[0].toFixed(2)}, {lfcMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Expression</th>\n                                                                    <td>{row.mean.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{meanMinMax[0].toFixed(2)}, {meanMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                            </table>\n                                                        </Card>\n                                                    }>\n                                                    <HeatmapCell minmax={deltaMinMax} colorscale={d3.interpolateRdBu} score={row.delta} />\n                                                </Popover2>}\n                                            {\n                                                <Popover2\n                                                    popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                                    hasBackdrop={false}\n                                                    interactionKind=\"hover\"\n                                                    placement='auto'\n                                                    hoverOpenDelay={500}\n                                                    modifiers={{\n                                                        arrow: { enabled: true },\n                                                        flip: { enabled: true },\n                                                        preventOverflow: { enabled: true },\n                                                    }}\n                                                    content={\n                                                        <Card elevation={Elevation.ZERO}>\n                                                            <table>\n                                                                <tr>\n                                                                    <td></td>\n                                                                    <th scope=\"col\">{genesInfo[row.row]}</th>\n                                                                    <th scope=\"col\">This cluster</th>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Expression</th>\n                                                                    <td>{row.mean.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{meanMinMax[0].toFixed(2)}, {meanMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Log-FC</th>\n                                                                    <td>{row.lfc.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{lfcMinMax[0].toFixed(2)}, {lfcMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Δ-detected</th>\n                                                                    <td>{row.delta.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{deltaMinMax[0].toFixed(2)}, {deltaMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Detected</th>\n                                                                    <td>{row.detected.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{detectedMinMax[0].toFixed(2)}, {detectedMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                            </table>\n                                                        </Card>\n                                                    }>\n                                                    <Cell minmax={meanMinMax} colorscale={detectedScale}\n                                                        score={row.mean} colorscore={row.detected}\n                                                    />\n                                                </Popover2>}\n                                            <div className='row-action'>\n                                                <Button icon={rowexp ? 'minus' : 'plus'} small={true} fill={false}\n                                                    className='row-action'\n                                                    onClick={() => {\n                                                        let tmp = [...selectedClusterSummary];\n                                                        tmp[row.index].expanded = !tmp[row.index].expanded;\n                                                        setSelectedClusterSummary(tmp);\n                                                        if (!rowExpr) {\n                                                            setReqGene(row.row);\n                                                        }\n                                                    }}\n                                                >\n                                                </Button>\n                                                <Button small={true} fill={false}\n                                                    className='row-action'\n                                                    onClick={() => {\n                                                        if (row.index === gene) {\n                                                            setGene(null);\n                                                        } else {\n                                                            setGene(row.index);\n                                                            if (!rowExpr) {\n                                                                setReqGene(row.row);\n                                                            }\n                                                        }\n                                                    }}\n                                                >\n                                                    <Icon icon={'tint'}\n                                                        color={row.index === gene ? \n                                                            String(selectedCluster).startsWith(\"cs\") ? clusterColors[Math.max(...clusterData?.clusters) + parseInt(selectedCluster.replace(\"cs\", \"\"))] : ''\n                                                            : ''}\n                                                    ></Icon>\n                                                </Button>\n                                            </div>\n                                        </div>\n                                        <Collapse isOpen={rowexp}>\n                                            {/* <Histogram data={rowExpr} color={clusterColors[selectedCluster]} /> */}\n                                            {rowExpr && <StackedHistogram data={rowExpr}\n                                                color={String(selectedCluster).startsWith(\"cs\") ? clusterColors[Math.max(...clusterData?.clusters) + parseInt(selectedCluster.replace(\"cs\", \"\"))] : clusterColors[selectedCluster]}\n                                                clusters={clusArrayStacked} />}\n                                        </Collapse>\n                                    </div>\n                                )\n                            }}\n                        />\n                        <div className='marker-footer'>\n                            <H5 className='marker-footer-title'>Filter Markers</H5>\n\n                            <div className='marker-filter-container'>\n                                <Tag className=\"marker-filter-container-tag\" minimal={true} intent='primary'>Log-FC</Tag>\n                                <Histogram data={lfcs} height={35} color=\"#F5498B\" />\n                                <div className='marker-filter-slider'>\n                                    {lfcMinMax && <RangeSlider\n                                        min={lfcMinMax[0]}\n                                        max={lfcMinMax[1]}\n                                        stepSize={parseFloat((Math.abs(lfcMinMax[1] - lfcMinMax[0]) / 20).toFixed(2))}\n                                        onChange={(val) => handleMarkerFilter(val, \"lfc\")}\n                                        value={markerFilter?.[\"lfc\"] ? markerFilter?.[\"lfc\"] : lfcMinMax}\n                                        vertical={false}\n                                    />}\n                                </div>\n                            </div>\n\n                            <div className='marker-filter-container'>\n                                <Tag className=\"marker-filter-container-tag\" minimal={true} intent='primary'>Δ-detected</Tag>\n                                <Histogram data={deltas} height={35} color=\"#4580E6\" />\n                                <div className='marker-filter-slider'>\n                                    {deltaMinMax && <RangeSlider\n                                        min={deltaMinMax[0]}\n                                        max={deltaMinMax[1]}\n                                        stepSize={parseFloat((Math.abs(deltaMinMax[1] - deltaMinMax[0]) / 20).toFixed(2))}\n                                        onChange={(val) => handleMarkerFilter(val, \"delta\")}\n                                        value={markerFilter?.[\"delta\"] ? markerFilter?.[\"delta\"] : deltaMinMax}\n                                        vertical={false}\n                                    />}\n                                </div>\n                            </div>\n\n                            <div className='marker-filter-container'>\n                                <Tag className=\"marker-filter-container-tag\" minimal={true} intent='primary'>Mean</Tag>\n                                <Histogram data={means} height={35} />\n                                <div className='marker-filter-slider'>\n                                    {meanMinMax && <RangeSlider\n                                        min={meanMinMax[0]}\n                                        max={meanMinMax[1]}\n                                        stepSize={parseFloat((Math.abs(meanMinMax[1] - meanMinMax[0]) / 20).toFixed(2))}\n                                        onChange={(val) => handleMarkerFilter(val, \"mean\")}\n                                        value={markerFilter?.[\"mean\"] ? markerFilter?.[\"mean\"] : meanMinMax}\n                                        vertical={false}\n                                    />}\n                                </div>\n                            </div>\n\n                            <div className='marker-filter-container'>\n                                <Tag className=\"marker-filter-container-tag\" minimal={true} intent='primary'>Detected</Tag>\n                                <Histogram data={detects} height={35} />\n                                <div className='marker-filter-slider'>\n                                    {detectedMinMax && <RangeSlider\n                                        min={detectedMinMax[0]}\n                                        max={detectedMinMax[1]}\n                                        stepSize={parseFloat((Math.abs(detectedMinMax[1] - detectedMinMax[0]) / 20).toFixed(2))}\n                                        onChange={(val) => handleMarkerFilter(val, \"detected\")}\n                                        value={markerFilter?.[\"detected\"] ? markerFilter?.[\"detected\"] : detectedMinMax}\n                                        vertical={false}\n                                    />}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    : \"\"\n            }\n        </div>\n    );\n};\n\nexport default MarkerPlot;\n","import { useEffect, useRef } from \"react\";\n\nimport './Pong.css';\nimport './coffee.css';\nimport { Label } from \"@blueprintjs/core\";\n\nconst Pong = () => {\n    const container = useRef();\n\n    useEffect(() => {\n\n        const elem = container.current;\n\n        // Global Variables\n        var DIRECTION = {\n            IDLE: 0,\n            UP: 1,\n            DOWN: 2,\n            LEFT: 3,\n            RIGHT: 4\n        };\n\n        var rounds = [5, 5, 3, 3, 2];\n        var colors = ['#1abc9c', '#2ecc71', '#3498db', '#e74c3c', '#9b59b6'];\n\n        // The ball object (The cube that bounces back and forth)\n        var Ball = {\n            new: function (incrementedSpeed) {\n                return {\n                    width: 18,\n                    height: 18,\n                    x: (this.canvas.width / 2) - 9,\n                    y: (this.canvas.height / 2) - 9,\n                    moveX: DIRECTION.IDLE,\n                    moveY: DIRECTION.IDLE,\n                    speed: incrementedSpeed || 9\n                };\n            }\n        };\n\n        // The paddle object (The two lines that move up and down)\n        var Paddle = {\n            new: function (side) {\n                return {\n                    width: 18,\n                    height: 70,\n                    x: side === 'left' ? 150 : this.canvas.width - 150,\n                    y: (this.canvas.height / 2) - 35,\n                    score: 0,\n                    move: DIRECTION.IDLE,\n                    speed: 10\n                };\n            }\n        };\n\n        var Game = {\n            initialize: function () {\n                this.canvas = elem.querySelector('canvas');\n                this.context = this.canvas.getContext('2d');\n\n                this.canvas.width = 1400;\n                this.canvas.height = 1000;\n\n                this.canvas.style.width = (this.canvas.width / 2) + 'px';\n                this.canvas.style.height = (this.canvas.height / 2) + 'px';\n\n                this.player = Paddle.new.call(this, 'left');\n                this.paddle = Paddle.new.call(this, 'right');\n                this.ball = Ball.new.call(this);\n\n                this.paddle.speed = 8;\n                this.running = this.over = false;\n                this.turn = this.paddle;\n                this.timer = this.round = 0;\n                this.color = '#2c3e50';\n\n                Pong.menu();\n                Pong.listen();\n            },\n\n            endGameMenu: function (text) {\n                // Change the canvas font size and color\n                Pong.context.font = '50px Courier New';\n                Pong.context.fillStyle = this.color;\n\n                // Draw the rectangle behind the 'Press any key to begin' text.\n                Pong.context.fillRect(\n                    Pong.canvas.width / 2 - 350,\n                    Pong.canvas.height / 2 - 48,\n                    700,\n                    100\n                );\n\n                // Change the canvas color;\n                Pong.context.fillStyle = '#ffffff';\n\n                // Draw the end game menu text ('Game Over' and 'Winner')\n                Pong.context.fillText(text,\n                    Pong.canvas.width / 2,\n                    Pong.canvas.height / 2 + 15\n                );\n\n                setTimeout(function () {\n                    Pong = Object.assign({}, Game);\n                    Pong.initialize();\n                }, 3000);\n            },\n\n            menu: function () {\n                // Draw all the Pong objects in their current state\n                Pong.draw();\n\n                // Change the canvas font size and color\n                this.context.font = '50px Courier New';\n                this.context.fillStyle = this.color;\n\n                // Draw the rectangle behind the 'Press any key to begin' text.\n                this.context.fillRect(\n                    this.canvas.width / 2 - 350,\n                    this.canvas.height / 2 - 48,\n                    700,\n                    100\n                );\n\n                // Change the canvas color;\n                this.context.fillStyle = '#ffffff';\n\n                // Draw the 'press any key to begin' text\n                this.context.fillText('Press any key to begin',\n                    this.canvas.width / 2,\n                    this.canvas.height / 2 + 15\n                );\n            },\n\n            // Update all objects (move the player, paddle, ball, increment the score, etc.)\n            update: function () {\n                if (!this.over) {\n                    // If the ball collides with the bound limits - correct the x and y coords.\n                    if (this.ball.x <= 0) Pong._resetTurn.call(this, this.paddle, this.player);\n                    if (this.ball.x >= this.canvas.width - this.ball.width) Pong._resetTurn.call(this, this.player, this.paddle);\n                    if (this.ball.y <= 0) this.ball.moveY = DIRECTION.DOWN;\n                    if (this.ball.y >= this.canvas.height - this.ball.height) this.ball.moveY = DIRECTION.UP;\n\n                    // Move player if they player.move value was updated by a keyboard event\n                    if (this.player.move === DIRECTION.UP) this.player.y -= this.player.speed;\n                    else if (this.player.move === DIRECTION.DOWN) this.player.y += this.player.speed;\n\n                    // On new serve (start of each turn) move the ball to the correct side\n                    // and randomize the direction to add some challenge.\n                    if (Pong._turnDelayIsOver.call(this) && this.turn) {\n                        this.ball.moveX = this.turn === this.player ? DIRECTION.LEFT : DIRECTION.RIGHT;\n                        this.ball.moveY = [DIRECTION.UP, DIRECTION.DOWN][Math.round(Math.random())];\n                        this.ball.y = Math.floor(Math.random() * this.canvas.height - 200) + 200;\n                        this.turn = null;\n                    }\n\n                    // If the player collides with the bound limits, update the x and y coords.\n                    if (this.player.y <= 0) this.player.y = 0;\n                    else if (this.player.y >= (this.canvas.height - this.player.height)) this.player.y = (this.canvas.height - this.player.height);\n\n                    // Move ball in intended direction based on moveY and moveX values\n                    if (this.ball.moveY === DIRECTION.UP) this.ball.y -= (this.ball.speed / 1.5);\n                    else if (this.ball.moveY === DIRECTION.DOWN) this.ball.y += (this.ball.speed / 1.5);\n                    if (this.ball.moveX === DIRECTION.LEFT) this.ball.x -= this.ball.speed;\n                    else if (this.ball.moveX === DIRECTION.RIGHT) this.ball.x += this.ball.speed;\n\n                    // Handle paddle (AI) UP and DOWN movement\n                    if (this.paddle.y > this.ball.y - (this.paddle.height / 2)) {\n                        if (this.ball.moveX === DIRECTION.RIGHT) this.paddle.y -= this.paddle.speed / 1.5;\n                        else this.paddle.y -= this.paddle.speed / 4;\n                    }\n                    if (this.paddle.y < this.ball.y - (this.paddle.height / 2)) {\n                        if (this.ball.moveX === DIRECTION.RIGHT) this.paddle.y += this.paddle.speed / 1.5;\n                        else this.paddle.y += this.paddle.speed / 4;\n                    }\n\n                    // Handle paddle (AI) wall collision\n                    if (this.paddle.y >= this.canvas.height - this.paddle.height) this.paddle.y = this.canvas.height - this.paddle.height;\n                    else if (this.paddle.y <= 0) this.paddle.y = 0;\n\n                    // Handle Player-Ball collisions\n                    if (this.ball.x - this.ball.width <= this.player.x && this.ball.x >= this.player.x - this.player.width) {\n                        if (this.ball.y <= this.player.y + this.player.height && this.ball.y + this.ball.height >= this.player.y) {\n                            this.ball.x = (this.player.x + this.ball.width);\n                            this.ball.moveX = DIRECTION.RIGHT;\n\n                            // beep1.play();\n                        }\n                    }\n\n                    // Handle paddle-ball collision\n                    if (this.ball.x - this.ball.width <= this.paddle.x && this.ball.x >= this.paddle.x - this.paddle.width) {\n                        if (this.ball.y <= this.paddle.y + this.paddle.height && this.ball.y + this.ball.height >= this.paddle.y) {\n                            this.ball.x = (this.paddle.x - this.ball.width);\n                            this.ball.moveX = DIRECTION.LEFT;\n\n                            // beep1.play();\n                        }\n                    }\n                }\n\n                // Handle the end of round transition\n                // Check to see if the player won the round.\n                if (this.player.score === rounds[this.round]) {\n                    // Check to see if there are any more rounds/levels left and display the victory screen if\n                    // there are not.\n                    if (!rounds[this.round + 1]) {\n                        this.over = true;\n                        setTimeout(function () { Pong.endGameMenu('Winner!'); }, 1000);\n                    } else {\n                        // If there is another round, reset all the values and increment the round number.\n                        this.color = this._generateRoundColor();\n                        this.player.score = this.paddle.score = 0;\n                        this.player.speed += 0.5;\n                        this.paddle.speed += 1;\n                        this.ball.speed += 1;\n                        this.round += 1;\n\n                        // beep3.play();\n                    }\n                }\n                // Check to see if the paddle/AI has won the round.\n                else if (this.paddle.score === rounds[this.round]) {\n                    this.over = true;\n                    setTimeout(function () { Pong.endGameMenu('Game Over!'); }, 1000);\n                }\n            },\n\n            // Draw the objects to the canvas element\n            draw: function () {\n                // Clear the Canvas\n                this.context.clearRect(\n                    0,\n                    0,\n                    this.canvas.width,\n                    this.canvas.height\n                );\n\n                // Set the fill style to black\n                this.context.fillStyle = this.color;\n\n                // Draw the background\n                this.context.fillRect(\n                    0,\n                    0,\n                    this.canvas.width,\n                    this.canvas.height\n                );\n\n                // Set the fill style to white (For the paddles and the ball)\n                this.context.fillStyle = '#ffffff';\n\n                // Draw the Player\n                this.context.fillRect(\n                    this.player.x,\n                    this.player.y,\n                    this.player.width,\n                    this.player.height\n                );\n\n                // Draw the Paddle\n                this.context.fillRect(\n                    this.paddle.x,\n                    this.paddle.y,\n                    this.paddle.width,\n                    this.paddle.height\n                );\n\n                // Draw the Ball\n                if (Pong._turnDelayIsOver.call(this)) {\n                    this.context.fillRect(\n                        this.ball.x,\n                        this.ball.y,\n                        this.ball.width,\n                        this.ball.height\n                    );\n                }\n\n                // Draw the net (Line in the middle)\n                this.context.beginPath();\n                this.context.setLineDash([7, 15]);\n                this.context.moveTo((this.canvas.width / 2), this.canvas.height - 140);\n                this.context.lineTo((this.canvas.width / 2), 140);\n                this.context.lineWidth = 10;\n                this.context.strokeStyle = '#ffffff';\n                this.context.stroke();\n\n                // Set the default canvas font and align it to the center\n                this.context.font = '100px Courier New';\n                this.context.textAlign = 'center';\n\n                // Draw the players score (left)\n                this.context.fillText(\n                    this.player.score.toString(),\n                    (this.canvas.width / 2) - 300,\n                    200\n                );\n\n                // Draw the paddles score (right)\n                this.context.fillText(\n                    this.paddle.score.toString(),\n                    (this.canvas.width / 2) + 300,\n                    200\n                );\n\n                // Change the font size for the center score text\n                this.context.font = '30px Courier New';\n\n                // Draw the winning score (center)\n                this.context.fillText(\n                    'Round ' + (Pong.round + 1),\n                    (this.canvas.width / 2),\n                    35\n                );\n\n                // Change the font size for the center score value\n                this.context.font = '40px Courier';\n\n                // Draw the current round number\n                this.context.fillText(\n                    rounds[Pong.round] ? rounds[Pong.round] : rounds[Pong.round - 1],\n                    (this.canvas.width / 2),\n                    100\n                );\n            },\n\n            loop: function () {\n                Pong.update();\n                Pong.draw();\n\n                // If the game is not over, draw the next frame.\n                if (!Pong.over) requestAnimationFrame(Pong.loop);\n            },\n\n            listen: function () {\n                document.addEventListener('keydown', function (key) {\n                    // Handle the 'Press any key to begin' function and start the game.\n                    if (Pong.running === false) {\n                        Pong.running = true;\n                        window.requestAnimationFrame(Pong.loop);\n                    }\n\n                    // Handle up arrow and w key events\n                    if (key.keyCode === 38 || key.keyCode === 87) Pong.player.move = DIRECTION.UP;\n\n                    // Handle down arrow and s key events\n                    if (key.keyCode === 40 || key.keyCode === 83) Pong.player.move = DIRECTION.DOWN;\n                });\n\n                // Stop the player from moving when there are no keys being pressed.\n                document.addEventListener('keyup', function (key) { Pong.player.move = DIRECTION.IDLE; });\n            },\n\n            // Reset the ball location, the player turns and set a delay before the next round begins.\n            _resetTurn: function (victor, loser) {\n                this.ball = Ball.new.call(this, this.ball.speed);\n                this.turn = loser;\n                this.timer = (new Date()).getTime();\n\n                victor.score++;\n                // beep2.play();\n            },\n\n            // Wait for a delay to have passed after each turn.\n            _turnDelayIsOver: function () {\n                return ((new Date()).getTime() - this.timer >= 1000);\n            },\n\n            // Select a random color as the background of each level/round.\n            _generateRoundColor: function () {\n                var newColor = colors[Math.floor(Math.random() * colors.length)];\n                if (newColor === this.color) return Pong._generateRoundColor();\n                return newColor;\n            }\n        };\n\n        var Pong = Object.assign({}, Game);\n        Pong.initialize();\n    }, []);\n\n    return (\n        <div ref={container} className='pong-container'>\n            {/* <Label>Get some coffee or play pong while you wait for the analysis to finish..</Label> */}\n            <canvas></canvas>\n            <p className=\"credit\">Game Credits <a href=\"https://codepen.io/gdube/pen/JybxxZ\" target=\"_blank\">Pong Game</a></p>\n        </div>\n    );\n};\n\nexport default Pong;","import './Spinner2.css';\n\nconst Spinner2 = () => {\n    return (\n        <div className='dots-bars-5'></div>\n    )    \n}\n\nexport default Spinner2;","import './App.css';\nimport Header from \"./components/Header\";\nimport Gallery from './components/Gallery';\n\nimport { Button, Label, Overlay, Spinner } from \"@blueprintjs/core\";\n\nimport { useState, useEffect, useContext } from 'react';\nimport { AppContext } from './context/AppContext';\n\nimport DimPlot from './components/Plots/ScatterPlot.js';\nimport MarkerPlot from './components/Markers';\nimport Pong from './components/Spinners/Pong';\nimport Spinner2 from './components/Spinners/Spinner2';\n\n// App is the single point of contact with the web workers\n// All requests and responses are received here\n\nfunction App() {\n\n  // show loading screen ?\n  const [loading, setLoading] = useState(true);\n  // props for dialogs\n  const loadingProps = {\n    autoFocus: true,\n    canEscapeKeyClose: false,\n    canOutsideClickClose: false,\n    enforceFocus: true,\n    hasBackdrop: true,\n    usePortal: true,\n    useTallContent: false,\n  };\n\n  const { setWasmInitialized, setTsneData, setRedDims, redDims,\n    setGenesInfo, setInitDims, setQcDims, defaultRedDims, setDefaultRedDims,\n    setQcData, qcData, setClusterData, setFSelectionData,\n    setUmapData, setPcaVarExp, logs, setLogs,\n    selectedCluster, clusterRank,\n    selectedClusterSummary, setSelectedClusterSummary,\n    reqGene, customSelection, clusterData,\n    delCustomSelection, setDelCustomSelection,\n    setSelectedCluster, setShowGame, showGame, datasetName, setExportState } = useContext(AppContext);\n\n  // initializes various things on the worker side\n  useEffect(() => {\n    window.Worker.postMessage({\n      \"type\": \"INIT\",\n      \"msg\": \"Initial Load\"\n    });\n  }, [])\n\n  // request worker for new markers \n  // if either the cluster or the ranking changes\n  useEffect(() => {\n\n    if (selectedCluster !== null) {\n      let type = String(selectedCluster).startsWith(\"cs\") ?\n        \"getMarkersForSelection\" : \"getMarkersForCluster\";\n      window.Worker.postMessage({\n        \"type\": type,\n        \"payload\": {\n          \"cluster\": selectedCluster,\n          \"rank_type\": clusterRank,\n        }\n      });\n    }\n  }, [selectedCluster, clusterRank]);\n\n  // compute markers in the worker \n  // when a new custom selection of cells is made through the UI\n  useEffect(() => {\n\n    if (customSelection !== null && Object.keys(customSelection).length > 0) {\n      let csLen = `cs${Object.keys(customSelection).length}`;\n      var cs = customSelection[csLen];\n      window.Worker.postMessage({\n        \"type\": \"computeCustomMarkers\",\n        \"payload\": {\n          \"selection\": cs,\n          \"id\": csLen\n        }\n      });\n    }\n  }, [customSelection]);\n\n  // Remove a custom selection from cache\n  useEffect(() => {\n    if (delCustomSelection !== null) {\n      window.Worker.postMessage({\n        \"type\": \"removeCustomMarkers\",\n        \"payload\": {\n          \"id\": delCustomSelection\n        }\n      });\n\n      setDelCustomSelection(null);\n    }\n  }, [delCustomSelection])\n\n  // get expression for a gene from worker\n  useEffect(() => {\n\n    reqGene !== null && window.Worker.postMessage({\n      \"type\": \"getGeneExpression\",\n      \"payload\": {\n        \"gene\": reqGene\n      }\n    });\n  }, [reqGene])\n\n  // callback for all responses from workers\n  // all interactions are logged and shown on the UI\n  window.Worker.onmessage = (msg) => {\n    const payload = msg.data;\n\n    if (payload?.msg) {\n      let tmp = [...logs];\n      let d = new Date();\n      tmp.push(`${d.getHours() + \":\" + d.getMinutes() + \":\" + d.getSeconds()} - ${payload?.type} - ${payload?.msg}`);\n\n      setLogs(tmp);\n    }\n\n    if (payload.type === \"INIT\") {\n      setLoading(false);\n      setWasmInitialized(true);\n    } else if (payload.type === \"inputs_DATA\") {\n      setInitDims(`${payload.resp.dimensions.num_genes} genes, ${payload.resp.dimensions.num_cells} cells`);\n      setGenesInfo(payload.resp.gene_names); \n    } else if (payload.type === \"quality_control_metrics_DATA\") {\n      const { resp } = payload;\n      setQcData(resp);\n    } else if (payload.type === \"quality_control_thresholds_DATA\") {\n      const { resp } = payload;\n      let tmp = { ...qcData };\n      tmp[\"thresholds\"] = resp;\n      setQcData(tmp);\n    } else if (payload.type === \"quality_control_filtered_DATA\") {\n      setQcDims(`${payload.resp.retained} cells`);\n    } else if (payload.type === \"feature_selection_DATA\") {\n      const { resp } = payload;\n      setFSelectionData(resp);\n    } else if (payload.type === \"pca_DATA\") {\n      const { resp } = payload;\n      setPcaVarExp(resp);\n    } else if (payload.type === \"snn_cluster_graph_DATA\") {\n      const { resp } = payload;\n      setClusterData(resp);\n\n      // show markers for the first cluster\n      setSelectedCluster(0);\n    } else if (payload.type === \"tsne_DATA\" || payload.type === \"tsne_iter\") {\n      const { resp } = payload;\n      setTsneData(resp);\n\n      let tmp = [...redDims];\n      tmp.push(\"TSNE\");\n      // once t-SNE is available, set this as the default display\n      if (!defaultRedDims) {\n        setDefaultRedDims(\"TSNE\");\n      }\n\n      setRedDims(tmp);\n      // also don't show the pong game anymore\n      setShowGame(false);\n    } else if (payload.type === \"umap_DATA\") {\n      const { resp } = payload;\n      setUmapData(resp);\n\n      // enable UMAP selection\n      let tmp = [...redDims];\n      tmp.push(\"UMAP\");\n      setRedDims(tmp);\n    } else if (payload.type === \"markerGene_DATA\") {\n    } else if (payload.type === \"setMarkersForCluster\"\n      || payload.type === \"setMarkersForCustomSelection\") {\n      const { resp } = payload;\n      let records = [];\n      resp.means.forEach((x, i) => {\n        records.push({\n          \"index\": i,\n          \"row\": resp?.ordering?.[i],\n          \"mean\": x,\n          \"delta\": resp?.delta_detected?.[i],\n          \"lfc\": resp?.lfc?.[i],\n          \"detected\": resp?.detected?.[i],\n          \"expanded\": false,\n          \"expr\": null,\n        });\n      });\n      setSelectedClusterSummary(records);\n    } else if (payload.type === \"setGeneExpression\") {\n      const { resp } = payload;\n      let tmp = [...selectedClusterSummary];\n      for (var i = 0; i < tmp.length; i++) {\n        if (resp.gene === tmp[i].row) {\n          tmp[i].expr = Object.values(resp.expr);\n          break;\n        }\n      }\n      setSelectedClusterSummary(tmp);\n    } else if (payload.type === \"exportState\") {\n      const { resp } = payload;\n\n      let tmpLink = document.createElement(\"a\");\n      var fileNew = new Blob([resp], {\n        type: \"text/plain\"\n      });\n      tmpLink.href = URL.createObjectURL(fileNew);\n      tmpLink.download = datasetName.split(' ').join('_') + \".kana.gz\";\n      tmpLink.click();\n\n      setExportState(false);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"App-content\">\n        <div className=\"plot\">\n          {\n            defaultRedDims ?\n              <DimPlot /> :\n              showGame ?\n                <div style={{\n                  height: '100%',\n                  width: '100%',\n                  display: 'flex',\n                  flexDirection: 'column',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  paddingTop: '50px'\n                }}>\n                  <Label>Get some coffee or play pong while you wait for the analysis to finish..</Label>\n                  <Button onClick={() => { setShowGame(false) }}>I'm good, go back</Button>\n                  <Pong />\n                </div>\n                :\n                <div style={{\n                  height: '100%',\n                  width: '100%',\n                  display: 'flex',\n                  flexDirection: 'column',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  paddingTop: '50px'\n                }}>\n                  <Spinner2 />\n                  <Label>Get some coffee or play pong while you wait for the analysis to finish..</Label>\n                  <Button onClick={() => { setShowGame(true) }}>Play Pong</Button>\n                </div>\n          }\n        </div>\n        <div className=\"marker\">\n          {clusterData ?\n            <MarkerPlot /> :\n            <div style={{\n              height: '100%',\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center'\n            }}>\n              <Spinner2 />\n              <Label>Generating nearest neighbor graph to compute clusters....</Label>\n            </div>}\n        </div>\n        <div className=\"analysis\">\n          <Gallery />\n        </div>\n      </div>\n      <Overlay\n        isOpen={loading}\n        {...loadingProps}\n      >\n        <div className=\"spinner\">\n          <Spinner size={100} />\n          <p>Initializing kana</p>\n        </div>\n      </Overlay>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport AppContext from \"./context/AppContext\";\n\nReactDOM.render(\n  // <React.StrictMode>\n    <AppContext>\n      <App />\n    </AppContext>,\n  //  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n// serviceWorkerRegistration.unregister();\n// serviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}