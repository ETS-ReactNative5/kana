{"version":3,"file":"static/js/729.b4408b3b.chunk.js","mappings":"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","sources":["workers/_utils.js","workers/_inputs.js","workers/mito.js","workers/_qc_metrics.js","workers/_qc_thresholds.js","workers/_qc_filter.js","workers/_normalization.js","workers/_model_gene_var.js","workers/_pca.js","workers/_neighbor_index.js","workers/_snn_neighbors.js","workers/_snn_graph.js","workers/_snn_cluster.js","workers/_kmeans_cluster.js","workers/_choose_clustering.js","workers/_utils_viz_parent.js","workers/_tsne_monitor.js","workers/_umap_monitor.js","workers/_utils_markers.js","workers/_score_markers.js","workers/_custom_markers.js","workers/KanaDBHandler.js","workers/scran.worker.js","workers/_utils_serialize.js","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["import * as scran from \"scran.js\";\n\nexport function freeCache(object) {\n    if (object !== undefined && object !== null) {\n        try { // placeholder try() for now, because older scran.js don't work with double-free.\n            object.free();\n        } catch (e) {\n        }\n    }\n    return;\n}\n\nexport function freeReloaded(cache) {\n    if (\"reloaded\" in cache) {\n        for (const [k, v] of Object.entries(cache.reloaded)) {\n            if (v instanceof scran.WasmArray) {\n                v.free();\n            }\n        }\n        delete cache.reloaded;\n    }\n}\n\nexport function changedParameters(x, y) {\n    return JSON.stringify(x) != JSON.stringify(y);\n}\n\nexport function computeRange(arr) {\n    var max = -Infinity, min = Infinity;\n    arr.forEach(function (x) {\n        if (max < x) {\n            max = x;\n        }\n        if (min > x) {\n            min = x;\n        }\n    });\n    return [min, max];\n}\n\nexport function allocateCachedArray(size, type, cache, name = \"buffer\") {\n    var reallocate = true;\n    if (name in cache) {\n        var candidate = cache[name];\n        if (candidate.size != size || candidate.constructor.className != type) {\n            candidate.free();\n        } else {\n            reallocate = false;\n        }\n    }\n  \n    if (reallocate) {\n        switch (type) {\n            case \"Uint8Array\":\n                cache[name] = new scran.Uint8WasmArray(size);\n                break;\n            case \"Int32Array\":\n                cache[name] = new scran.Int32WasmArray(size);\n                break;\n            case \"Float64Array\":\n                cache[name] = new scran.Float64WasmArray(size);\n                break;\n            default:\n                // We only ever use one of the three above types in our \n                // internal data stores, so no need to go all-out here.\n                throw \"allocating '\" + type + \"' not yet supported\";\n        }\n    }\n\n    return cache[name];\n}\n\nexport function extractBuffers(object, store) {\n    if (Array.isArray(object)) {\n        for (const element of object) {\n            extractBuffers(element, store);\n        }\n    } else if (object.constructor == Object) {\n        for (const [key, element] of Object.entries(object)) {\n            extractBuffers(element, store);\n        }\n    } else if (ArrayBuffer.isView(object)) {\n        if (! (object.buffer instanceof ArrayBuffer)) {\n            throw \"only ArrayBuffers should be in the message payload\";\n        }\n        store.push(object.buffer);\n    }\n}\n\nexport function isObject(object) {\n    return typeof object === 'object' && Array.isArray(object) === false;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./_utils.js\";\nimport * as d3 from \"d3-dsv\";\nimport * as pako from \"pako\";\n\nvar cache = {};\nvar parameters = {};\nvar abbreviated = {};\n\nexport var changed = false;\n\nfunction permuteGenes(genes) {\n    var buf = new scran.Int32WasmArray(cache.matrix.numberOfRows());\n    try {\n        cache.matrix.permutation({ buffer: buf });\n\n        let perm = buf.array();\n        for (const [key, val] of Object.entries(genes)) {\n            let copy = val.slice();\n\n            for (var i = 0; i < perm.length; i++) {\n                copy[perm[i]] = val[i];\n            }\n            genes[key] = copy;\n        }\n    } finally {\n        buf.free();\n    }\n}\n\nfunction dummyGenes(numberOfRowss) {\n    let genes = []\n    for (let i = 0; i < numberOfRowss; i++) {\n        genes.push(`Gene ${i + 1}`);\n    }\n    return { \"id\": genes };\n}\n\nfunction readDSVFromBuffer(content, fname, delim = \"\\t\") {\n    var ext = fname.name.split('.').pop();\n\n    if (ext == \"gz\") {\n        content = pako.ungzip(content);\n    }\n\n    const dec = new TextDecoder();\n    let decoded = dec.decode(content);\n    const tsv = d3.dsvFormat(delim);\n    let parsed = tsv.parseRows(decoded);\n\n    return parsed;\n}\n\n/** Matrix Market **/\nfunction loadMatrixMarketRaw(files) {\n    utils.freeCache(cache.matrix);\n\n    // In theory, this section may support multiple files (e.g., for multiple samples).\n    var mtx_files = files.filter(x => x.type == \"mtx\");\n    var first_mtx = mtx_files[0];\n    var contents = new Uint8Array(first_mtx.buffer);\n    var ext = first_mtx.name.split('.').pop();\n    var is_compressed = (ext == \"gz\");\n    cache.matrix = scran.initializeSparseMatrixFromMatrixMarketBuffer(contents, { \"compressed\": is_compressed });\n\n    var genes_file = files.filter(x => x.type == \"genes\");\n    if (genes_file.length == 1) {\n        var genes_file = genes_file[0]\n        var content = new Uint8Array(genes_file.buffer);\n\n        let parsed = readDSVFromBuffer(content, genes_file);\n\n        if (parsed.length != cache.matrix.numberOfRows()) {\n            throw \"number of matrix rows is not equal to the number of genes in '\" + genes_file.name + \"'\";\n        }\n\n        var ids = [], symb = [];\n        parsed.forEach(x => {\n            ids.push(x[0]);\n            symb.push(x[1]);\n        });\n\n        cache.genes = { \"id\": ids, \"symbol\": symb };\n    } else {\n        cache.genes = dummyGenes(cache.matrix.numberOfRows());\n    }\n\n    permuteGenes(cache.genes);\n\n    var annotations_file = files.filter(x => x.type == \"annotations\");\n    if (annotations_file.length == 1) {\n        var annotations_file = annotations_file[0]\n        var content = new Uint8Array(annotations_file.buffer);\n\n        let parsed = readDSVFromBuffer(content, annotations_file);\n\n        let diff = cache.matrix.numberOfColumns() - parsed.length;\n        // check if a header is present or not\n        let headerFlag = false;\n        if (diff === 0) {\n            headerFlag = false;\n        } else if (diff === -1) {\n            headerFlag = true;\n        } else {\n            throw \"number of annotations rows is not equal to the number of cells in '\" + annotations_file.name + \"'\";\n        }\n\n        let headers = [];\n        if (headerFlag) {\n            headers = parsed.shift();\n        } else {\n            parsed[0].forEach((x, i) => {\n                headers.push(`Column_${i + 1}`);\n            })\n        }\n\n        cache.annotations = {}\n        headers.forEach((x, i) => {\n            cache.annotations[x] = parsed.map(y => y[i]);\n        });\n\n    } else {\n        cache.annotations = null;\n    }\n\n    return;\n}\n\nfunction loadMatrixMarket(args) {\n    var reader = new FileReaderSync();\n\n    // First pass computes an abbreviated version to quickly check for changes.\n    // Second pass does the actual readArrayBuffer.\n    for (var it = 0; it < 2; it++) {\n        var formatted = { \"type\": \"MatrixMarket\", \"files\": [] };\n\n        var bufferFun;\n        if (it == 0) {\n            bufferFun = (f) => f.size;\n        } else {\n            bufferFun = (f) => reader.readAsArrayBuffer(f);\n        }\n\n        for (const f of args.mtx) {\n            formatted.files.push({ \"type\": \"mtx\", \"name\": f.name, \"buffer\": bufferFun(f) });\n        }\n\n        if (args.gene !== null) {\n            if (args.gene.length !== 1) {\n                throw \"expected no more than one gene file\";\n            }\n            var genes_file = args.gene[0];\n            formatted.files.push({ \"type\": \"genes\", \"name\": genes_file.name, \"buffer\": bufferFun(genes_file) });\n        }\n\n        if (args.barcode !== null) {\n            if (args.barcode.length !== 1) {\n                throw \"expected no more than one cell annotation file\";\n            }\n            var annotations_file = args.barcode[0];\n            formatted.files.push({ \"type\": \"annotations\", \"name\": annotations_file.name, \"buffer\": bufferFun(annotations_file) });\n        }\n\n        if (it == 0) {\n            if (!utils.changedParameters(abbreviated, formatted)) {\n                changed = false;\n                return;\n            } else {\n                abbreviated = formatted;\n                changed = true;\n            }\n        } else {\n            parameters = formatted;\n            loadMatrixMarketRaw(formatted.files);\n            delete cache.reloaded;\n        }\n    }\n\n    return;\n}\n\n/** HDF5 **/\n\nfunction load10XRaw(files) {\n    utils.freeCache(cache.matrix);\n\n    // In theory, we could support multiple HDF5 buffers.\n    var first_file = files[0];\n    var tmppath = first_file.name;\n    scran.writeFile(tmppath, new Uint8Array(first_file.buffer));\n\n    try {\n        cache.matrix = scran.initializeSparseMatrixFromHDF5(tmppath, \"matrix\");\n\n        // Fetching the gene IDs and names.\n        cache.genes = null;\n        let objects = scran.extractHDF5ObjectNames(tmppath);\n        if (\"features\" in objects[\"matrix\"]) {\n            let fobjects = objects[\"matrix\"][\"features\"];\n            if (\"id\" in fobjects && fobjects[\"id\"] === \"string dataset\") {\n                cache.genes = { id: scran.loadHDF5Dataset(tmppath, \"matrix/features/id\").contents };\n                if (\"name\" in fobjects && fobjects[\"name\"] === \"string dataset\") {\n                    cache.genes.names = scran.loadHDF5Dataset(tmppath, \"matrix/features/name\").contents;\n                }\n            }\n        }\n\n        // TODO: pull out sample IDs from the HDF5 file, if they exist.\n        cache.annotations = null;\n\n    } finally {\n        scran.removeFile(tmppath);\n    }\n\n    if (cache.genes === null) {\n        cache.genes = dummyGenes(cache.matrix.numberOfRows());\n    }\n    permuteGenes(cache.genes);\n    return;\n}\n\nfunction loadH5ADRaw(files, name) {\n    utils.freeCache(cache.matrix);\n\n    // In theory, we could support multiple HDF5 buffers.\n    var first_file = files[0];\n    var tmppath = first_file.name;\n    scran.writeFile(tmppath, new Uint8Array(first_file.buffer));\n\n    try {\n        cache.matrix = scran.initializeSparseMatrixFromHDF5(tmppath, \"X\");\n        let objects = scran.extractHDF5ObjectNames(tmppath);\n\n        // Trying to guess the gene names.\n        cache.genes = null;\n        if (\"var\" in objects) {\n            let vobjects = objects[\"var\"];\n            if (utils.isObject(vobjects)) {\n                if (\"_index\" in vobjects && vobjects[\"_index\"] == \"string dataset\") {\n                    cache.genes = { \"_index\": scran.loadHDF5Dataset(tmppath, \"var/_index\").contents };\n                    for (const [key, val] of Object.entries(vobjects)) {\n                        if (val === \"string dataset\" && (key.match(/name/i) || key.match(/symb/i))) {\n                            cache.genes[key] = scran.loadHDF5Dataset(tmppath, `var/${key}`).contents;\n                        }\n                    }\n                }\n            }\n        }\n\n        // Adding the annotations.\n        cache.annotations = null;\n        if (\"obs\" in objects) {\n            let bobjects = objects[\"obs\"];\n            cache.annotations = {};\n\n            if (utils.isObject(bobjects)) {\n                // Maybe it has names, maybe not, who knows; let's just add what's there.\n                if (\"_index\" in bobjects && bobjects[\"_index\"] == \"string dataset\") {\n                    cache.annotations[\"_index\"] = scran.loadHDF5Dataset(tmppath, \"obs/_index\").contents;\n                }\n\n                for (const [key, val] of Object.entries(bobjects)) {\n                    if (val === \"string dataset\" || val === \"integer dataset\" || val === \"float dataset\") {\n                        let bobj_factors = scran.loadHDF5Dataset(tmppath, `obs/${key}`).contents;\n\n                        if (\"__categories\" in bobjects && bobjects[\"__categories\"][key] == \"string dataset\") {\n                            let bobj_index = scran.loadHDF5Dataset(tmppath, `obs/__categories/${key}`).contents;\n                            cache.annotations[key] = {\n                                \"type\": \"factor\",\n                                \"index\": bobj_index,\n                                \"factor\": bobj_factors\n                            }\n                        } else {\n                            cache.annotations[key] = bobj_factors;\n                        }\n                    }\n                }\n            }\n        }\n\n    } finally {\n        scran.removeFile(tmppath);\n    }\n\n    if (cache.genes === null) {\n        cache.genes = dummyGenes(cache.matrix.numberOfRows());\n    }\n    permuteGenes(cache.genes);\n    return;\n}\n\nfunction loadHDF5(args, format) {\n    var reader = new FileReaderSync();\n\n    // First pass computes an abbreviated version to quickly check for changes.\n    // Second pass does the actual readArrayBuffer.\n    for (var it = 0; it < 2; it++) {\n        var formatted = { \"type\": format, \"files\": [] };\n\n        var bufferFun;\n        if (it == 0) {\n            bufferFun = (f) => f.size;\n        } else {\n            bufferFun = (f) => reader.readAsArrayBuffer(f);\n        }\n\n        for (const f of args.file) {\n            formatted.files.push({ \"type\": \"h5\", \"name\": f.name, \"buffer\": bufferFun(f) });\n        }\n\n        if (it == 0) {\n            if (!utils.changedParameters(abbreviated, formatted)) {\n                changed = false;\n                return;\n            } else {\n                abbreviated = formatted;\n                changed = true;\n            }\n        } else {\n            parameters = formatted;\n            if (format == \"10X\") {\n                load10XRaw(formatted.files);\n            } else {\n                loadH5ADRaw(formatted.files);\n            }\n            delete cache.reloaded;\n        }\n    }\n\n    return;\n}\n\n/** Public functions (standard) **/\nexport function compute(args) {\n    switch (args.format) {\n        case \"mtx\":\n            loadMatrixMarket(args.files);\n            break;\n        case \"hdf5\":\n        case \"tenx\":\n            loadHDF5(args.files, \"10X\");\n            break;\n        case \"h5ad\":\n            loadHDF5(args.files, \"H5AD\");\n            break;\n        case \"kana\":\n            // do nothing, this is handled by unserialize.\n            break;\n        default:\n            throw \"unknown matrix file extension: '\" + args.format + \"'\";\n    }\n    return;\n}\n\nexport function results() {\n    var output = { \"dimensions\": fetchDimensions() }\n    if (\"reloaded\" in cache) {\n        output.genes = { ...cache.reloaded.genes };\n\n        if (cache.annotations) {\n            output.annotations = Object.keys(cache.reloaded.annotations);\n        }\n    } else {\n        output.genes = { ...cache.genes };\n        if (cache.annotations) {\n            output.annotations = Object.keys(cache.annotations);\n        }\n    }\n    return output;\n}\n\nexport function serialize() {\n    var contents = {};\n    if (\"reloaded\" in cache) {\n        contents.genes = { ...cache.reloaded.genes };\n        contents.num_cells = cache.reloaded.num_cells;\n        if (cache.reloaded.annotations) {\n            contents.annotations = cache.reloaded.annotations;\n        }\n    } else {\n        contents.genes = { ...cache.genes };\n        contents.num_cells = cache.matrix.numberOfColumns();\n        if (cache.annotations) {\n            contents.annotations = cache.annotations;\n        }\n    }\n\n    // Making a deep-ish clone of the parameters so that any fiddling with\n    // buffers during serialization does not compromise internal state.\n    var parameters2 = { ...parameters };\n    parameters2.files = parameters.files.map(x => { return { ...x }; });\n\n    return {\n        \"parameters\": parameters2,\n        \"contents\": contents\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\n/** Public functions (custom) **/\nexport function fetchCountMatrix() {\n    if (\"reloaded\" in cache) {\n        if (parameters.type == \"MatrixMarket\") {\n            loadMatrixMarketRaw(parameters.files);\n\n        } else if (parameters.type == \"H5AD\") {\n            loadH5ADRaw(parameters.files);\n\n        } else if (parameters.type == \"10X\") {\n            load10XRaw(parameters.files);\n\n        } else if (parameters.type == \"HDF5\") {\n            // legacy support: trying to guess what it is based on its extension.\n            if (parameters.files[0].name.match(/h5ad$/i)) {\n                loadH5ADRaw(parameters.files);\n            } else {\n                load10XRaw(parameters.files);\n            }\n\n        } else {\n            throw `unrecognized count matrix format, ${parameters.type}`;\n        }\n    }\n    return cache.matrix;\n}\n\nexport function fetchDimensions() {\n    if (\"reloaded\" in cache) {\n        return {\n            // This should contain at least one element,\n            // and all of them should have the same length,\n            // so indexing by the first element is safe.\n            \"num_genes\": Object.values(cache.reloaded.genes)[0].length,\n            \"num_cells\": cache.reloaded.num_cells\n        };\n    } else {\n        return {\n            \"num_genes\": cache.matrix.numberOfRows(),\n            \"num_cells\": cache.matrix.numberOfColumns()\n        };\n    }\n}\n\nexport function fetchGenes() {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.genes;\n    } else {\n        return cache.genes;\n    }\n}\n\nexport function fetchAnnotations(col) {\n    let annots, asize;\n    if (\"reloaded\" in cache) {\n        annots = cache.reloaded.annotations;\n        asize = cache.reloaded.matrix.numberOfColumns();\n    } else {\n        annots = cache.annotations;\n        asize = cache.matrix.numberOfColumns();\n    }\n\n    if (!(col in annots)) {\n        throw `column ${col} does not exist in col.tsv`;\n    }\n\n    if (utils.isObject(annots[col]) && \"type\" in annots[col]) {\n        return annots[col];\n    }\n\n    let uvals = {};\n    let uTypedAray = new Uint8Array(asize);\n    annots[col].map((x, i) => {\n        if (!(x in uvals)) {\n            uvals[x] = Object.keys(uvals).length;\n        }\n\n        uTypedAray[i] = uvals[x];\n    });\n\n    return {\n        \"index\": Object.keys(uvals),\n        \"factor\": uTypedAray\n    }\n}\n","/* Derived from scran.js's blacklists.js.R. */\n\nexport var mito = {};\nmito.ensembl = new Set([\"ENSMUSG00000064336\",\"ENSMUSG00000064337\",\"ENSMUSG00000064338\",\"ENSMUSG00000064339\",\"ENSMUSG00000064340\",\"ENSMUSG00000064341\",\"ENSMUSG00000064342\",\"ENSMUSG00000064343\",\"ENSMUSG00000064344\",\"ENSMUSG00000064345\",\"ENSMUSG00000064346\",\"ENSMUSG00000064347\",\"ENSMUSG00000064348\",\"ENSMUSG00000064349\",\"ENSMUSG00000064350\",\"ENSMUSG00000064351\",\"ENSMUSG00000064352\",\"ENSMUSG00000064353\",\"ENSMUSG00000064354\",\"ENSMUSG00000064355\",\"ENSMUSG00000064356\",\"ENSMUSG00000064357\",\"ENSMUSG00000064358\",\"ENSMUSG00000064359\",\"ENSMUSG00000064360\",\"ENSMUSG00000064361\",\"ENSMUSG00000064363\",\"ENSMUSG00000064364\",\"ENSMUSG00000064365\",\"ENSMUSG00000064366\",\"ENSMUSG00000064367\",\"ENSMUSG00000064368\",\"ENSMUSG00000064369\",\"ENSMUSG00000064370\",\"ENSMUSG00000064371\",\"ENSMUSG00000064372\",\"ENSMUSG00000065947\",\"ENSG00000198695\",\"ENSG00000198712\",\"ENSG00000198727\",\"ENSG00000198763\",\"ENSG00000198786\",\"ENSG00000198804\",\"ENSG00000198840\",\"ENSG00000198886\",\"ENSG00000198888\",\"ENSG00000198899\",\"ENSG00000198938\",\"ENSG00000209082\",\"ENSG00000210049\",\"ENSG00000210077\",\"ENSG00000210082\",\"ENSG00000210100\",\"ENSG00000210107\",\"ENSG00000210112\",\"ENSG00000210117\",\"ENSG00000210127\",\"ENSG00000210135\",\"ENSG00000210140\",\"ENSG00000210144\",\"ENSG00000210151\",\"ENSG00000210154\",\"ENSG00000210156\",\"ENSG00000210164\",\"ENSG00000210174\",\"ENSG00000210176\",\"ENSG00000210184\",\"ENSG00000210191\",\"ENSG00000210194\",\"ENSG00000210195\",\"ENSG00000210196\",\"ENSG00000211459\",\"ENSG00000212907\",\"ENSG00000228253\"]);\nmito.symbol = new Set([\"mt-Tf\",\"mt-Rnr1\",\"mt-Tv\",\"mt-Rnr2\",\"mt-Tl1\",\"mt-Nd1\",\"mt-Ti\",\"mt-Tq\",\"mt-Tm\",\"mt-Nd2\",\"mt-Tw\",\"mt-Ta\",\"mt-Tn\",\"mt-Tc\",\"mt-Ty\",\"mt-Co1\",\"mt-Ts1\",\"mt-Td\",\"mt-Co2\",\"mt-Tk\",\"mt-Atp8\",\"mt-Atp6\",\"mt-Co3\",\"mt-Tg\",\"mt-Nd3\",\"mt-Tr\",\"mt-Nd4\",\"mt-Th\",\"mt-Ts2\",\"mt-Tl2\",\"mt-Nd5\",\"mt-Nd6\",\"mt-Te\",\"mt-Cytb\",\"mt-Tt\",\"mt-Tp\",\"mt-Nd4l\",\"MT-ND6\",\"MT-CO2\",\"MT-CYB\",\"MT-ND2\",\"MT-ND5\",\"MT-CO1\",\"MT-ND3\",\"MT-ND4\",\"MT-ND1\",\"MT-ATP6\",\"MT-CO3\",\"MT-TL1\",\"MT-TF\",\"MT-TV\",\"MT-RNR2\",\"MT-TI\",\"MT-TQ\",\"MT-TM\",\"MT-TW\",\"MT-TA\",\"MT-TN\",\"MT-TC\",\"MT-TY\",\"MT-TS1\",\"MT-TD\",\"MT-TK\",\"MT-TG\",\"MT-TR\",\"MT-TH\",\"MT-TS2\",\"MT-TL2\",\"MT-TE\",\"MT-TT\",\"MT-TP\",\"MT-RNR1\",\"MT-ND4L\",\"MT-ATP8\"]);\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as inputs from \"./_inputs.js\";\nimport { mito } from \"./mito.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nfunction rawCompute(args) {\n    utils.freeCache(cache.raw);\n    var mat = inputs.fetchCountMatrix();\n\n    // TODO: add more choices.\n    var nsubsets = 1;\n    var subsets = utils.allocateCachedArray(mat.numberOfRows() * nsubsets, \"Uint8Array\", cache);\n    subsets.fill(0);\n\n    var gene_info = inputs.fetchGenes();\n    var sub_arr = subsets.array();\n    for (const [key, val] of Object.entries(gene_info)) {\n        if (args.use_mito_default) {\n            val.forEach((x, i) => {\n                if (mito.symbol.has(x) || mito.ensembl.has(x)) {\n                    sub_arr[i] = 1;\n                }\n            });\n        } else {\n            var lower_mito = args.mito_prefix.toLowerCase();\n            val.forEach((x, i) => {\n                if(x.toLowerCase().startsWith(lower_mito)) {\n                    sub_arr[i] = 1;\n                }\n            });\n        }\n    }\n\n    var mat = inputs.fetchCountMatrix();\n\n    cache.raw = scran.computePerCellQCMetrics(mat, subsets);\n    delete cache.reloaded;\n    return;\n}\n\nfunction fetchResults() {\n    var data = {};\n    if (\"reloaded\" in cache) {\n        var qc_output = cache.reloaded;\n        data.sums = qc_output.sums.slice();\n        data.detected = qc_output.detected.slice();\n        data.proportion = qc_output.proportion.slice();\n    } else {\n        var qc_output = cache.raw;\n        data.sums = qc_output.sums();\n        data.detected = qc_output.detected();\n        data.proportion = qc_output.subsetProportions(0);\n    }\n    return data;\n}\n\nexport function compute(args) {\n    if (!inputs.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        rawCompute(args);\n        parameters = args;\n        changed = true;\n    }\n    return;\n}\n\nexport function results() {\n    var data = fetchResults();\n\n    var ranges = {};\n    ranges.sums = utils.computeRange(data.sums);\n    ranges.detected = utils.computeRange(data.detected);\n    ranges.proportion = utils.computeRange(data.proportion);\n\n    return { \n        \"data\": data, \n        \"ranges\": ranges \n    };\n}\n\nexport function serialize() {\n    return {\n      \"parameters\": parameters,\n      \"contents\": fetchResults()\n    };\n}\n\nexport function unserialize(saved) {\n    /* TODO: reconstutite a fully-formed QCMetrics object so that\n     * fetchQCMetrics() doesn't have to recompute it.\n     */\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\nexport function fetchQCMetrics() {\n    if (\"reloaded\" in cache) {\n        rawCompute();\n    }\n    return cache.raw;\n}\n\nexport function fetchSums({ unsafe = true } = {}) {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.sums;\n    } else {\n        // Unsafe, because we're returning a raw view into the Wasm heap,\n        // which might be invalidated upon further allocations.\n        return cache.raw.sums({ copy: !unsafe });\n    }\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as metrics from \"./_qc_metrics.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nexport function compute(args) {\n    if (!metrics.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        utils.freeCache(cache.raw);\n        var stats = metrics.fetchQCMetrics();\n\n        cache.raw = scran.computePerCellQCFilters(stats, { numberOfMADs: args.nmads });\n\n        utils.freeReloaded(cache);\n        changed = true;\n        parameters = args;\n    }\n    return;\n}\n\nexport function results() {\n    let data;\n    if (\"reloaded\" in cache) {\n        data = {\n            \"sums\": cache.reloaded.sums,\n            \"detected\": cache.reloaded.detected,\n            \"proportion\": cache.reloaded.proportion\n        };\n    } else {\n        var obj = cache.raw;\n        data = {\n            \"sums\": obj.thresholdsSums()[0],\n            \"detected\": obj.thresholdsDetected()[0],\n            \"proportion\": obj.thresholdsSubsetProportions(0)[0] // TODO: generalize...\n        };\n    }\n    return data;\n}\n\nexport function serialize() {\n    var contents = results();\n    contents.discards = fetchDiscards();\n    return {\n        \"parameters\": parameters,\n        \"contents\": contents\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n\n    utils.freeReloaded(cache);\n    cache.reloaded = saved.contents;\n\n    var tmp = new scran.Uint8WasmArray(cache.reloaded.discards.length);\n    tmp.set(cache.reloaded.discards);\n    cache.reloaded.discards = tmp;\n    \n    return;\n}\n\nexport function fetchDiscardsAsWasmArray() {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.discards;        \n    } else {\n        var tmp = cache.raw.discardOverall({ copy: false });\n        return new scran.Uint8WasmArray(tmp.length, tmp.byteOffset);\n    }\n}\n\nexport function fetchDiscards({ unsafe = false } = {}) {\n    var out;\n    if (\"reloaded\" in cache) {\n        out = cache.reloaded.discards.array();\n    } else {\n        out = cache.raw.discardOverall();\n    }\n\n    if (unsafe) {\n        // Unsafe, because we're returning a raw view into the Wasm heap,\n        // which might be invalidated upon further allocations.\n        return out;\n    } else {\n        return out.slice();\n    }\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as inputs from \"./_inputs.js\";\nimport * as thresholds from \"./_qc_thresholds.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nfunction rawCompute() {\n    utils.freeCache(cache.matrix);\n    var mat = inputs.fetchCountMatrix();\n\n    var disc = thresholds.fetchDiscardsAsWasmArray();\n    cache.matrix = scran.filterCells(mat, disc);\n\n    delete cache.reloaded;\n    return;\n}\n\nexport function compute(args) {\n    if (!inputs.changed && !thresholds.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        rawCompute();\n        parameters = args;\n        changed = true;\n    }\n    return;\n}\n   \nexport function results() {\n    return {\n      \"retained\": fetchRetained()\n    };\n}\n\nexport function serialize() {\n    return {\n        \"parameters\": parameters,\n        \"contents\": results()\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n\n    // Precomputing this for easier retrieval later.\n    var discards = thresholds.fetchDiscards({ unsafe: true });\n    var retained = 0;\n    for (const i of discards) {\n        if (i == 0) {\n            retained++;\n        }\n    }\n    cache.reloaded.retained = retained;\n    return;\n}\n\nexport function fetchFilteredMatrix() {\n    if (\"reloaded\" in cache) {\n        rawCompute();\n    }\n    return cache.matrix;    \n}\n\nexport function fetchRetained() {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.retained;\n    } else {\n        return cache.matrix.numberOfColumns();\n    }\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as thresholds from \"./_qc_thresholds.js\";\nimport * as filter from \"./_qc_filter.js\";\nimport * as metrics from \"./_qc_metrics.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nfunction rawCompute() {\n    var mat = filter.fetchFilteredMatrix();\n    var buffer = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", cache);\n\n    // Better not have any more allocations in between now and filling of size_factors!\n    var sums = metrics.fetchSums({ unsafe: true });\n    var discards = thresholds.fetchDiscards({ unsafe: true });\n\n    // Reusing the totals computed earlier.\n    var size_factors = buffer.array();\n    var j = 0;\n    for (var i = 0; i < discards.length; ++i) {\n        if (!discards[i]) {\n            size_factors[j] = sums[i];\n            j++;\n        }\n    }\n\n    if (j != mat.numberOfColumns()) {\n        throw \"normalization and filtering are not in sync\";\n    }\n\n    utils.freeCache(cache.matrix);\n    cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer });\n\n    delete cache.reloaded;\n    return;\n}\n\nexport function compute(args) {\n    if (!metrics.changed && !filter.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        rawCompute();\n        parameters = args;\n        changed = true;\n    }\n    return;\n}\n\nexport function results() {\n    return {};\n}\n\nexport function serialize() {\n    return {\n        \"parameters\": parameters,\n        \"contents\": results()\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\nexport function fetchNormalizedMatrix() {\n    if (\"reloaded\" in cache) {\n        rawCompute();\n    }\n    return cache.matrix;\n}\n\nexport function fetchExpression(index) {\n    var mat = fetchNormalizedMatrix();\n    var buffer = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", cache); // re-using the buffer.\n    mat.row(index, { buffer: buffer });\n    return buffer.slice();\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as normalization from \"./_normalization.js\";\n  \nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nfunction spawnStats() {\n    var model_output = cache.raw;\n    return {\n        \"means\": model_output.means(),\n        \"vars\": model_output.variances(),\n        \"fitted\": model_output.fitted(),\n        \"resids\": model_output.residuals()\n    };\n}\n\nexport function compute(args) {\n    if (!normalization.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        var mat = normalization.fetchNormalizedMatrix();\n        cache.raw = scran.modelGeneVar(mat, { span: args.span });\n\n        cache.sorted_residuals = cache.raw.residuals().slice(); // a separate copy.\n        cache.sorted_residuals.sort();\n\n        parameters = args;\n        delete cache.reloaded;\n        changed = true;\n    }\n    return;\n}\n\nexport function results() {\n    if (\"reloaded\" in cache) {\n        return {\n            \"means\": cache.reloaded.means.slice(),\n            \"vars\": cache.reloaded.vars.slice(),\n            \"fitted\": cache.reloaded.fitted.slice(),\n            \"resids\": cache.reloaded.resids.slice()\n        };\n    } else {\n        return spawnStats();\n    }\n}\n\nexport function serialize() {\n    return { \n        \"parameters\": parameters,\n        \"contents\": results()\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    cache.sorted_residuals = cache.reloaded.resids.slice();\n    cache.sorted_residuals.sort();\n    return;\n}\n\nexport function fetchSortedResiduals() {\n    return cache.sorted_residuals;\n}\n\nexport function fetchResiduals({ unsafe = false } = {}) {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.resids;\n    } else {\n        return cache.raw.residuals({ copy: !unsafe });\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./_utils.js\";\nimport * as normalization from \"./_normalization.js\";\nimport * as variance from \"./_model_gene_var.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nfunction fetchPCsAsWasmArray() {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.pcs;\n    } else {\n        let tmp = cache.raw.principalComponents({ copy: false });\n        return new scran.Float64WasmArray(tmp.length, tmp.byteOffset);\n    }\n}\n\nexport function compute(args) {\n    if (!normalization.changed && !variance.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        // Choosing the highly variable genes.\n        var sorted_resids = variance.fetchSortedResiduals();\n        var threshold_at = sorted_resids[sorted_resids.length - args.num_hvgs];\n\n        var mat = normalization.fetchNormalizedMatrix();\n        var sub = utils.allocateCachedArray(mat.numberOfRows(), \"Uint8Array\", cache);\n        var unsorted_resids = variance.fetchResiduals({ unsafe: true });\n        sub.array().forEach((element, index, array) => {\n            array[index] = unsorted_resids[index] >= threshold_at;\n        });\n\n        // Actually performing the PCA.\n        utils.freeCache(cache.raw);\n        cache.raw = scran.runPCA(mat, { features: sub, numberOfPCs: args.num_pcs });\n\n        utils.freeReloaded(cache);\n        changed = true;\n        parameters = args;\n    }\n    return;\n}\n\nexport function results() {\n    var var_exp;\n\n    if (\"reloaded\" in cache) {\n        var_exp = cache.reloaded.var_exp.slice();\n    } else {\n        var pca_output = cache.raw;\n        var_exp = pca_output.varianceExplained();\n        var total_var = pca_output.totalVariance();\n        var_exp.forEach((x, i) => {\n            var_exp[i] = x/total_var;\n        });\n    }\n\n    return { \"var_exp\": var_exp };\n}\n\nexport function serialize() {\n    var to_save = results();\n    to_save.pcs = fetchPCsAsWasmArray().slice();\n    return {\n      \"parameters\": parameters,\n      \"contents\": to_save\n    };\n}\n \nexport function unserialize(saved) {\n    parameters = saved.parameters;\n\n    utils.freeReloaded(cache);\n    cache.reloaded = saved.contents;\n\n    var tmp = new scran.Float64WasmArray(cache.reloaded.pcs.length);\n    tmp.set(cache.reloaded.pcs);\n    cache.reloaded.pcs = tmp;\n    return;\n}\n\nexport function fetchPCs() {\n    var pcs = fetchPCsAsWasmArray();\n    return {\n        \"pcs\": pcs,\n        \"num_pcs\": parameters.num_pcs,\n        \"num_obs\": pcs.length / parameters.num_pcs\n    };\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./_utils.js\";\nimport * as pca from \"./_pca.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nexport function rawCompute(args) {\n    utils.freeCache(cache.raw);\n    var pcs = pca.fetchPCs();\n    cache.raw = scran.buildNeighborSearchIndex(pcs.pcs, { numberOfDims: pcs.num_pcs, numberOfCells: pcs.num_obs });\n    delete cache.reloaded;\n    return;\n}\n\nexport function compute(args) {\n    if (!pca.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        rawCompute(args);\n        parameters = args;\n        changed = true;\n    }\n    return;\n}\n\nexport function results() {\n    return {};\n}\n\nexport function serialize() {\n    return {\n      \"parameters\": parameters,\n      \"contents\": results()\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\nexport function fetchIndex() {\n    if (\"reloaded\" in cache) {\n        rawCompute(parameters);\n    }\n    return cache.raw;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./_utils.js\";\nimport * as index from \"./_neighbor_index.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nexport function rawCompute(args) {\n    utils.freeCache(cache.raw);\n    var nn_index = index.fetchIndex();\n    cache.raw = scran.findNearestNeighbors(nn_index, args.k);\n    delete cache.reloaded;\n    return;\n}\n\nexport function compute(args) {\n    // Setting the existing cluster_method to the new method so that we don't\n    // pick up changes in the method in the changedParameters() call. This aims\n    // to preserve the state if only the clustering method choice changed, such\n    // that a user avoids recomputation when they switch back to this method.\n    let method = args.cluster_method;\n    delete args.cluster_method;\n\n    if (changed !== null && !index.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n\n    } else if (!method.startsWith(\"snn_\")) {\n        changed = null; // neither changed or unchanged, just skipped.\n        utils.freeCache(cache.raw); // freeing some memory as a courtesy.\n        delete cache.reloaded;\n        parameters = args;\n\n    } else {\n        rawCompute(args);\n        parameters = args;\n        changed = true;\n    }\n\n    return;\n}\n\nexport function results() {\n    return {};\n}\n\nexport function serialize() {\n    let output = { \n        \"parameters\": parameters\n    };\n\n    if (changed === null) {\n        output.contents = null;\n    } else {\n        output.contents = results();\n    }\n    \n    return output;\n};\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n\n    if (saved.contents !== null) {\n        cache.reloaded = saved.contents;\n    } else {\n        changed = null;\n    }\n\n    return;\n}\n\nexport function fetchNeighbors() {\n    if (\"reloaded\" in cache) {\n        rawCompute(parameters);\n    }\n    return cache.raw;\n}\n","import * as scran from \"scran.js\";\nimport * as neighbors from \"./_snn_neighbors.js\";\nimport * as utils from \"./_utils.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nfunction rawCompute(args) {\n    utils.freeCache(cache.raw);\n    var res = neighbors.fetchNeighbors();\n    cache.raw = scran.buildSNNGraph(res, { scheme: args.scheme });\n    delete cache.reloaded;\n    return;\n}\n\nexport function compute(args) {\n    if (neighbors.changed === null) { // If my upstream was skipped, then I am also skipped.\n        changed = null;\n        utils.freeCache(cache.raw); // Clearing out memory as a courtesy.\n        delete cache.reloaded;\n        parameters = args;\n\n    } else if (changed !== null && !neighbors.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n\n    } else {\n        rawCompute(args);\n        parameters = args;\n        changed = true;\n    }\n\n    return;\n}\n\nexport function results() {\n    return {};\n}\n\nexport function serialize() {\n    let output = { \n        \"parameters\": parameters\n    };\n\n    if (changed === null) {\n        output.contents = null;\n    } else {\n        output.contents = results();\n    }\n\n    return output;\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n\n    if (saved !== undefined) {\n        cache.reloaded = saved.contents;\n    } else {\n        changed = null;\n    }\n\n    return;\n}\n\nexport function fetchGraph() {\n    if (\"reloaded\" in cache) {\n        rawCompute(parameters);\n    }\n    return cache.raw;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as graph from \"./_snn_graph.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nexport function fetchClustersAsWasmArray() {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.clusters;\n    } else {\n        return cache.raw.membership({ copy: \"view\" });\n    }\n}\n\nexport function compute(args) {\n    if (graph.changed === null) { // If my upstream was skipped, then I am also skipped.\n        changed = null;\n        utils.freeCache(cache.raw); // Also freeing some memory as a courtesy.\n        utils.freeReloaded(cache);\n        parameters = args;\n\n    } else if (changed !== null && !graph.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n        \n    } else {\n        utils.freeCache(cache.raw);\n        var g = graph.fetchGraph();\n        cache.raw = scran.clusterSNNGraph(g, { resolution: args.resolution });\n\n        parameters = args;\n        changed = true;\n        utils.freeReloaded(cache);\n    }\n\n    return;\n}\n\nexport function results() {\n    // Cluster IDs will be passed to main thread in \n    // choose_clustering, so no need to do it here.\n    return {};\n}\n\nexport function serialize() {\n    let output = { \n        \"parameters\": parameters\n    };\n\n    if (changed === null) {\n        output.contents = null;\n    } else {\n        output.contents = {\n            \"clusters\": fetchClustersAsWasmArray().slice()\n        };\n    }\n\n    return output;\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n\n    if (saved.contents !== null) {\n        utils.freeReloaded(cache);\n        cache.reloaded = saved.contents;\n\n        var out = new scran.Int32WasmArray(cache.reloaded.clusters.length);\n        out.set(cache.reloaded.clusters);\n        cache.reloaded.clusters = out;\n    } else {\n        changed = null;\n    }\n\n    return;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as pca from \"./_pca.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nexport function fetchClustersAsWasmArray() {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.clusters;\n    } else {\n        return cache.raw.clusters({ copy: \"view\" });\n    }\n}\n\nexport function compute(args) {\n    // Removing the cluster_method so that we don't pick up changes in the\n    // method in the changedParameters() call. This aims to preserve the state\n    // if only the clustering method choice changed, such that a user avoids\n    // recomputation when they switch back to this method.\n    let method = args.cluster_method;\n    delete args.cluster_method;\n\n    if (changed !== null && !pca.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n\n    } else if (method !== \"kmeans\") {\n        changed = null; // neither changed or unchanged, just skipped.\n        utils.freeCache(cache.raw); // free up some memory as a courtesy.\n        utils.freeReloaded(cache);\n        parameters = args;\n\n    } else {\n        utils.freeCache(cache.raw);\n        var pcs = pca.fetchPCs();\n        cache.raw = scran.clusterKmeans(pcs.pcs, args.k, { numberOfDims: pcs.num_pcs, numberOfCells: pcs.num_obs });\n        parameters = args;\n        changed = true;\n        utils.freeReloaded(cache);\n    }\n\n    return;\n}\n\nexport function results() {\n    // Cluster IDs will be passed to main thread in \n    // choose_clustering, so no need to do it here.\n    return {};\n}\n\nexport function serialize() {\n    let output = { \n        \"parameters\": parameters\n    };\n\n    if (changed === null) {\n        output.contents = null;\n    } else {\n        output.contents = {\n            \"clusters\": fetchClustersAsWasmArray().slice()\n        };\n    }\n\n    return output;\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n\n    if (saved.contents !== null) {\n        utils.freeReloaded(cache); // free anything that might have been there previously.\n        cache.reloaded = saved.contents;\n\n        var out = new scran.Int32WasmArray(cache.reloaded.clusters.length);\n        out.set(cache.reloaded.clusters);\n        cache.reloaded.clusters = out;\n    } else {\n        changed = null;\n    }\n\n    return;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./_utils.js\";\nimport * as snn_cluster from \"./_snn_cluster.js\";\nimport * as kmeans_cluster from \"./_kmeans_cluster.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\n/** Standard functions **/\nexport function compute(args) {\n    changed = true;\n    \n    if (!utils.changedParameters(parameters, args)) {\n        if (args.method == \"snn_graph\") {\n            if (!snn_cluster.changed) {\n                changed = false;\n            }\n        } else if (args.method == \"kmeans\") {\n            if (!kmeans_cluster.changed) {\n                changed = false;\n            }\n        }\n    }\n\n    if (changed) {\n        delete cache.reloaded;\n        parameters = args;\n        changed = true;\n    }\n    \n    return;\n}\n\nexport function results() {\n    var clusters = fetchClustersAsWasmArray();\n    return { \"clusters\": clusters.slice() };\n}\n\nexport function serialize() {\n    // No need to serialize the cluster IDs,\n    // as this is done for each step.\n    return {\n        \"parameters\": parameters,\n        \"contents\": {}\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\n/** Non-standard functions **/\nexport function fetchClustersAsWasmArray() {\n    if (parameters.method == \"snn_graph\") {\n        return snn_cluster.fetchClustersAsWasmArray();\n    } else if (parameters.method == \"kmeans\") {\n        return kmeans_cluster.fetchClustersAsWasmArray();\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as index from \"./_neighbor_index.js\";\nimport * as utils from \"./_utils.js\";\n\nexport function computeNeighbors(k) {\n    var nn_index = index.fetchIndex();\n\n    var output = { \"num_obs\": nn_index.numberOfCells() };\n    var results = null, rbuf = null, ibuf = null, dbuf = null;\n    try {\n        results = scran.findNearestNeighbors(nn_index, k);\n\n        rbuf = new scran.Int32WasmArray(results.numberOfCells());\n        ibuf = new scran.Int32WasmArray(results.size());\n        dbuf = new scran.Float64WasmArray(results.size());\n\n        results.serialize({ runs: rbuf, indices: ibuf, distances: dbuf });\n        output[\"size\"] = results.size();\n        output[\"runs\"] = rbuf.array().slice();\n        output[\"indices\"] = ibuf.array().slice();\n        output[\"distances\"] = dbuf.array().slice();\n\n    } finally {\n        if (results !== null) {\n            results.free();\n        }\n        if (rbuf !== null) {\n            rbuf.free();\n        }\n        if (ibuf !== null) {\n            ibuf.free();\n        }\n        if (dbuf !== null) {\n            dbuf.free();\n        }\n    }\n\n    return output;\n}\n\nexport function sendTask(worker, payload, cache, transferrable = []) {\n    var i = cache.counter;\n    var p = new Promise((resolve, reject) => {\n        cache.promises[i] = { \"resolve\": resolve, \"reject\": reject };\n    });\n    cache.counter++;\n    payload.id = i;\n    worker.postMessage(payload, transferrable);\n    return p;\n}\n\nexport function initializeWorker(worker, cache) {\n    worker.onmessage = function (msg) {\n        var type = msg.data.type;\n        if (type.endsWith(\"_iter\")) {\n            postMessage({\n                \"type\": type,\n                \"resp\": {\n                    \"x\": msg.data.x,\n                    \"y\": msg.data.y,\n                    \"iteration\": msg.data.iteration\n                },\n            }, [msg.data.x.buffer, msg.data.y.buffer]);\n            return;\n        }\n  \n        var id = msg.data.id;\n        var fun = cache.promises[id];\n        if (type == \"error\") {\n            fun.reject(msg.data.error);\n        } else {\n            fun.resolve(msg.data.data);\n        }\n        delete cache.promises[id];\n    };\n    return sendTask(worker, { \"cmd\": \"INIT\" }, cache);\n}\n\nexport function runWithNeighbors(worker, args, nn_out, cache) {\n    var run_msg = {\n        \"cmd\": \"RUN\",\n        \"params\": args \n    };\n\n    var transferrable = [];\n    if (nn_out !== null) {\n        run_msg.neighbors = nn_out;\n        utils.extractBuffers(nn_out, transferrable);\n    }\n\n    return sendTask(worker, run_msg, cache, transferrable);\n}\n\nexport function retrieveCoordinates(worker, cache) {\n    if (\"reloaded\" in cache) {\n        // Buffers are transferred to the main thread, so we need to make sure we\n        // clone it so that we don't lose our master copy.\n        var copy = { ...cache.reloaded };\n        copy.x = copy.x.slice();\n        copy.y = copy.y.slice();\n        return new Promise(resolve => resolve(copy));\n    } else {\n        return cache.run.then(x => sendTask(worker, { \"cmd\": \"FETCH\" }, cache));\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as vizutils from \"./_utils_viz_parent.js\";\nimport * as index from \"./_neighbor_index.js\";\nimport * as utils from \"./_utils.js\";\n\nvar cache = { \"counter\": 0, \"promises\": {} };\nvar parameters = {};\nvar worker = null;\n\nexport function initialize() {\n    worker = new Worker(new URL(\"./tsne.worker.js\", import.meta.url), { type: \"module\" });\n    return vizutils.initializeWorker(worker, cache);\n}\n\nexport var changed = false;\n\nfunction core(args, reneighbor) {\n    var nn_out = null;\n    if (reneighbor) {\n        var k = scran.perplexityToNeighbors(args.perplexity);\n        nn_out = vizutils.computeNeighbors(k);\n    }\n\n    // This returns a promise but the message itself is sent synchronously,\n    // which is important to ensure that the t-SNE runs in its worker in\n    // parallel with other analysis steps. Do NOT put the runWithNeighbors\n    // call in a .then() as this may defer the message sending until \n    // the current thread is completely done processing.\n    cache.run = vizutils.runWithNeighbors(worker, args, nn_out, cache);\n    return;\n}\n\nexport function compute(args) {\n    if (!index.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n        return;\n    }\n\n    var reneighbor = index.changed || utils.changedParameters(parameters.perplexity, args.perplexity);\n    core(args, reneighbor);\n\n    parameters = args;\n    delete cache.reloaded;\n    changed = true;\n}\n\n\nexport function results() {\n    return vizutils.retrieveCoordinates(worker, cache);\n}\n\nexport async function serialize() {\n    var contents = await vizutils.retrieveCoordinates(worker, cache);\n    return {\n        \"parameters\": parameters,\n        \"contents\": contents\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\nexport function animate() {\n    if (\"reloaded\" in cache) {\n        var param_copy = { ...parameters };\n        param_copy.animate = true;\n        core(param_copy, true);\n        delete cache.reloaded;\n\n        // Mimicking the response from the re-run.\n        return cache.run\n            .then(contents => {\n                return {\n                    \"type\": \"tsne_rerun\",\n                    \"data\": { \"status\": \"SUCCESS\" }\n                };\n            });\n    } else {\n        return vizutils.sendTask(worker, { \"cmd\": \"RERUN\" }, cache);\n    }\n}\n","import * as vizutils from \"./_utils_viz_parent.js\";\nimport * as index from \"./_neighbor_index.js\";\nimport * as utils from \"./_utils.js\";\n\nvar cache = { \"counter\": 0, \"promises\": {} };\nvar parameters = {};\nvar worker = null;\n\nexport function initialize() {\n    worker = new Worker(new URL(\"./umap.worker.js\", import.meta.url), { type: \"module\" });\n    cache.initialized = vizutils.initializeWorker(worker, cache);\n}\n\nexport var changed = false;\n\nfunction core(args, reneighbor) {\n    var nn_out = null;\n    if (reneighbor) {\n        nn_out = vizutils.computeNeighbors(args.num_neighbors);\n    }\n\n    // This returns a promise but the message itself is sent synchronously,\n    // which is important to ensure that the UMAP runs in its worker in\n    // parallel with other analysis steps. Do NOT put the runWithNeighbors\n    // call in a .then() as this may defer the message sending until \n    // the current thread is completely done processing.\n    cache.run = vizutils.runWithNeighbors(worker, args, nn_out, cache);\n    return;\n}\n\nexport function compute(args) {\n    if (!index.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n        return;\n    }\n\n    var reneighbor = index.changed || utils.changedParameters(parameters.num_neighbors, args.num_neighbors);\n    core(args, reneighbor);\n\n    parameters = args;\n    delete cache.reloaded;\n    changed = true;\n}\n\nexport function results() {\n    return vizutils.retrieveCoordinates(worker, cache);\n}\n\nexport async function serialize() {\n    var contents = await vizutils.retrieveCoordinates(worker, cache);\n    return {\n        \"parameters\": parameters,\n        \"contents\": contents\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\nexport function animate() {\n    if (\"reloaded\" in cache) {\n        var param_copy = { ...parameters };\n        param_copy.animate = true;\n        core(param_copy, true);\n        delete cache.reloaded;\n  \n        // Mimicking the response from the re-run.\n        return cache.run\n            .then(contents => { \n                return {\n                    \"type\": \"umap_rerun\",\n                    \"data\": { \"status\": \"SUCCESS\" }\n                };\n            });\n    } else {\n        return vizutils.sendTask(worker, { \"cmd\": \"RERUN\" }, cache);\n    }\n}\n","export function serializeGroupStats(obj, group) {\n    return {\n        \"means\": obj.means(group),\n        \"detected\": obj.detected(group),\n        \"lfc\": {\n            \"min\": obj.lfc(group, { summary: 0 }),\n            \"mean\": obj.lfc(group, { summary: 1 }),\n            \"min-rank\": obj.lfc(group, { summary: 4 })\n        },\n        \"delta_detected\": {\n            \"min\": obj.deltaDetected(group, { summary: 0 }),\n            \"mean\": obj.deltaDetected(group, { summary: 1 }),\n            \"min-rank\": obj.deltaDetected(group, { summary: 4 })\n        },\n        \"cohen\": {\n            \"min\": obj.cohen(group, { summary: 0 }),\n            \"mean\": obj.cohen(group, { summary: 1 }),\n            \"min-rank\": obj.cohen(group, { summary: 4 })\n        },\n        \"auc\": {\n            \"min\": obj.auc(group, { summary: 0 }),\n            \"mean\": obj.auc(group, { summary: 1 }),\n            \"min-rank\": obj.auc(group, { summary: 4 })\n        }\n    };\n}\n\n/*\n * Helper function to retrieve marker statistics for plotting.\n * This is used both for cluster-specific markers as well as the\n * DE genes that are computed for a custom selection vs the rest.\n */\nexport function fetchGroupResults(results, reloaded, rank_type, group) {\n    if (!rank_type || rank_type === undefined) {\n        rank_type = \"cohen-min-rank\";\n    }\n    var use_reloaded = (reloaded !== undefined);\n\n    var ordering;\n    {\n        // Choosing the ranking statistic. Do NOT do any Wasm allocations\n        // until 'ranking' is fully consumed!\n        let ranking;\n        let increasing = false;\n      \n        if (use_reloaded) {\n            let summary = \"mean\";\n            if (rank_type.match(/-min$/)) {\n                summary = \"min\";\n            } else if (rank_type.match(/-min-rank$/)) {\n                increasing = true;\n                summary = \"min-rank\";\n            }\n      \n            let effect;\n            if (rank_type.match(/^cohen-/)) {\n                effect = \"cohen\";\n            } else if (rank_type.match(/^auc-/)) {\n                effect = \"auc\";\n            } else if (rank_type.match(/^lfc-/)) {\n                effect = \"lfc\";\n            } else if (rank_type.match(/^delta-d-/)) {\n                effect = \"delta_detected\";\n            } else {\n                throw \"unknown rank type '\" + rank_type + \"'\";\n            }\n      \n            ranking = reloaded[group][effect][summary];\n        } else {\n            let index = 1;\n            if (rank_type.match(/-min$/)) {\n                index = 0;\n            } else if (rank_type.match(/-min-rank$/)) {\n                increasing = true;\n                index = 4;\n            }\n\n            if (rank_type.match(/^cohen-/)) {\n                ranking = results.cohen(group, { summary: index, copy: false });\n            } else if (rank_type.match(/^auc-/)) {\n                ranking = results.auc(group, { summary: index, copy: false });\n            } else if (rank_type.match(/^lfc-/)) {\n                ranking = results.lfc(group, { summary: index, copy: false });\n            } else if (rank_type.match(/^delta-d-/)) {\n                ranking = results.deltaDetected(group, { summary: index, copy: false });\n            } else {\n                throw \"unknown rank type '\" + rank_type + \"'\";\n            }\n        }\n      \n        // Computing the ordering based on the ranking statistic.\n        ordering = new Int32Array(ranking.length);\n        for (var i = 0; i < ordering.length; i++) {\n            ordering[i] = i;\n        }\n        if (increasing) {\n            ordering.sort((f, s) => (ranking[f] - ranking[s]));\n        } else {\n            ordering.sort((f, s) => (ranking[s] - ranking[f]));\n        }\n    }\n  \n    // Apply that ordering to each statistic of interest.\n    var reorder = function(stats) {\n        var thing = new Float64Array(stats.length);\n        for (var i = 0; i < ordering.length; i++) {\n            thing[i] = stats[ordering[i]];\n        }\n        return thing;\n    };\n  \n    var stat_detected, stat_mean, stat_lfc, stat_delta_d;\n    if (use_reloaded) {\n        var current = reloaded[group];\n        stat_mean = reorder(current.means);\n        stat_detected = reorder(current.detected);\n        stat_lfc = reorder(current.lfc[\"mean\"]);\n        stat_delta_d = reorder(current.delta_detected[\"mean\"]);\n    } else {\n        stat_detected = reorder(results.detected(group, { copy: false }));\n        stat_mean = reorder(results.means(group, { copy: false }));\n        stat_lfc = reorder(results.lfc(group, { summary: 1, copy: false }));\n        stat_delta_d = reorder(results.deltaDetected(group, { summary: 1, copy: false }));\n    }\n  \n    return {\n        \"ordering\": ordering,\n        \"means\": stat_mean,\n        \"detected\": stat_detected,\n        \"lfc\": stat_lfc,\n        \"delta_detected\": stat_delta_d\n    };\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as normalization from \"./_normalization.js\";\nimport * as choice from \"./_choose_clustering.js\";\nimport * as markers from \"./_utils_markers.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nexport function compute(args) {\n    if (!normalization.changed && !choice.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        utils.freeCache(cache.raw);\n        var mat = normalization.fetchNormalizedMatrix();\n        var clusters = choice.fetchClustersAsWasmArray();\n\n        cache.raw = scran.scoreMarkers(mat, clusters);\n\n        parameters = args;\n        delete cache.reloaded;\n        changed = true;\n    }\n    return;\n}\n\nexport function results() {\n    return {};\n}\n\nexport function serialize() {\n    var contents;\n    if (\"reloaded\" in cache) {\n        contents = cache.reloaded;\n    } else {\n        var contents = [];\n        var num = cache.raw.numberOfGroups();\n        for (var i = 0; i < num; i++) {\n            contents.push(markers.serializeGroupStats(cache.raw, i));\n        }\n    }\n    return {\n        \"parameters\": parameters,\n        \"contents\": contents\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\nexport function fetchGroupResults(rank_type, group) {\n    return markers.fetchGroupResults(cache.raw, cache.reloaded, rank_type, group); \n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./_utils.js\";\nimport * as filter from \"./_qc_filter.js\";\nimport * as normalization from \"./_normalization.js\";\nimport * as markers from \"./_utils_markers.js\";\n\nvar cache = { \"results\": {} };\nvar parameters = { \"selections\": {} };\n\nexport var changed = false;\n\nexport function compute(args) {\n    /* If the QC filter was re-run, all of the selections are invalidated as\n     * the identity of the indices may have changed.\n     */\n    if (filter.changed) {\n        parameters.selections = {};\n        for (const [key, val] of Object.entries(cache.results)) {\n            utils.freeCache(val.raw);                    \n        }\n        cache.results = {};\n    }\n\n    /*\n     * Technically we would need to re-run detection on the existing selections\n     * if the normalization changed but the QC was the same. In practice, this\n     * never happens, so we'll deal with it later.\n     */\n    \n    changed = true;\n    return;\n}\n\nexport function results() {\n    return {};\n}\n\nexport function serialize() {\n    var results = {};\n    \n    for (const [key, val] of Object.entries(cache.results)) {\n        if (\"reloaded\" in val) {\n            results[key] = val.reloaded;\n        } else {\n            results[key] = markers.serializeGroupStats(val.raw, 1);\n        }\n    }\n    \n    return {\n        \"parameters\": parameters,\n        \"contents\": { \"results\": results }\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    for (const [key, val] of Object.entries(saved.contents)) {\n        cache.results[key] = { \"reloaded\": val };\n    }\n    return;\n}\n\nexport function addSelection(id, selection) {\n    var mat = normalization.fetchNormalizedMatrix();\n\n    var buffer = utils.allocateCachedArray(mat.numberOfColumns(), \"Int32Array\", cache);\n    buffer.fill(0);\n    var tmp = buffer.array();\n    selection.forEach(element => { tmp[element] = 1; });\n\n    // Assumes that we have at least one cell in and outside the selection!\n    var res = scran.scoreMarkers(mat, buffer); \n  \n    // Removing previous results, if there were any.\n    if (id in cache.results) {\n        utils.freeCache(cache.results[id].raw);\n        delete cache.results[id];\n    }\n  \n    cache.results[id] = { \"raw\": res };\n    parameters.selections[id] = selection;\n}\n\nexport function removeSelection(id) {\n    utils.freeCache(cache.results[id].raw);\n    delete cache.results[id];\n    delete parameters.selections[id];\n}\n\nexport function fetchResults(id, rank_type) {\n    var current = cache.results[id];\n    return markers.fetchGroupResults(current.raw, current.reloaded, rank_type, 1); \n};\n","var kanaDB;\nvar init = null;\n\nexport function initialize() {\n    init = new Promise(resolve => {\n        // initialize database on worker creation\n        kanaDB = indexedDB.open(\"KanaDB\", 2);\n\n        kanaDB.onupgradeneeded = (e) => {\n            var kanaDBClient = e.target.result;\n\n            // Currently purging all existing stores when the version is updated.\n            // At some point we may add a more sophisticated upgrade mechanism.\n            try {\n                kanaDBClient.deleteObjectStore(\"analysis\");\n            } catch (e) {}\n            try {\n                kanaDBClient.deleteObjectStore(\"analysis_meta\");\n            } catch (e) {}\n            try {\n                kanaDBClient.deleteObjectStore(\"file\");\n            } catch (e) {}\n            try {\n                kanaDBClient.deleteObjectStore(\"file_meta\");\n            } catch (e) {}\n\n            kanaDBClient.createObjectStore(\"analysis\", { keyPath: 'id' });\n            kanaDBClient.createObjectStore(\"analysis_meta\", { keyPath: 'id' });\n            kanaDBClient.createObjectStore(\"file\", { keyPath: 'id' });\n            kanaDBClient.createObjectStore(\"file_meta\", { keyPath: 'id' });\n        };\n\n        // Send existing stored analyses, if available.\n        kanaDB.onsuccess = () => {\n            getRecordsResolver(resolve);\n        };\n\n        kanaDB.onerror = () => {\n            resolve(null);\n        };\n    });\n\n    return init;\n}\n\nfunction getRecordsResolver(resolve, store = null) {\n    if (store === null) {\n        store = kanaDB.result\n            .transaction([\"analysis_meta\"], \"readonly\")\n            .objectStore(\"analysis_meta\")\n    }\n\n    var allAnalysis = store.getAll();\n\n    allAnalysis.onsuccess = function () {\n        let vals = allAnalysis.result;\n        vals.forEach(x => { delete x.files }); // no need to transfer that.\n        resolve(vals);\n    };\n    allAnalysis.onerror = function () {\n        resolve(null);\n    };\n}\n\n/** Helper functions **/\nasync function loadContent(id, store) {\n    return new Promise(resolve => {\n        let request = store.get(id);\n        request.onsuccess = function () {\n            if (request.result !== undefined) {\n                resolve(request.result);\n            } else {\n                resolve(null);\n            }\n        };\n        request.onerror = function () {\n            resolve(null);\n        };\n    });\n}\n\nfunction allOK(promises) {\n    return Promise.allSettled(promises)\n        .then(vals => {\n            for (const x of vals) {\n                if (!x) {\n                    return false;\n                }\n            }\n            return true;\n        });\n}\n\nexport async function getRecords() {\n    await init;\n    return new Promise(resolve => {\n        getRecordsResolver(resolve);\n    });\n}\n\n/** Functions to save content **/\nexport async function saveFile(id, buffer) {\n    await init;\n    let trans = kanaDB.result.transaction([\"file\", \"file_meta\"], \"readwrite\");\n    let file_store = trans.objectStore(\"file\");\n    let meta_store = trans.objectStore(\"file_meta\");\n\n    var meta = await loadContent(id, meta_store);\n    var refcount;\n    if (meta === null) {\n        refcount = 0;\n    } else {\n        refcount = meta[\"count\"];\n    }\n    refcount++;\n\n    var data_saving = new Promise(resolve => {\n        var putrequest = file_store.put({ \"id\": id, \"payload\": buffer });\n        putrequest.onsuccess = function (event) {\n            resolve(true);\n        };\n        putrequest.onerror = function (event) {\n            resolve(false);\n        };\n    });\n\n    var ref_saving = new Promise(resolve => {\n        meta.count = refcount;\n        var putrequest = meta_store.put(meta);\n        putrequest.onsuccess = function (event) {\n            resolve(true);\n        };\n        putrequest.onerror = function (event) {\n            resolve(false);\n        };\n    });\n\n    return allOK([data_saving, ref_saving])\n};\n\nexport async function saveAnalysis(id, state, files, title) { \n    await init;\n    let trans = kanaDB.result.transaction([\"analysis\", \"analysis_meta\"], \"readwrite\")\n    let analysis_store = trans.objectStore(\"analysis\");\n    let meta_store = trans.objectStore(\"analysis_meta\");\n\n    if (id == null) {\n        let already = await new Promise(resolve => getRecordsResolver(resolve, meta_store));\n        id = String(already.length);\n    }\n\n    var data_saving = new Promise(resolve => {\n        var putrequest = analysis_store.put({ \"id\": id, \"payload\": state });\n        putrequest.onsuccess = function (event) {\n            resolve(true);\n        };\n        putrequest.onerror = function (event) {\n            resolve(false);\n        };\n    });\n\n    var id_saving = new Promise(resolve => {\n        var putrequest = meta_store.put({ \"id\": id, \"files\": files, \"time\": Number(new Date()), \"title\": title });\n        putrequest.onsuccess = function (event) {\n            resolve(true);\n        };\n        putrequest.onerror = function (event) {\n            resolve(false);\n        };\n    });\n\n    if (await allOK([data_saving, id_saving])) {\n        return id;\n    } else {\n        return null;\n    }\n};\n\n/** Functions to load content **/\nexport async function loadFile(id) {\n    await init;\n    let file_store = kanaDB.result\n        .transaction([\"file\"], \"readonly\")\n        .objectStore(\"file\");\n\n    var meta = await loadContent(id, file_store);\n    return meta[\"payload\"];\n}\n\nexport async function loadAnalysis(id) {\n    await init;\n    let analysis_store = kanaDB.result\n        .transaction([\"analysis\"], \"readonly\")\n        .objectStore(\"analysis\");\n    var meta = await loadContent(id, analysis_store);\n    return meta[\"payload\"];\n}\n\n/** Functions to load content **/\nexport async function removeFile(id) {\n    await init;\n    let trans = kanaDB.result.transaction([\"file\", \"file_meta\"], \"readwrite\");\n    let file_store = trans.objectStore(\"file\");\n    let meta_store = trans.objectStore(\"file_meta\");\n\n    var meta = await loadContent(id, meta_store);\n    var refcount = meta[\"count\"];\n    refcount--;\n    var promises = [];\n\n    if (refcount == 0) {\n        promises.push(new Promise(resolve => {\n            let request = file_store.remove(id);\n            request.onerror = function (event) {\n                resolve(false);\n            };\n            request.onsuccess = function (event) {\n                resolve(true);\n            };\n        }));\n        promises.push(new Promise(resolve => {\n            let request = meta_store.delete(id);\n            request.onerror = function (event) {\n                resolve(false);\n            };\n            request.onsuccess = function (event) {\n                resolve(true);\n            };\n        }))\n    } else {\n        promises.push(new Promise(resolve => {\n            meta.count = refcount;\n            let request = meta_store.put(meta);\n            request.onsuccess = function (event) {\n                resolve(true);\n            };\n            request.onerror = function (event) {\n                resolve(false);\n            };\n        }));\n    }\n\n    return allOK(promises);\n}\n\nexport async function removeAnalysis(id) {\n    await init;\n    let trans = kanaDB.result.transaction([\"analysis\", \"analysis_meta\"], \"readwrite\")\n    let analysis_store = trans.objectStore(\"analysis\");\n    let meta_store = trans.objectStore(\"analysis_meta\");\n\n    var promises = [];\n\n    promises.push(new Promise(resolve => {\n        let request = analysis_store.delete(id);\n        request.onsuccess = function (event) {\n            resolve(true);\n        };\n        request.onerror = function (event) {\n            resolve(false);\n        };\n    }));\n\n    // Removing all files as well.\n    var meta = await loadContent(id, meta_store);\n    for (const f of meta[\"files\"]) {\n        promises.push(removeFile(f));\n    }\n\n    promises.push(new Promise(resolve => {\n        let request = meta_store.delete(id);\n        request.onsuccess = function (event) {\n            resolve(true);\n        };\n        request.onerror = function (event) {\n            resolve(false);\n        };\n    }));\n\n    return allOK(promises);\n}\n","import * as scran from \"scran.js\";\nimport * as inputs from \"./_inputs.js\";\nimport * as metrics from \"./_qc_metrics.js\";\nimport * as thresholds from \"./_qc_thresholds.js\";\nimport * as filter from \"./_qc_filter.js\";\nimport * as normalization from \"./_normalization.js\";\nimport * as variance from \"./_model_gene_var.js\";\nimport * as pca from \"./_pca.js\";\nimport * as index from \"./_neighbor_index.js\";\nimport * as cluster_choice from \"./_choose_clustering.js\";\nimport * as kmeans_cluster from \"./_kmeans_cluster.js\";\nimport * as snn_cluster from \"./_snn_cluster.js\";\nimport * as snn_graph from \"./_snn_graph.js\";\nimport * as snn_neighbors from \"./_snn_neighbors.js\";\nimport * as tsne from \"./_tsne_monitor.js\";\nimport * as umap from \"./_umap_monitor.js\";\nimport * as cluster_markers from \"./_score_markers.js\";\nimport * as custom_markers from \"./_custom_markers.js\";\nimport * as kana_db from \"./KanaDBHandler.js\";\nimport * as utils from \"./_utils.js\";\nimport * as serialize_utils from \"./_utils_serialize.js\";\n\n/***************************************/\n\nfunction postSuccess_(info, step, message) {\n    var transferable = [];\n    utils.extractBuffers(info, transferable);\n    postMessage({\n        type: `${step}_DATA`,\n        resp: info,\n        msg: \"Success: \" + message\n    }, transferable);\n}\n\nfunction runAllSteps(mode = \"run\", state = null) {\n    var response;\n    if (mode === \"serialize\") {\n        response = {};\n    } else {\n        if (state == null) {\n            throw \"'state' must be supplied if 'mode' is not 'serialize'\";\n        }\n        if (mode === \"unserialize\") {\n            console.log(state);\n            response = { \"params\": {} };\n        }\n    }\n  \n    // Creating helper functions.\n    var postSuccess = function (namespace, step, message) {\n        if (namespace.changed || mode == \"unserialize\") {\n            postSuccess_(namespace.results(), step, message);\n        }\n    }\n  \n    var postSuccessAsync = function (namespace, step, message) {\n        if (namespace.changed || mode == \"unserialize\") {\n            namespace.results()\n                .then(res => {\n                    postSuccess_(res, step, message);\n                });\n        }\n    }\n    \n    var addSerialized = function(step, namespace) {\n        let value = namespace.serialize();\n        if (value !== null) {\n            response[step] = value;\n        }\n    };\n  \n    var addParameters = function(name, value, remapped) {\n        let object = response[\"params\"];\n        if (name in object) {\n            for (const [k, v] of Object.entries(value)) {\n                object[name][k] = v;\n            }\n        } else {\n            object[name] = value;\n        }\n    }\n  \n    // Running through all steps.\n    {\n        let step = \"inputs\";\n        if (mode === \"serialize\") {\n            addSerialized(step, inputs);\n        } else {\n            if (mode == \"run\") {\n                inputs.compute({\n                    \"format\": state.files.format,\n                    \"files\": state.files.files\n                });\n            } else {\n                inputs.unserialize(state[step]);\n                response[\"files\"] = {\n                    \"format\": \"kana\",\n                    \"files\": []\n                };\n            }\n            postSuccess(inputs, step, \"Count matrix loaded\");\n        }\n    }\n  \n    {\n        let step = \"quality_control_metrics\";\n        if (mode === \"serialize\") {\n            addSerialized(step, metrics);\n        } else {\n            if (mode == \"run\") {\n                metrics.compute({\n                    \"use_mito_default\": state.params.qc[\"qc-usemitodefault\"],\n                    \"mito_prefix\": state.params.qc[\"qc-mito\"]\n                });\n            } else {\n                metrics.unserialize(state[step]);\n                addParameters(\"qc\", {\n                    \"qc-usemitodefault\": state[step].parameters.use_mito_default,\n                    \"qc-mito\": state[step].parameters.mito_prefix\n                });\n            }\n            postSuccess(metrics, step, \"QC metrics computed\");\n        }\n    }\n  \n    {\n        let step = \"quality_control_thresholds\";\n        if (mode === \"serialize\") {\n            addSerialized(step, thresholds);\n        } else {\n            if (mode == \"run\") {\n                thresholds.compute({\n                    \"nmads\": state.params.qc[\"qc-nmads\"]\n                });\n            } else {\n                thresholds.unserialize(state[step]);\n                addParameters(\"qc\", {\n                    \"qc-nmads\": state[step].parameters.nmads\n                });\n            }\n            postSuccess(thresholds, step, \"QC thresholds computed\");\n        }\n    }\n  \n    {\n        let step = \"quality_control_filtered\";\n        if (mode == \"serialize\") {\n            addSerialized(step, filter);\n        } else {\n            if (mode == \"run\") {\n                filter.compute({});\n            } else {\n                filter.unserialize(state[step]);\n            }\n            postSuccess(filter, step, \"QC filtering completed\");\n        }\n    }\n  \n    {\n        let step = \"normalization\";\n        if (mode == \"serialize\") {\n            addSerialized(step, normalization);\n        } else {\n            if (mode == \"run\") {\n                normalization.compute({});\n            } else {\n                normalization.unserialize(state[step]);\n            }\n            postSuccess(normalization, step, \"Log-normalization completed\");\n        }\n    }\n  \n    {\n        let step = \"feature_selection\";\n        if (mode == \"serialize\") {\n            addSerialized(step, variance);\n        } else {\n            if (mode == \"run\") {\n                variance.compute({\n                    \"span\": state.params.fSelection[\"fsel-span\"]\n                });\n            } else {\n                variance.unserialize(state[step]);\n                addParameters(\"fSelection\", {\n                    \"fsel-span\": state[step].parameters.span\n                });\n            }\n            postSuccess(variance, step, \"Variance modelling completed\");\n        }\n    }\n  \n    {\n        let step = \"pca\";\n        if (mode == \"serialize\") {\n            addSerialized(step, pca);\n        } else {\n            if (mode == \"run\") {\n                pca.compute({\n                    \"num_hvgs\": state.params.pca[\"pca-hvg\"],\n                    \"num_pcs\": state.params.pca[\"pca-npc\"]\n                });\n            } else {\n                pca.unserialize(state[step]);\n                addParameters(\"pca\", {\n                    \"pca-hvg\": state[step].parameters.num_hvgs,\n                    \"pca-npc\": state[step].parameters.num_pcs\n                });\n            }\n            postSuccess(pca, step, \"Principal components analysis completed\");\n        }\n    }\n  \n    {\n        let step = \"neighbor_index\";\n        if (mode == \"serialize\") {\n            addSerialized(step, index);\n        } else {\n            if (mode == \"run\") {\n                index.compute({\n                    \"approximate\": state.params.cluster[\"clus-approx\"]\n                });\n            } else {\n                index.unserialize(state[step]);\n                addParameters(\"cluster\", {\n                    \"clus-approx\": state[step].parameters.approximate\n                });\n            }\n            postSuccess(index, step, \"Neighbor search index constructed\");\n        }\n    }\n\n    // Need to handle promises in serialize(), results() output,\n    // as these are coming from other workers and are inherently async.\n    var tsne_res;\n    {\n        let step = \"tsne\";\n        if (mode == \"serialize\") {\n            tsne_res = tsne.serialize();\n        } else {\n            if (mode == \"run\") {\n                tsne.compute({\n                    \"perplexity\": state.params.tsne[\"tsne-perp\"],\n                    \"iterations\": state.params.tsne[\"tsne-iter\"],\n                    \"animate\": state.params.tsne[\"animate\"]\n                });\n            } else {\n                tsne.unserialize(state[step]);\n                addParameters(\"tsne\", {\n                  \"tsne-perp\": state[step].parameters.perplexity,\n                  \"tsne-iter\": state[step].parameters.iterations,\n                  \"animate\": state[step].parameters.animate\n                });\n            }\n            postSuccessAsync(tsne, step, \"t-SNE completed\");\n        }\n    }\n\n    var umap_res;\n    {\n        let step = \"umap\";\n        if (mode == \"serialize\") {\n            umap_res = umap.serialize();\n        } else {\n            if (mode == \"run\") {\n                umap.compute({\n                    \"num_epochs\": state.params.umap[\"umap-epochs\"],\n                    \"num_neighbors\": state.params.umap[\"umap-nn\"],\n                    \"min_dist\": state.params.umap[\"umap-min_dist\"],\n                    \"animate\": state.params.umap[\"animate\"]\n                });\n            } else {\n                umap.unserialize(state[step]);\n                addParameters(\"umap\", {\n                    \"umap-epochs\": state[step].parameters.num_epochs,\n                    \"umap-nn\": state[step].parameters.num_neighbors,\n                    \"umap-min_dist\": state[step].parameters.min_dist,\n                    \"animate\": state[step].parameters.animate\n                });\n            }\n            postSuccessAsync(umap, step, \"UMAP completed\");\n        }\n    }\n  \n    // Back to normal programming.\n    {\n        let step = \"kmeans_cluster\";\n        if (mode == \"serialize\") {\n            addSerialized(step, kmeans_cluster);\n        } else {\n            if (mode == \"run\") {\n                // Only reporting the method to decide whether to execute this\n                // step; this does not need to be unserialized, as it is \n                // remembered by the choose_clustering step.\n                kmeans_cluster.compute({\n                    \"k\": state.params.cluster[\"kmeans-k\"],\n                    \"cluster_method\": state.params.cluster[\"clus-method\"] \n                });\n            } else {\n                if (step in state) { // clause for back-compatibility with saved analyses.\n                    kmeans_cluster.unserialize(state[step]);\n                    addParameters(\"cluster\", {\n                        \"kmeans-k\": state[step].parameters.k\n                    });\n                }\n            }\n            postSuccess(kmeans_cluster, step, \"K-means clustering completed\");\n        }\n    }\n\n    {\n        let step = \"snn_find_neighbors\";\n        if (mode == \"serialize\") {\n            addSerialized(step, snn_neighbors);\n        } else {\n            if (mode == \"run\") {\n                // Only reporting the method to decide whether to execute this\n                // step; this does not need to be unserialized, as it is \n                // remembered by the choose_clustering step.\n                snn_neighbors.compute({\n                    \"k\": state.params.cluster[\"clus-k\"],\n                    \"cluster_method\": state.params.cluster[\"clus-method\"]\n                });\n            } else {\n                snn_neighbors.unserialize(state[step]);\n                addParameters(\"cluster\", {\n                    \"clus-k\": state[step].parameters.k\n                });\n            }\n            postSuccess(snn_neighbors, step, \"Shared nearest neighbor search completed\");\n        }\n    }\n  \n    {\n        let step = \"snn_build_graph\";\n        if (mode == \"serialize\") {\n            addSerialized(step, snn_graph);\n        } else {\n            if (mode == \"run\") {\n                snn_graph.compute({\n                    \"scheme\": state.params.cluster[\"clus-scheme\"]\n                });\n            } else {\n                snn_graph.unserialize(state[step]);\n                addParameters(\"cluster\", {\n                    \"clus-scheme\": state[step].parameters.scheme\n                });\n            }\n            postSuccess(snn_graph, step, \"Shared nearest neighbor graph constructed\");\n        }\n    }\n  \n    {\n        let step = \"snn_cluster_graph\";\n        if (mode == \"serialize\") {\n            addSerialized(step, snn_cluster);\n        } else {\n            if (mode == \"run\") {\n                snn_cluster.compute({\n                    \"resolution\": state.params.cluster[\"clus-res\"]\n                });\n            } else {\n                snn_cluster.unserialize(state[step]);\n                addParameters(\"cluster\", {\n                    \"clus-res\": state[step].parameters.resolution\n                });\n            }\n            postSuccess(snn_cluster, step, \"Community detection from SNN graph complete\");\n        }\n    }\n\n    {\n        let step = \"choose_clustering\";\n        if (mode == \"serialize\") {\n            addSerialized(step, cluster_choice);\n        } else {\n            if (mode == \"run\") {\n                cluster_choice.compute({\n                    \"method\": state.params.cluster[\"clus-method\"]\n                });\n            } else {\n                cluster_choice.unserialize(state[step]);\n                addParameters(\"cluster\", {\n                    \"clus-method\": state[step].parameters.method\n                });\n            }\n            postSuccess(cluster_choice, step, \"Clustering of interest chosen\");\n        }\n    }\n\n    {\n        let step = \"marker_detection\";\n        if (mode == \"serialize\") {\n            addSerialized(step, cluster_markers);\n        } else {\n            if (mode == \"run\") {\n                cluster_markers.compute({});\n            } else {\n                cluster_markers.unserialize(state[step]);\n            }\n            postSuccess(cluster_markers, step, \"Marker detection complete\");\n        }\n    }\n\n    {\n        let step = \"custom_marker_management\";\n        if (mode == \"serialize\") {\n            addSerialized(step, custom_markers);\n        } else {\n            if (mode == \"run\") {\n                custom_markers.compute({});\n            } else {\n                custom_markers.unserialize(state[step]);\n            }\n            postSuccess(custom_markers, step, \"Pruning of custom markers finished\");\n        }\n    }\n  \n    if (mode == \"serialize\") {\n        console.log(response);\n        return Promise.all([tsne_res, umap_res])\n            .then(done => {\n                response.tsne = done[0];\n                response.umap = done[1];\n                return response;\n            });\n    } else {\n        return response;\n    }\n}\n\n/***************************************/\n\nvar loaded;\nonmessage = function (msg) {\n    const payload = msg.data;\n    if (payload.type == \"INIT\") {\n        let nthreads = Math.round(navigator.hardwareConcurrency * 2 / 3);\n        let scran_init = scran.initialize({ numberOfThreads: nthreads });\n        scran_init \n            .then(x => {\n                postMessage({\n                    type: payload.type,\n                    msg: `Success: ScranJS/WASM initialized`\n                });\n            });\n\n        let kana_init = kana_db.initialize();\n        kana_init\n            .then(result => {\n                if (result !== null) {\n                    postMessage({\n                        type: \"KanaDB_store\",\n                        resp: result,\n                        msg: \"Success\"\n                    });\n                } else {\n                    console.error(error);\n                    postMessage({\n                        type: \"KanaDB_ERROR\",\n                        msg: `Fail: Cannot initialize DB`\n                    });\n                }\n            });\n\n        let tsne_init = tsne.initialize();\n        let umap_init = umap.initialize();\n\n        loaded = Promise.all([\n            scran_init,\n            kana_init,\n            tsne_init,\n            umap_init\n        ]);\n\n    } else if (payload.type == \"RUN\") {\n        loaded\n            .then(x => {\n                runAllSteps(\"run\", payload.payload)\n            })\n            .catch(error => {\n                console.error(error);\n                postMessage({\n                    type: \"run_ERROR\",\n                    msg: error.toString()\n                });\n            });\n\n    /**************** LOADING EXISTING ANALYSES *******************/\n    } else if (payload.type == \"LOAD\") {\n        if (payload.payload.files.format == \"kana\") {\n            const reader = new FileReaderSync();\n            var f = payload.payload.files.files.file[0];\n            loaded\n                .then(async (x) => {\n                    var contents = await serialize_utils.load(reader.readAsArrayBuffer(f));\n                    var response = runAllSteps(\"unserialize\", contents);\n                    postMessage({\n                        type: \"loadedParameters\",\n                        resp: response\n                    });\n                })\n                .catch(error => {\n                    console.error(error);\n                    postMessage({\n                        type: \"load_ERROR\",\n                        msg: error.toString()\n                    });\n                });\n\n        } else if (payload.payload.files.format == \"kanadb\") {\n            var id = payload.payload.files.files.file;\n            kana_db.loadAnalysis(id)\n                .then(async (res) => {\n                    if (res == null) {\n                        postMessage({\n                            type: \"KanaDB_ERROR\",\n                            msg: `Fail: cannot load analysis ID '${id}'`\n                        });\n                    } else {\n                        var contents = await serialize_utils.load(res);\n                        var response = await runAllSteps(\"unserialize\", contents);\n                        postMessage({\n                            type: \"loadedParameters\",\n                            resp: response\n                        });\n                    }\n                })\n                .catch(error => {\n                    console.error(error);\n                    postMessage({\n                        type: \"load_ERROR\",\n                        msg: error.toString()\n                    });\n                });\n        }\n  \n    } else if (payload.type == \"EXPORT\") { // exporting an analysis\n        loaded\n            .then(async (x) => {\n                var state = await runAllSteps(\"serialize\");\n                var output = await serialize_utils.save(state, \"full\");\n                postMessage({\n                    type: \"exportState\",\n                    resp: output,\n                    msg: \"Success: application state exported\"\n                }, [output]);\n            })\n            .catch(error => {\n                console.error(error);\n                postMessage({\n                    type: \"export_ERROR\",\n                    msg: error.toString()\n                });\n            });\n  \n    } else if (payload.type == \"SAVEKDB\") { // save analysis to inbrowser indexedDB \n        var title = payload.payload.title;\n        loaded\n            .then(async (x) => {\n                var state = await runAllSteps(\"serialize\");\n                var output = await serialize_utils.save(state, \"KanaDB\");\n                var id = await kana_db.saveAnalysis(null, output.state, output.file_ids, title);\n                if (id !== null) {\n                    let recs = await kana_db.getRecords();\n                    postMessage({\n                        type: \"KanaDB_store\",\n                        resp: recs,\n                        msg: `Success: Saved analysis to cache (${id})`\n                    });\n                } else {\n                    console.error(error);\n                    postMessage({\n                        type: \"KanaDB_ERROR\",\n                        msg: `Fail: Cannot save analysis to cache (${id})`\n                    });\n                }\n            })\n            .catch(error => {\n                console.error(error);\n                postMessage({\n                    type: \"export_ERROR\",\n                    msg: error.toString()\n                });\n            });\n  \n    } else if (payload.type == \"REMOVEKDB\") { // remove a saved analysis\n        var id = payload.payload.id;\n        kana_db.removeAnalysis(id)\n            .then(async (result) => {\n                if (result) {\n                    let recs = await kana_db.getRecords();\n                    postMessage({\n                        type: \"KanaDB_store\",\n                        resp: recs,\n                        msg: `Success: Removed file from cache (${id})`\n                    });\n                } else {\n                    console.error(error);\n                    postMessage({\n                        type: \"KanaDB_ERROR\",\n                        msg: `fail: cannot remove file from cache (${id})`\n                    });\n                }\n            });\n  \n    /**************** OTHER EVENTS FROM UI *******************/\n    } else if (payload.type == \"getMarkersForCluster\") {\n        loaded.then(x => {\n            let cluster = payload.payload.cluster;\n            let rank_type = payload.payload.rank_type;\n            var resp = cluster_markers.fetchGroupResults(rank_type, cluster);\n      \n            var transferrable = [];\n            utils.extractBuffers(resp, transferrable);\n            postMessage({\n                type: \"setMarkersForCluster\",\n                resp: resp,\n                msg: \"Success: GET_MARKER_GENE done\"\n            }, transferrable);\n        });\n  \n    } else if (payload.type == \"getGeneExpression\") {\n        loaded.then(x => {\n            let row_idx = payload.payload.gene;\n            var vec = normalization.fetchExpression(row_idx);\n            postMessage({\n                type: \"setGeneExpression\",\n                resp: {\n                    gene: row_idx,\n                    expr: vec\n                },\n                msg: \"Success: GET_GENE_EXPRESSION done\"\n            }, [vec.buffer]);\n        });\n  \n    } else if (payload.type == \"computeCustomMarkers\") {\n        loaded.then(x => {\n            custom_markers.addSelection(payload.payload.id, payload.payload.selection);\n            postMessage({\n                type: \"computeCustomMarkers\",\n                msg: \"Success: COMPUTE_CUSTOM_MARKERS done\"\n            });\n        });\n  \n    } else if (payload.type == \"getMarkersForSelection\") {\n        loaded.then(x => {\n            var resp = custom_markers.fetchResults(payload.payload.cluster, payload.payload.rank_type);\n            var transferrable = [];\n            utils.extractBuffers(resp, transferrable);\n            postMessage({\n                type: \"setMarkersForCustomSelection\",\n                resp: resp,\n                msg: \"Success: GET_MARKER_GENE done\"\n            }, transferrable);\n        });\n  \n    } else if (payload.type == \"removeCustomMarkers\") {\n        loaded.then(x => {\n            custom_markers.removeSelection(payload.payload.id);\n        });\n  \n    } else if (payload.type == \"animateTSNE\") {\n        loaded.then(async (x) => {\n            await tsne.animate();\n            var res = await tsne.results();\n            postSuccess_(res, \"tsne\", \"Resending t-SNE coordinates\");\n        });\n  \n    } else if (payload.type == \"animateUMAP\") {\n        loaded.then(async (x) => {\n            await umap.animate();\n            var res = await umap.results();\n            postSuccess_(res, \"umap\", \"Resending UMAP coordinates\");\n        });\n\n    } else if (payload.type == \"getAnnotation\") {\n        loaded.then(x => {\n            let annot = payload.payload.annotation;\n            var vec = inputs.fetchAnnotations(annot);\n            postMessage({\n                type: \"setAnnotation\",\n                resp: {\n                    annotation: annot,\n                    values: {\n                        \"index\": vec.index,\n                        \"factor\": vec.factor\n                    }\n                },\n                msg: \"Success: GET_ANNOTATION done\"\n            }, [vec.factor.buffer]);\n        });\n  \n    } else {\n        console.error(\"MIM:::msg type incorrect\")\n    }\n}\n","import * as pako from \"pako\";\nimport * as hashwasm from \"hash-wasm\";\nimport * as kana_db from \"./KanaDBHandler.js\";\n\n// Must be integers!\nconst FORMAT_EMBEDDED_FILES = 0;\nconst FORMAT_EXTERNAL_KANADB = 1;\nconst FORMAT_VERSION = 0;\n\nfunction normalizeTypedArrays(object) {\n    if (Array.isArray(object)) {\n        for (var i = 0; i < object.length; i++) {\n            object[i] = normalizeTypedArrays(object[i]);\n        }\n    } else if (ArrayBuffer.isView(object)) {\n        object = { \n            \"_TypedArray_class\": object.constructor.name, \n            \"_TypedArray_values\": Array.from(object) \n        };\n    } else if (object instanceof Object) {\n        // This MUST be after the previous clause, as otherwise\n        // a TypedArray is an object and is incorrectly handled. \n        for (const [key, element] of Object.entries(object)) {\n            object[key] = normalizeTypedArrays(element);\n        }\n    }\n    return object;\n}\n\nfunction recoverTypedArrays(object) {\n    if (Array.isArray(object)) {\n        for (var i = 0; i < object.length; i++) {\n            object[i] = recoverTypedArrays(object[i]);\n        }\n    } else if (object instanceof Object) {\n        if (\"_TypedArray_class\" in object) {\n            var cls = object[[\"_TypedArray_class\"]];\n            var vals = object[[\"_TypedArray_values\"]];\n            switch (cls) {\n                case \"Uint8Array\":\n                    object = new Uint8Array(vals.length);\n                    break;\n                case \"Int8Array\":\n                    object = new Int8Array(vals.length);\n                    break;\n                case \"Uint8Array\":\n                    object = new Uint8Array(vals.length);\n                    break;\n                case \"Uint16Array\":\n                    object = new Uint16Array(vals.length);\n                    break;\n                case \"Int16Array\":\n                    object = new Int16Array(vals.length);\n                    break;\n                case \"Uint32Array\":\n                    object = new Uint32Array(vals.length);\n                    break;\n                case \"Int32Array\":\n                    object = new Int32Array(vals.length);\n                    break;\n                case \"Uint64Array\":\n                    object = new Uint64Array(vals.length);\n                    break;\n                case \"Int64Array\":\n                    object = new Int64Array(vals.length);\n                    break;\n                case \"Float32Array\":\n                    object = new Float32Array(vals.length);\n                    break;\n                case \"Float64Array\":\n                    object = new Float64Array(vals.length);\n                    break;\n                default:\n                    throw \"unrecognized TypedArray class '\" + cls;\n            }\n            object.set(vals);\n        } else {\n            for (const [key, element] of Object.entries(object)) {\n                object[key] = recoverTypedArrays(element);\n            }\n        }\n    } \n    return object;\n}\n\nfunction numberToBuffer(number) {\n    // Store as little-endian. Probably safer\n    // than trying to cast it from a Uint64Array;\n    // not sure that endianness is strictly defined.\n    var output = new Uint8Array(8);\n\n    var i = 0;\n    while (number > 0) {\n        output[i] = number % 256;\n        number = Math.floor(number / 256);\n        i++;\n    }\n\n    return output;\n}\n\nfunction bufferToNumber(buffer) {\n    var output = 0;\n    var multiplier = 1;\n    for (const x of buffer) {\n        output += multiplier * x;\n        multiplier *= 256;\n    }\n    return output;\n}\n\nexport async function save(contents, mode = \"full\") {\n    // Extract out the file buffers.\n    var buffered = contents.inputs.parameters.files;\n    var all_buffers = [];\n    var total_len = 0;\n    var format_type;\n\n    if (mode == \"full\") {\n        format_type = FORMAT_EMBEDDED_FILES;\n        buffered.forEach((x, i) => {\n            var val = x.buffer;\n            all_buffers.push(val);\n            buffered[i].buffer = { \"offset\": total_len, \"size\": val.byteLength };\n            total_len += val.byteLength;\n        });\n\n    } else if (mode == \"KanaDB\") {\n        // Saving the files to IndexedDB instead. 'all_buffers' now holds a promise\n        // indicating whether all of these things were saved properly.\n        format_type = FORMAT_EXTERNAL_KANADB;\n        for (const x of buffered) {\n            var md5 = await hashwasm.md5(new Uint8Array(x.buffer));\n            var id = x.type + \"_\" + x.name + \"_\" + x.buffer.byteLength + \"_\" + md5;\n            var ok = await kana_db.saveFile(id, x.buffer);\n            if (!ok) {\n                throw \"failed to save file '\" + id + \"' to KanaDB\";\n            }\n            x.buffer = id;\n            all_buffers.push(id);\n        }\n\n    } else {\n        throw \"unsupported mode \" + mode;\n    }\n\n    // Converting all other TypedArrays to normal arrays.\n    contents = normalizeTypedArrays(contents);\n\n    // Converting the JSON to a string and gzipping it into a Uint8Array.\n    var json_str = JSON.stringify(contents);\n    const json_view = pako.gzip(json_str);\n\n    // Allocating a huge arrayBuffer.\n    var combined = new ArrayBuffer(24 + json_view.length + total_len);\n    var combined_arr = new Uint8Array(combined);\n    var offset = 0;\n\n    let format = numberToBuffer(format_type);\n    combined_arr.set(format, offset); \n    offset += format.length;\n\n    let version = numberToBuffer(FORMAT_VERSION);\n    combined_arr.set(version, offset); \n    offset += version.length;\n\n    let json_len = numberToBuffer(json_view.length);\n    combined_arr.set(json_len, offset); \n    offset += json_len.length;\n\n    if (offset != 24) {\n        throw \"oops - accounting error in the serialization code!\";\n    }\n\n    combined_arr.set(json_view, offset);\n    offset += json_view.length;\n\n    if (mode == \"full\") {\n        for (const buf of all_buffers) {\n            const tmp = new Uint8Array(buf);\n            combined_arr.set(tmp, offset);\n            offset += tmp.length;\n        }\n        return combined;\n\n    } else if (mode == \"KanaDB\") {\n        return { \"file_ids\": all_buffers, \"state\": combined };\n\n    } else {\n        throw \"unsupported mode \" + mode;\n    }\n}\n\nexport async function load(buffer) {\n    var offset = 0;\n    var format = bufferToNumber(new Uint8Array(buffer, offset, 8));\n    offset += 8;\n\n    var version = bufferToNumber(new Uint8Array(buffer, offset, 8));\n    offset += 8;\n\n    var json_len = bufferToNumber(new Uint8Array(buffer, offset, 8));\n    offset += 8;\n\n    var contents = pako.ungzip(new Uint8Array(buffer, offset, json_len), { \"to\": \"string\" });\n    contents = JSON.parse(contents);\n    contents = recoverTypedArrays(contents);\n    offset += json_len;\n\n    var buffered = contents.inputs.parameters.files;\n    if (format == FORMAT_EMBEDDED_FILES) {\n        buffered.forEach((x, i) => {\n            var details = x.buffer;\n            var target = new Uint8Array(buffer, offset + details.offset, details.size);\n            var tmp = new ArrayBuffer(details.size);\n            (new Uint8Array(tmp)).set(target);\n            buffered[i].buffer = tmp;\n        });\n\n    } else if (format == FORMAT_EXTERNAL_KANADB) {\n        var collected = [];\n        buffered.forEach((x, i) => {\n            var id = x.buffer;\n            collected.push(kana_db.loadFile(id));\n        });\n  \n        var resolved = await Promise.all(collected);\n        buffered.forEach((x, i) => {\n            if (resolved[i] === null) {\n                throw \"KanaDB loading failed for file ID '\" + x.buffer + \"'\";\n            }\n            x.buffer = resolved[i];\n        });\n\n    } else {\n        throw \"unsupported format type\";\n    }\n \n    return contents;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [84,555], function() { return __webpack_require__(7729); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + {\"84\":\"f92b34e4\",\"139\":\"34837514\",\"495\":\"106f14fa\",\"555\":\"00b48dc3\",\"653\":\"8b6d9e71\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/kana/\";","__webpack_require__.b = self.location + \"/../../../\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t729: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkkana\"] = self[\"webpackChunkkana\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn Promise.all([\n\t\t__webpack_require__.e(84),\n\t\t__webpack_require__.e(555)\n\t]).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["freeCache","object","undefined","free","e","freeReloaded","cache","Object","entries","reloaded","v","scran","changedParameters","x","y","JSON","stringify","computeRange","arr","max","Infinity","min","forEach","allocateCachedArray","size","type","name","reallocate","candidate","constructor","className","extractBuffers","store","Array","isArray","ArrayBuffer","isView","buffer","push","isObject","parameters","abbreviated","changed","permuteGenes","genes","buf","matrix","numberOfRows","permutation","perm","array","key","val","copy","slice","i","length","dummyGenes","numberOfRowss","readDSVFromBuffer","content","fname","delim","ext","split","pop","pako","dec","TextDecoder","decoded","decode","tsv","d3","parsed","parseRows","loadMatrixMarketRaw","files","utils","first_mtx","filter","contents","Uint8Array","is_compressed","genes_file","ids","symb","annotations_file","diff","numberOfColumns","headerFlag","headers","shift","annotations","map","load10XRaw","first_file","tmppath","objects","fobjects","id","names","loadH5ADRaw","vobjects","match","bobjects","bobj_factors","bobj_index","loadHDF5","args","format","reader","FileReaderSync","it","bufferFun","formatted","f","readAsArrayBuffer","file","compute","mtx","gene","barcode","loadMatrixMarket","results","output","fetchDimensions","keys","serialize","num_cells","parameters2","unserialize","saved","fetchCountMatrix","values","fetchGenes","fetchAnnotations","col","annots","asize","uvals","uTypedAray","mito","ensembl","Set","symbol","rawCompute","raw","subsets","mat","inputs","fill","gene_info","sub_arr","use_mito_default","has","lower_mito","mito_prefix","toLowerCase","startsWith","fetchResults","data","qc_output","sums","detected","proportion","subsetProportions","ranges","fetchQCMetrics","fetchSums","unsafe","metrics","stats","numberOfMADs","nmads","obj","thresholdsSums","thresholdsDetected","thresholdsSubsetProportions","discards","fetchDiscards","tmp","set","fetchDiscardsAsWasmArray","discardOverall","byteOffset","out","disc","thresholds","fetchRetained","retained","fetchFilteredMatrix","size_factors","j","sizeFactors","fetchNormalizedMatrix","fetchExpression","index","row","normalization","span","sorted_residuals","residuals","sort","means","vars","fitted","resids","model_output","variances","spawnStats","fetchSortedResiduals","fetchResiduals","fetchPCsAsWasmArray","pcs","principalComponents","variance","sorted_resids","threshold_at","num_hvgs","sub","unsorted_resids","element","features","numberOfPCs","num_pcs","var_exp","pca_output","varianceExplained","total_var","totalVariance","to_save","fetchPCs","pca","numberOfDims","numberOfCells","num_obs","fetchIndex","nn_index","k","method","cluster_method","fetchNeighbors","res","neighbors","scheme","fetchGraph","fetchClustersAsWasmArray","clusters","membership","graph","g","resolution","snn_cluster","kmeans_cluster","computeNeighbors","rbuf","ibuf","dbuf","runs","indices","distances","sendTask","worker","payload","transferrable","counter","p","Promise","resolve","reject","promises","postMessage","initializeWorker","onmessage","msg","endsWith","iteration","fun","error","runWithNeighbors","nn_out","run_msg","retrieveCoordinates","run","then","initialize","vizutils","Worker","URL","core","reneighbor","perplexity","animate","param_copy","initialized","num_neighbors","serializeGroupStats","group","lfc","summary","deltaDetected","cohen","auc","fetchGroupResults","rank_type","ordering","ranking","use_reloaded","increasing","effect","Int32Array","s","stat_detected","stat_mean","stat_lfc","stat_delta_d","reorder","thing","Float64Array","current","delta_detected","choice","num","numberOfGroups","markers","kanaDB","selections","addSelection","selection","removeSelection","init","getRecordsResolver","result","transaction","objectStore","allAnalysis","getAll","onsuccess","vals","onerror","loadContent","request","get","allOK","allSettled","getRecords","saveFile","trans","file_store","meta_store","meta","refcount","data_saving","putrequest","put","event","ref_saving","count","saveAnalysis","state","title","analysis_store","already","String","id_saving","Number","Date","loadFile","removeFile","remove","delete","loaded","normalizeTypedArrays","from","recoverTypedArrays","cls","Int8Array","Uint16Array","Int16Array","Uint32Array","Uint64Array","Int64Array","Float32Array","numberToBuffer","number","Math","floor","bufferToNumber","multiplier","save","mode","buffered","all_buffers","total_len","format_type","byteLength","hashwasm","md5","kana_db","json_str","json_view","combined","combined_arr","offset","version","json_len","load","parse","details","target","collected","all","resolved","postSuccess_","info","step","message","transferable","resp","runAllSteps","response","console","log","postSuccess","namespace","postSuccessAsync","addSerialized","value","addParameters","remapped","params","qc","fSelection","tsne_res","cluster","approximate","umap_res","tsne","iterations","umap","num_epochs","min_dist","snn_neighbors","snn_graph","cluster_choice","cluster_markers","custom_markers","done","nthreads","round","navigator","hardwareConcurrency","scran_init","numberOfThreads","kana_init","indexedDB","open","onupgradeneeded","kanaDBClient","deleteObjectStore","createObjectStore","keyPath","tsne_init","umap_init","catch","toString","serialize_utils","file_ids","recs","row_idx","vec","expr","annot","annotation","factor","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","fulfilled","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","chunkId","reduce","u","miniCssF","globalThis","this","Function","window","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","b","self","location","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","next"],"sourceRoot":""}