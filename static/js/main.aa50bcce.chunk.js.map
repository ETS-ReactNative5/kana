{"version":3,"sources":["context/AppContext.js","components/Analysis/index.js","components/Stats/index.js","components/Logs/index.js","components/Intro/index.js","components/Header/index.js","components/Plots/utils.js","components/Plots/BarPlot.js","components/Plots/PCABarPlot.js","components/Plots/ClusterBarPlot.js","components/Plots/ViolinPlotBasic.js","components/Plots/QCPlotMgr.js","components/Plots/ImgPlot.js","components/Gallery/index.js","components/Spinners/AppToaster.js","components/Plots/rainbowvis.js","components/Plots/DimPlot.js","components/Plots/StackedHistogram.js","components/Plots/Cell.js","components/Plots/HeatmapCell.js","components/Markers/index.js","components/Spinners/Pong.js","components/Spinners/Spinner2.js","App.js","reportWebVitals.js","index.js"],"names":["AppContext","createContext","AppContextProvider","children","useState","format","files","inputFiles","setInputFiles","qc","fSelection","pca","cluster","tsne","umap","markerGene","params","setParams","tabSelected","setTabSelected","loadParams","setLoadParams","loadParamsFor","setLoadParamsFor","datasetName","setDatasetName","initLoadState","setInitLoadState","wasmInitialized","setWasmInitialized","error","setError","genesInfo","setGenesInfo","geneColSel","setGeneColSel","useEffect","window","scranWorker","postMessage","reset","Provider","value","React","memo","AnalysisDialog","buttonText","includeFooter","props","isOpen","setIsOpen","showStepHelper","setShowStepHelper","handleButtonClick","useCallback","handleClose","useContext","gene","mtx","barcode","tmpInputFiles","setTmpInputFiles","inputText","setInputText","tmpInputValid","setTmpInputValid","newImportFormat","setNewImportFormat","loadImportFormat","setLoadImportFormat","tmpInputParams","setTmpInputParams","handleNewImportTab","currTab","prevTab","file","parseKanaDate","x","d","Date","toDateString","toLocaleTimeString","openInput","kanaIDBRecs","length","id","toLowerCase","endsWith","get_common_tooltips","intent","target","href","get_input_qc","className","round","onMouseEnter","placeholder","onValueChange","nval","val","style","marginTop","large","checked","innerLabelChecked","innerLabel","onChange","e","leftIcon","get_input_fsel","get_input_pca","get_input_clus","defaultValue","parseInt","currentTarget","stepSize","get_input_tsne","get_input_umap","content","position","Position","BOTTOM","onClick","icon","text","onClose","Classes","DIALOG_BODY","animate","renderActiveTabPanelOnly","vertical","defaultSelectedTabId","title","panel","paddingBottom","onInputChange","msg","name","marginBottom","selectedValue","map","i","display","flexDirection","alignItems","label","time","size","alignSelf","paddingTop","paddingLeft","setDeletekdb","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","disabled","Number","split","margin","Stats","initDims","qcDims","Logs","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","hasBackdrop","RIGHT","undefined","usePortal","state","setState","outlined","DRAWER_BODY","logs","IntroDialog","showClose","setShowClose","elevation","Elevation","ZERO","setOpenInput","Header","shouldReturnFocusOnClose","align","Alignment","LEFT","setKanaIDBRecs","deletekdb","onConfirm","setIndexedDBState","setExportState","placement","rightIcon","Intro","saveSVG","svgNode","width","height","filename","svgString","setAttribute","cssText","element","styleElement","document","createElement","innerHTML","refNode","hasChildNodes","insertBefore","appendCSS","parentElement","selectorTextArr","push","c","classList","contains","nodes","getElementsByTagName","classes","extractedCSSText","styleSheets","s","cssRules","r","selectorText","str","arr","indexOf","getCSSStyles","XMLSerializer","serializeToString","replace","serialize","imgsrc","btoa","unescape","encodeURIComponent","canvas","context","getContext","image","Image","onload","clearRect","drawImage","dataBlob","toDataURL","tmpLink","download","click","src","BarPlot","container","useRef","data","propwidth","color","ymax","Math","max","containerEl","current","querySelector","svg","d3","append","attr","range","domain","key","padding","call","selectAll","y","enter","bandwidth","Array","isArray","small","node","ref","PCABarPlot","var_exp","chart_data","Object","values","forEach","ClusterBarPlot","chartData","setChartData","clusters","clus","z","clusterColors","join","ViolinPlotBasic","rdata","transform","dataTransform","threshold","log2","nice","tickFormat","pow","showLabel","bins","thresholds","ticks","histogram","max_bin","xNum","datum","x0","x1","curve","on","lines","this","QCPlotMgr","qcData","setQCData","props2","ImgPlot","setTitle","propheight","containerEL","ctx","img","config","embedding","highlight","String","startsWith","Gallery","ONE","pcaVarExp","clusterData","savedPlot","AppToaster","Toaster","create","TOP_RIGHT","maxToasts","Rainbow","gradients","minNum","maxNum","colours","setColours","spectrum","Error","increment","firstGradient","ColourGradient","setGradient","setNumberRange","colourGradient","setSpectrum","arguments","setSpectrumByArray","array","colourAt","number","isNaN","TypeError","segment","index","min","floor","colorAt","minNumber","maxNumber","RangeError","startColour","endColour","calcHex","channelStart_Base16","channelEnd_Base16","num","hex","numRange","cStart_Base10","cPerUnit","c_Base10","toString","getHexColour","string","test","isHexColour","substring","colourNames","hasOwnProperty","colourStart","colourEnd","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","DimPlot","scatterplot","setScatterplot","clusHighlight","setClusHighlight","showGradient","setShowGradient","exprMinMax","setExprMinMax","sliderMinMax","setSliderMinMax","gradient","renderCount","setRenderCount","selectedPoints","setSelectedPoints","plotMode","setPlotMode","selectedClusterIndex","expr","selectedClusterSummary","MAX_VALUE","getMinMax","tmpgradient","show","message","tmp_scatterplot","ScatterGL","onSelect","points","orbitControls","zoomSpeed","styles","point","scaleDefault","scaleSelected","scaleHover","setPanMode","showAnimation","animateData","defaultRedDims","tsneData","umapData","cluster_mappings","cluster_colors","metadata","dataset","Dataset","render","updateDataset","setPointColorer","selectedIndices","hoverIndex","has","customSelection","includes","tmpclus","setInteraction","setSelectMode","minWidth","minHeight","fill","minimal","redDims","setDefaultRedDims","marginRight","setShowAnimation","setTriggerAnimation","console","log","renderScatterPlot","iData","scatterPlot","renderer","domElement","tmp","selectedCluster","setSavedPlot","active","iteration","keys","tmpSel","setCustomSelection","tmpcolors","slice","setClusterColors","setDelCustomSelection","randomColor","luminosity","count","tmpcolor","cid","tmpSelection","select","onRemove","setGene","openOnTargetFocus","backgroundImage","labelValues","StackedHistogram","clusterlabel","tickValues","allCells","filter","clusterCells","allCellsMax","clusterCellsMax","t","Cell","minmax","score","colorscale","colorscore","percWidth","border","backgroundColor","HeatmapCell","lower","upper","limit","detectedScale","MarkerPlot","clusSel","setClusSel","clusArrayStacked","setClusArrayStacked","searchInput","setSearchInput","meanMinMax","setMeanMinMax","deltaMinMax","setDeltaMinMax","lfcMinMax","setLfcMinMax","detectedMinMax","setDetectedMinMax","minMaxs","setMinMaxs","markerFilter","setMarkerFilter","prosRecords","setProsRecords","trecs","tmpmeans","mean","tmeanMinMax","tmeanval","parseFloat","toFixed","tmpdeltas","delta","tdeltaMinMax","tdeltaval","tmplfcs","lfc","tlfcsMinMax","tlfcsval","tmpdetects","detected","tdetectsMinMax","tdetecval","sortedRows","useMemo","max_clusters","concat","setSelectedCluster","clusArray","handleMarkerFilter","createColorScale","scaler","leftcol","rightcol","midprop","popoverClassName","POPOVER2_CONTENT_SIZING","interactionKind","hoverOpenDelay","modifiers","arrow","enabled","flip","preventOverflow","textDecoration","cursor","tmpselection","type","paddingRight","setClusterRank","components","Item","totalCount","itemContent","row","rowexp","expanded","rowExpr","scope","fontStyle","gindex","setSelectedClusterSummary","setReqGene","abs","Pong","elem","DIRECTION","rounds","colors","Ball","new","incrementedSpeed","moveX","moveY","speed","Paddle","side","move","Game","initialize","player","paddle","ball","running","over","turn","timer","menu","listen","endGameMenu","font","fillStyle","fillRect","fillText","setTimeout","assign","draw","update","_resetTurn","_turnDelayIsOver","random","_generateRoundColor","beginPath","setLineDash","moveTo","lineTo","lineWidth","strokeStyle","stroke","textAlign","loop","requestAnimationFrame","addEventListener","keyCode","victor","loser","getTime","newColor","Spinner2","App","loading","setLoading","setAnimateData","showGame","setShowGame","exportState","indexedDBState","setInitDims","setQcDims","setLogs","setQcData","setFSelectionData","setRedDims","setTsneData","setUmapData","triggerAnimation","setPcaVarExp","setSelectedClusterIndex","clusterRank","setClusterData","delCustomSelection","reqGene","scranError","setScranError","palette","csLen","cs","payload","onmessage","getHours","getMinutes","getSeconds","resp","dimensions","num_genes","num_cells","genes","retained","cluster_count","records","ordering","means","delta_detected","fileNew","Blob","URL","createObjectURL","justifyContent","useTallContent","canEscapeKeyCancel","canOutsideClickCancel","confirmButtonText","location","reload","toUpperCase","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.aa50bcce.chunk.js","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\n\nexport const AppContext = createContext(null);\n\nconst AppContextProvider = ({ children }) => {\n  // Input State\n  const [inputFiles, setInputFiles] = useState({\n    format: null,\n    files: null\n  });\n\n  // default params \n  const [params, setParams] = useState({\n    qc: {\n      \"qc-nmads\": 3,\n      \"qc-usemitodefault\": true,\n      \"qc-mito\": \"mt-\"\n    },\n    fSelection: {\n      \"fsel-span\": 0.3\n    },\n    pca: {\n      \"pca-npc\": 25,\n      \"pca-hvg\": 2500,\n    },\n    cluster: {\n      \"clus-k\": 10,\n      \"clus-res\": 0.5,\n      \"clus-scheme\": 0,\n      \"clus-approx\": true,\n      \"clus-method\": \"snn_graph\",\n    },\n    tsne: {\n      \"tsne-iter\": 500,\n      \"tsne-perp\": 30,\n      \"animate\": false,\n    },\n    umap: {\n      \"umap-nn\": 15,\n      \"umap-epochs\": 500,\n      \"umap-min_dist\": 0.01,\n      \"animate\": false,\n    },\n    markerGene: {}\n  });\n\n  // which tab is selected ? defaults to new\n  const [tabSelected, setTabSelected] = useState(\"new\");\n  // params from worker for stored analysis (kana file)\n  const [loadParams, setLoadParams] = useState(null);\n  // kana file or db ?\n  const [loadParamsFor, setLoadParamsFor] = useState(null);\n\n  // creates a default dataset name\n  const [datasetName, setDatasetName] = useState(\"My Analysis Title\");\n\n  // app export state - params loading first time ?\n  const [initLoadState, setInitLoadState] = useState(false);\n\n  // wasm state and error \n  const [wasmInitialized, setWasmInitialized] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Response State for various components - these are state that are spread \n  // allover the app so its better they are at the context level\n  // Gene details \n  const [genesInfo, setGenesInfo] = useState(null);\n  // default column to show in markers table\n  const [geneColSel, setGeneColSel] = useState(\"id\");\n\n  useEffect(() => {\n\n    if (wasmInitialized && inputFiles.files != null && !initLoadState) {\n      if (tabSelected === \"new\") {\n        window.scranWorker.postMessage({\n          \"type\": \"RUN\",\n          \"payload\": {\n            \"files\": inputFiles,\n            \"params\": params\n          },\n          \"msg\": \"not much to pass\"\n        });\n      } else if (tabSelected === \"load\") {\n        if (loadParams == null || inputFiles?.reset) {\n          window.scranWorker.postMessage({\n            \"type\": \"LOAD\",\n            \"payload\": {\n              \"files\": inputFiles\n            },\n            \"msg\": \"not much to pass\"\n          });\n        } else {\n          window.scranWorker.postMessage({\n            \"type\": \"RUN\",\n            \"payload\": {\n              \"files\": inputFiles,\n              \"params\": params\n            },\n            \"msg\": \"not much to pass\"\n          });\n        }\n        setInitLoadState(true);\n      }\n    }\n  }, [inputFiles, params, wasmInitialized]);\n\n  return (\n    <AppContext.Provider\n      value={{\n        inputFiles, setInputFiles,\n        params, setParams,\n        error, setError,\n        wasmInitialized, setWasmInitialized,\n        genesInfo, setGenesInfo,\n        datasetName, setDatasetName,\n        tabSelected, setTabSelected,\n        loadParams, setLoadParams,\n        geneColSel, setGeneColSel,\n        initLoadState, setInitLoadState,\n        loadParamsFor, setLoadParamsFor\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport default React.memo(AppContextProvider);\n","import {\n    Button, Classes, Dialog, Text, FileInput, NumericInput,\n    Label, H5, Tag, HTMLSelect, Switch, Callout, Tabs, Tab,\n    RadioGroup, Radio, Icon, Position,\n    InputGroup\n} from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport React, { useContext, useState, useCallback, useEffect } from \"react\";\n\nimport { AppContext } from \"../../context/AppContext\";\nimport \"./Analysis.css\";\n\nconst AnalysisDialog =({\n    buttonText,\n    includeFooter,\n    ...props\n}) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [showStepHelper, setShowStepHelper] = useState(1);\n    const handleButtonClick = useCallback(() => setIsOpen(!isOpen), [isOpen]);\n    const handleClose = useCallback(() => setIsOpen(false), []);\n\n    const { inputFiles, setInputFiles,\n        params, setParams,\n        tabSelected, setTabSelected,\n        loadParams,\n        setLoadParamsFor, loadParamsFor, setDatasetName } = useContext(AppContext);\n\n    // assuming new is the default tab\n    let [tmpInputFiles, setTmpInputFiles] = useState({\n        gene: null,\n        mtx: null,\n        barcode: null,\n    });\n\n    const [inputText, setInputText] = useState({\n        mtx: \"Choose Matrix Market file\",\n        gene: \"Choose feature/gene annotation\",\n        barcode: \"Choose barcode annotation\",\n    });\n\n    let [tmpInputValid, setTmpInputValid] = useState(true);\n\n    const [newImportFormat, setNewImportFormat] = useState(\"mtx\");\n    const [loadImportFormat, setLoadImportFormat] = useState(\"kana\");\n    // const [hdfFormat, sethdfFormat] = useState(\"tenx\");\n\n    let [tmpInputParams, setTmpInputParams] = useState(tabSelected === \"new\" ? params : loadParams);\n\n    function handleImport() {\n        // convert cluster res to number\n        tmpInputParams[\"cluster\"][\"clus-res\"] = Number(tmpInputParams[\"cluster\"][\"clus-res\"])\n        setParams(tmpInputParams);\n\n        if (tabSelected === \"load\") {\n            if (loadImportFormat === \"kanadb\") {\n                setDatasetName(props?.kanaIDBRecs[parseInt(tmpInputFiles?.file)]?.title);\n            } else {\n                setDatasetName(tmpInputFiles?.file?.[0]?.name.split(\".\")[0]);\n            }\n        }\n\n        // if (tabSelected === \"load\") {\n        //     // setLoadParams(tmpInputParams);\n        // }\n        setInputFiles({\n            \"format\": tabSelected === \"new\" ?\n                newImportFormat : loadImportFormat,\n            \"files\": tmpInputFiles,\n            \"reset\": tabSelected === \"new\" ? false : tmpInputFiles?.file !== inputFiles?.files?.file\n        });\n\n        setLoadParamsFor(tabSelected === \"new\" ?\n            newImportFormat : loadImportFormat);\n\n        handleClose();\n    }\n\n    function handleTabInput(currTab, prevTab) {\n        if (currTab === \"new\") {\n            handleNewImportTab(newImportFormat);\n        } else if (currTab === \"load\") {\n\n        }\n        setTabSelected(currTab);\n        setShowStepHelper(0);\n    }\n\n    function handleNewImportTab(currTab, prevTab) {\n        if (currTab === \"mtx\") {\n            setTmpInputFiles({\n                gene: null,\n                mtx: null,\n                barcode: null,\n            });\n\n            setInputText({\n                mtx: \"Choose Matrix Market file\",\n                gene: \"Choose gene annotation\",\n                barcode: \"Choose barcode annotation\",\n            });\n        } else if (currTab === \"tenx\") {\n\n            setTmpInputFiles({\n                file: null,\n            });\n\n            setInputText({\n                file: \"Choose 10x HDF5 matrix file\",\n            });\n        } else if (currTab === \"h5ad\") {\n            setTmpInputFiles({\n                file: null,\n            });\n\n            setInputText({\n                file: \"Choose H5AD file\",\n            });\n        }\n\n        setTmpInputParams(params);\n        setNewImportFormat(currTab);\n    }\n\n    function handleLoadImportTab(currTab, prevTab) {\n        if (currTab === \"kana\") {\n            setTmpInputFiles({\n                file: null\n            });\n\n            setInputText({\n                file: \"Choose kana analysis file\"\n            });\n\n\n        } else if (currTab === \"kanadb\") {\n            setTmpInputFiles({\n                file: null\n            });\n\n            setTmpInputValid(true);\n        }\n\n        if (loadParams) {\n            setTmpInputParams(loadParams);\n        }\n        setLoadImportFormat(currTab);\n    }\n\n    useEffect(() => {\n        props?.openInput && setIsOpen(true);\n    }, [props?.openInput]);\n\n    useEffect(() => {\n        if (loadParams && tabSelected === \"load\") {\n            setTmpInputParams(loadParams);\n        }\n    }, [loadParams]);\n\n    useEffect(() => {\n        if (tabSelected === \"load\" && loadImportFormat === \"kanadb\"\n            && tmpInputFiles?.file === null && props?.kanaIDBRecs.length > 0) {\n            setTmpInputFiles({\n                file: props?.kanaIDBRecs[0].id\n            });\n        }\n    }, [props?.kanaIDBRecs, loadImportFormat]);\n\n    useEffect(() => {\n        if (tmpInputFiles) {\n            if (tabSelected === \"new\") {\n                if (newImportFormat === \"mtx\") {\n                    if (\n                        (tmpInputFiles?.mtx && !(inputText?.mtx.toLowerCase().endsWith(\"mtx\") ||\n                            inputText?.mtx.toLowerCase().endsWith(\"mtx.gz\")\n                        )) ||\n                        (tmpInputFiles?.gene && !(inputText?.gene.toLowerCase().endsWith(\"tsv\") ||\n                            inputText?.gene.toLowerCase().endsWith(\"tsv.gz\")\n                        )) ||\n                        (tmpInputFiles?.barcode && !(inputText?.barcode.toLowerCase().endsWith(\"tsv\") ||\n                            inputText?.barcode.toLowerCase().endsWith(\"tsv.gz\")\n                        ))\n                    ) {\n                        setTmpInputValid(false);\n                    } else {\n                        setTmpInputValid(true);\n                    }\n                } else if (newImportFormat === \"tenx\" || newImportFormat === \"h5ad\") {\n                    if (\n                        tmpInputFiles?.file && !(\n                            inputText?.file.toLowerCase().endsWith(\"hdf5\") ||\n                            inputText?.file.toLowerCase().endsWith(\"h5\") ||\n                            inputText?.file.toLowerCase().endsWith(\"h5ad\")\n                        )\n                    ) {\n                        setTmpInputValid(false);\n                    } else {\n                        setTmpInputValid(true);\n                    }\n                }\n\n            } else if (tabSelected === \"load\" && inputText?.file) {\n                if (loadImportFormat === \"kana\" &&\n                    tmpInputFiles?.file != null && !(inputText?.file.toLowerCase().endsWith(\"kana\")\n                    )\n                ) {\n                    setTmpInputValid(false);\n                } else {\n                    setTmpInputValid(true);\n                }\n            }\n        }\n    }, [tmpInputFiles]);\n\n    function parseKanaDate(x) {\n        let d = new Date(x);\n        return d.toDateString() + \", \" + d.toLocaleTimeString(); \n    }\n\n    const get_common_tooltips = () => {\n        return (\n            <>\n                {showStepHelper === 2 &&\n                    <Callout intent=\"primary\">\n                        <p>\n                            Remove low-quality cells to ensure that they do not interfere with downstream steps.\n                            This is achieved by computing per-cell quality control (QC) metrics such as the total count per cell,\n                            the total number of detected features and (if the feature annotation is supplied) the mitochondrial proportion in each cell.\n                            Cells with low total counts/number of detected features or high mitochondrial proportions are filtered out.\n                            We use an outlier-based approach to define the filter threshold for each metric,\n                            under the assumption that most cells in the dataset are of acceptable quality.\n                        </p>\n                        <p>\n                            <strong>Number of MADs</strong>:\n                            Number of median absolute deviations (MADs) from the median,\n                            used to define a filter threshold in the appropriate direction for each QC metric.\n                            Increasing this value will reduce the stringency of the filtering.\n                        </p>\n                        <p>\n                            <strong>Use default mitochondrial list</strong>:\n                            Should we identify mitochondrial genes in the dataset based on the <a target=\"_blank\" href=\"https://github.com/jkanche/kana/blob/master/public/scran/mito.js\"><strong>in-built list of Ensembl identifiers and gene symbols for mitochondrial genes in human and mouse genomes?</strong></a>\n                            This assumes that the dataset contains feature annotation with Ensembl identifiers or gene symbols.\n                        </p>\n                        <p>\n                            <strong>Mitochondrial gene prefix</strong>:\n                            Prefix to use to identify the mitochondrial genes from the feature annotation.\n                            Only used if we choose to not use the default mitochondrial list.\n                        </p>\n                    </Callout>\n                }\n                {showStepHelper === 3 &&\n                    <Callout intent=\"primary\">\n                        <p>\n                            Identify highly variable genes (HVGs) while accounting for the mean-variance relationship.\n                            We do so by fitting a mean-dependent trend to the variances computed from the log-transformed normalized expression values.\n                            HVGs are defined as those genes with the largest positive residuals from the trend, as these are more variable than expected from the trend.\n                            The aim is to only use the HVGs in some downstream steps like the principal components analysis,\n                            thereby improving computational efficiency and reducing uninteresting technical noise.\n                        </p>\n                        <p>\n                            <strong>Lowess span</strong>:\n                            The span of the LOWESS smoother for fitting the mean-variance trend.\n                            Larger values increase the smoothness of the global trend at the\n                            cost of decreasing sensitivity to local variations.\n                        </p>\n                    </Callout>\n                }\n                {showStepHelper === 4 &&\n                    <Callout intent=\"primary\">\n                        <p>\n                            Perform a principal components analysis (PCA) to obtain per-cell coordinates in a low-dimensional space.\n                            Specifically, we obtain a compact representation of the dataset by only taking the top principal components (PCs) that explain the largest variance.\n                            This improves the efficiency of downstream steps as we only have to perform calculations on a few (usually 10-50) PCs rather than the thousands of gene expression profiles.\n                            It also has the advantage of removing uninteresting high-dimensional noise by discarding the later PCs.\n                            This ensures that downstream steps focus on the largest factors of variation that - hopefully - correspond to biologically interesting heterogeneity.\n                        </p>\n                        <p>\n                            <strong>Number of HVGs</strong>:\n                            Number of highly variable genes to use to perform the PCA. Larger values\n                            will capture more biological signal at the cost of increasing\n                            noise and computational work.\n                        </p>\n                        <p>\n                            <strong>Number of PCs</strong>:\n                            Number of principal components with the highest variance\n                            to retain in downstream analyses. Larger values will capture\n                            more biological signal at the cost of increasing noise and\n                            computational work.\n                        </p>\n                    </Callout>\n                }\n                {showStepHelper === 5 &&\n                    <Callout intent=\"primary\">\n                        <p>\n                            Cluster cells into discrete groupings based on their relative similarity in the low-dimensional PC space.\n                            The set of clusters should be treated as a summary of the cellular heterogeneity in the population,\n                            allowing us to easily perform further characterization on subpopulations of interest, e.g., with marker detection.\n                            Different clustering methods or parameters may provide different perspectives on the population structure in the dataset.\n                        </p>\n                        <p>\n                            <strong>Method</strong>:\n                            Clustering algorithm to use.\n                            Currently, we only support multi-level community detection on an shared nearest neighbor (SNN) graph,\n                            where cells are the nodes and edges are created between neighboring cells.\n                        </p>\n                        <p>\n                            <strong>Number of neighbors</strong>:\n                            Number of neighbors to use to construct the SNN graph.\n                            Larger values result in broader clusters.\n                        </p>\n                        <p>\n                            <strong>Use ANN</strong>:\n                            Use an approximate method to speed up the nearest neighbor search.\n                            This sacrifices some accuracy for speed in larger datasets.\n                        </p>\n                        <p>\n                            <strong>Weighting scheme</strong>:\n                            Weighting scheme to use for the edges of the SNN graph.\n                            The <em>Rank</em> approach derives a weight from the rank of the closest shared neighbor;\n                            the <em>Number</em> approach uses the number of shared neighbors;\n                            and the Jaccard approach uses the <em>Jaccard</em> index of the neighbor sets.\n                        </p>\n                        <p>\n                            <strong>Resolution</strong>:\n                            Resolution parameter for the multi-level clustering, used to adjust the modularity calculation during community optimization.\n                            Larger values yield more fine-grained clusters.\n                        </p>\n                    </Callout>\n                }\n                {showStepHelper === 6 &&\n                    <Callout intent=\"primary\">\n                        <p>\n                            Compute a t-SNE to visualize cells in two dimensions,\n                            because our feeble human minds cannot interpret high-dimensional spaces.\n                            Neighboring cells in the PC space are kept adjacent in the 2D embedding,\n                            while dissimilar cells are placed (arbitrarily) far away.\n                        </p>\n                        <p>\n                            <strong>Perplexity</strong>:\n                            Perplexity parameter, which determines the size of the neighborhood of each cell.\n                            Larger values will favor preservation of global structure in the 2D embedding.\n                        </p>\n                        <p>\n                            <strong>Iterations</strong>:\n                            Number of t-SNE iterations.\n                            Doesn't usually have much of an effect if you leave it as it is.\n                        </p>\n                    </Callout>\n                }\n                {showStepHelper === 7 &&\n                    <Callout intent=\"primary\">\n                        <p>\n                            Create a UMAP plot to visualize cells in two dimensions.\n                            Like the t-SNE, this aims to map cells from a high-dimensional space into a 2D embedding,\n                            where neighboring cells are kept close together and dissimilar cells are placed far apart.\n                        </p>\n                        <p>\n                            <strong>Number of neighbors</strong>:\n                            Number of neighbors to use when defining the size of the local neighborhood.\n                            Larger values will favor preservation of global structure.\n                        </p>\n                        <p>\n                            <strong>Minimum distance</strong>:\n                            Minimum distance between points.\n                            Smaller values result in a more tightly packed embedding and favor local structure.\n                        </p>\n                        <p>\n                            <strong>Epochs</strong>:\n                            Number of epochs to use for convergence.\n                            This doesn't really change all too much in the results.\n                        </p>\n                    </Callout>\n                }\n            </>\n        )\n    }\n\n    const get_input_qc = () => {\n        return (\n            <div className=\"col\">\n                <div>\n                    <H5><Tag round={true}>2</Tag>\n                        <span className=\"row-tooltip\"\n                            onMouseEnter={() => setShowStepHelper(2)}>\n                            Quality control\n                        </span>\n                    </H5>\n                    <div className=\"row\">\n                        <Label className=\"row-input\">\n                            <Text className=\"text-100\">\n                                <span className=\"row-tooltip\"\n                                    onMouseEnter={() => setShowStepHelper(2)}>\n                                    Number of MADs\n                                </span>\n                            </Text>\n                            <NumericInput\n                                placeholder=\"3\" value={tmpInputParams[\"qc\"][\"qc-nmads\"]}\n                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"qc\": { ...tmpInputParams[\"qc\"], \"qc-nmads\": nval } }) }} />\n                        </Label>\n                        <Label className=\"row-input\">\n                            <Text className=\"text-100\">\n                                <span className=\"row-tooltip\"\n                                    onMouseEnter={() => setShowStepHelper(2)}>\n                                    Use default mitochondrial list ?\n                                </span>\n                            </Text>\n                            <Switch style={{ marginTop: '10px' }} large={true} checked={tmpInputParams[\"qc\"][\"qc-usemitodefault\"]}\n                                innerLabelChecked=\"yes\" innerLabel=\"no\"\n                                onChange={(e) => { setTmpInputParams({ ...tmpInputParams, \"qc\": { ...tmpInputParams[\"qc\"], \"qc-usemitodefault\": e.target.checked } }) }} />\n                        </Label>\n                        {!tmpInputParams[\"qc\"][\"qc-usemitodefault\"] && <Label className=\"row-input\">\n                            <Text className=\"text-100\">\n                                <span className=\"row-tooltip\"\n                                    onMouseEnter={() => setShowStepHelper(2)}>\n                                    Mitochondrial gene prefix\n                                </span>\n                            </Text>\n                            <InputGroup\n                                leftIcon=\"filter\"\n                                onChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"qc\": { ...tmpInputParams[\"qc\"], \"qc-mito\": nval?.target?.value } }) }}\n                                placeholder=\"mt-\"\n                                value={tmpInputParams[\"qc\"][\"qc-mito\"]}\n                            />\n                        </Label>}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    const get_input_fsel = () => {\n        return (\n            <div className=\"col\">\n                <div>\n                    <H5><Tag round={true}>3</Tag>\n                        <span className=\"row-tooltip\"\n                            onMouseEnter={() => setShowStepHelper(3)}>\n                            Feature Selection\n                        </span>\n                    </H5>\n                    <div className=\"row\">\n                        <Label className=\"row-input\">\n                            <Text className=\"text-100\">\n                                <span className=\"row-tooltip\"\n                                    onMouseEnter={() => setShowStepHelper(3)}>\n                                    Lowess span\n                                </span>\n                            </Text>\n                            <NumericInput\n                                placeholder=\"0.3\" value={tmpInputParams[\"fSelection\"][\"fsel-span\"]}\n                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"fSelection\": { ...tmpInputParams[\"fSelection\"], \"fsel-span\": nval } }) }} />\n                        </Label>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    const get_input_pca = () => {\n        return (\n            <div className=\"col\">\n                <div>\n                    <H5><Tag round={true}>4</Tag>\n                        <span className=\"row-tooltip\"\n                            onMouseEnter={() => setShowStepHelper(4)}>\n                            Principal components analysis\n                        </span>\n                    </H5>\n                    <div className=\"row\">\n                        <Label className=\"row-input\">\n                            <Text className=\"text-100\">\n                                <span className=\"row-tooltip\"\n                                    onMouseEnter={() => setShowStepHelper(4)}>\n                                    Number of HVGs\n                                </span>\n                            </Text>\n                            <NumericInput\n                                placeholder=\"2500\" value={tmpInputParams[\"pca\"][\"pca-hvg\"]}\n                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"pca\": { ...tmpInputParams[\"pca\"], \"pca-hvg\": nval } }) }} />\n                        </Label>\n                        <Label className=\"row-input\">\n                            <Text className=\"text-100\">\n                                <span className=\"row-tooltip\"\n                                    onMouseEnter={() => setShowStepHelper(4)}>\n                                    Number of PCs\n                                </span>\n                            </Text>\n                            <NumericInput\n                                placeholder=\"25\" value={tmpInputParams[\"pca\"][\"pca-npc\"]}\n                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"pca\": { ...tmpInputParams[\"pca\"], \"pca-npc\": nval } }) }} />\n                        </Label>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    const get_input_clus = () => {\n        return (\n            <div className=\"col\">\n                <div>\n                    <H5><Tag round={true}>5</Tag>\n                        <span className=\"row-tooltip\"\n                            onMouseEnter={() => setShowStepHelper(5)}>\n                            Clustering\n                        </span>\n                    </H5>\n                    <div className=\"row\">\n                        <Label className=\"row-input\">\n                            <Text className=\"text-100\">\n                                <span className=\"row-tooltip\"\n                                    onMouseEnter={() => setShowStepHelper(5)}>\n                                    Method\n                                </span>\n                            </Text>\n                            <HTMLSelect defaultValue={tmpInputParams[\"cluster\"][\"clus-method\"]}>\n                                <option>{tmpInputParams[\"cluster\"][\"clus-method\"]}</option>\n                            </HTMLSelect>\n                        </Label>\n                        <Label className=\"row-input\">\n                            <Text className=\"text-100\">\n                                <span className=\"row-tooltip\"\n                                    onMouseEnter={() => setShowStepHelper(5)}>\n                                    Number of neighbors\n                                </span>\n                            </Text>\n                            <NumericInput\n                                placeholder=\"10\" value={tmpInputParams[\"cluster\"][\"clus-k\"]}\n                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-k\": nval } }) }} />\n                        </Label>\n                        <Label className=\"row-input\">\n                            <Text className=\"text-100\">\n                                <span className=\"row-tooltip\"\n                                    onMouseEnter={() => setShowStepHelper(5)}>\n                                    Use ANN\n                                </span>\n                            </Text>\n                            <Switch style={{ marginTop: '10px' }} large={true} checked={tmpInputParams[\"cluster\"][\"clus-approx\"]}\n                                innerLabelChecked=\"yes\" innerLabel=\"no\"\n                                onChange={(e) => { setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-approx\": e.target.checked } }) }} />\n                        </Label>\n                        <Label className=\"row-input\">\n                            <Text className=\"text-100\">\n                                <span className=\"row-tooltip\"\n                                    onMouseEnter={() => setShowStepHelper(5)}>\n                                    Weighting scheme\n                                </span>\n                            </Text>\n                            <HTMLSelect onChange={(nval, val) => setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-scheme\": parseInt(nval?.currentTarget?.value) } })}>\n                                <option key=\"0\">Rank</option>\n                                <option key=\"1\">Number</option>\n                                <option key=\"2\">Jaccard</option>\n                            </HTMLSelect>\n                        </Label>\n                        <Label className=\"row-input\">\n                            <Text className=\"text-100\">\n                                <span className=\"row-tooltip\"\n                                    onMouseEnter={() => setShowStepHelper(5)}>\n                                    Resolution\n                                </span>\n                            </Text>\n                            <NumericInput\n                                placeholder=\"0.5\" value={tmpInputParams[\"cluster\"][\"clus-res\"]}\n                                stepSize={0.1}\n                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"cluster\": { ...tmpInputParams[\"cluster\"], \"clus-res\": val } }) }} />\n                        </Label>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    const get_input_tsne = () => {\n        return (\n            <div className=\"col\">\n                <div>\n                    <H5><Tag round={true}>6</Tag>\n                        <span className=\"row-tooltip\"\n                            onMouseEnter={() => setShowStepHelper(6)}>\n                            t-SNE\n                        </span>\n                    </H5>\n                    <div className=\"row\">\n                        <Label className=\"row-input\">\n                            <Text className=\"text-100\">\n                                <span className=\"row-tooltip\"\n                                    onMouseEnter={() => setShowStepHelper(6)}>\n                                    Perplexity\n                                </span>\n                            </Text>\n                            <NumericInput\n                                placeholder=\"30\" value={tmpInputParams[\"tsne\"][\"tsne-perp\"]}\n                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"tsne\": { ...tmpInputParams[\"tsne\"], \"tsne-perp\": nval } }) }} />\n                        </Label>\n                        <Label className=\"row-input\">\n                            <Text className=\"text-100\">\n                                <span className=\"row-tooltip\"\n                                    onMouseEnter={() => setShowStepHelper(6)}>\n                                    Iterations\n                                </span>\n                            </Text>\n                            <NumericInput\n                                placeholder=\"500\" value={tmpInputParams[\"tsne\"][\"tsne-iter\"]}\n                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"tsne\": { ...tmpInputParams[\"tsne\"], \"tsne-iter\": nval } }) }} />\n                        </Label>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    const get_input_umap = () => {\n        return (\n            <div className=\"col\">\n                <div>\n                    <H5><Tag round={true}>7</Tag>\n                        <span className=\"row-tooltip\"\n                            onMouseEnter={() => setShowStepHelper(7)}>\n                            UMAP\n                        </span>\n                    </H5>\n                    <div className=\"row\">\n                        <Label className=\"row-input\">\n                            <Text className=\"text-100\">\n                                <span className=\"row-tooltip\"\n                                    onMouseEnter={() => setShowStepHelper(7)}>\n                                    Number of neighbors\n                                </span>\n                            </Text>\n                            <NumericInput\n                                placeholder=\"15\" value={tmpInputParams[\"umap\"][\"umap-nn\"]}\n                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { ...tmpInputParams[\"umap\"], \"umap-nn\": nval } }) }} />\n                        </Label>\n                        <Label className=\"row-input\">\n                            <Text className=\"text-100\">\n                                <span className=\"row-tooltip\"\n                                    onMouseEnter={() => setShowStepHelper(7)}>\n                                    Minimum distance\n                                </span>\n                            </Text>\n                            <NumericInput\n                                placeholder=\"0.01\" value={tmpInputParams[\"umap\"][\"umap-min_dist\"]}\n                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { ...tmpInputParams[\"umap\"], \"umap-min_dist\": nval } }) }} />\n                        </Label>\n                        <Label className=\"row-input\">\n                            <Text className=\"text-100\">\n                                <span className=\"row-tooltip\"\n                                    onMouseEnter={() => setShowStepHelper(7)}>\n                                    Epochs\n                                </span>\n                            </Text>\n                            <NumericInput\n                                placeholder=\"500\" value={tmpInputParams[\"umap\"][\"umap-epochs\"]}\n                                onValueChange={(nval, val) => { setTmpInputParams({ ...tmpInputParams, \"umap\": { ...tmpInputParams[\"umap\"], \"umap-epochs\": nval } }) }} />\n                        </Label>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <>\n            <Tooltip2 content=\"Start new analysis or modify parameters\" position={Position.BOTTOM}>\n                <Button onClick={handleButtonClick} icon=\"social-media\" intent=\"primary\" text={buttonText} />\n            </Tooltip2>\n            <Dialog className=\"analysis-dialog\" {...props} isOpen={isOpen} onClose={handleClose}>\n\n                <div className={Classes.DIALOG_BODY}>\n                    <Tabs\n                        animate={true}\n                        renderActiveTabPanelOnly={true}\n                        vertical={false}\n                        onChange={handleTabInput}\n                        defaultSelectedTabId={tabSelected}\n                    >\n                        <Tab id=\"new\" title=\"Import new dataset\" panel={\n                            <div className=\"inputs-container\">\n                                <div className='row-input'>\n                                    <div className=\"col\"\n                                        style={{\n                                            // paddingTop: '10px',\n                                            paddingBottom: '15px'\n                                        }}>\n                                        <div>\n                                            <H5><Tag round={true}>1</Tag>\n                                                <span className=\"row-tooltip\"\n                                                    onMouseEnter={() => setShowStepHelper(1)}>\n                                                    Load input files\n                                                </span>\n                                            </H5>\n                                            <Tabs\n                                                animate={true}\n                                                renderActiveTabPanelOnly={true}\n                                                vertical={true}\n                                                onChange={handleNewImportTab}\n                                                defaultSelectedTabId={newImportFormat}\n                                            >\n                                                <Tab id=\"mtx\" title=\"Matrix Market file\" panel={\n                                                    <div className=\"row\"\n                                                    >\n                                                        <Label className=\"row-input\">\n                                                            <FileInput text={inputText.mtx} onInputChange={(msg) => { setInputText({ ...inputText, \"mtx\": msg.target.files[0].name }); setTmpInputFiles({ ...tmpInputFiles, \"mtx\": msg.target.files }) }} />\n                                                        </Label>\n                                                        <Label className=\"row-input\">\n                                                            <FileInput text={inputText.gene} onInputChange={(msg) => { setInputText({ ...inputText, \"gene\": msg.target.files[0].name }); setTmpInputFiles({ ...tmpInputFiles, \"gene\": msg.target.files }) }} />\n                                                        </Label>\n                                                        {/* <Label className=\"row-input\">\n                                                            <FileInput text={inputText.barcode} onInputChange={(msg) => { setInputText({ ...inputText, \"barcode\": msg.target.files[0].name }); setTmpInputFiles({ ...tmpInputFiles, \"barcode\": msg.target.files }) }} />\n                                                        </Label> */}\n                                                    </div>\n                                                } />\n                                                <Tab id=\"tenx\" title=\"10x HDF5 matrix\" panel={\n                                                    <div className=\"row\"\n                                                    >\n                                                        <Label className=\"row-input\">\n                                                            <FileInput style={{\n                                                                marginTop: '5px'\n                                                            }}\n                                                                text={inputText.file}\n                                                                onInputChange={(msg) => {\n                                                                    setInputText({ ...inputText, \"file\": msg.target.files[0].name });\n                                                                    setTmpInputFiles({ ...tmpInputFiles, \"file\": msg.target.files })\n                                                                }} />\n                                                        </Label>\n\n                                                        {/* <Label className=\"row-input\">\n                                                            <Text className=\"text-100\">\n                                                                <span className=\"row-tooltip\">\n                                                                    HDF5 format\n                                                                </span>\n                                                            </Text>\n                                                            <HTMLSelect onChange={(nval, val) => sethdfFormat(nval?.currentTarget.key)}>\n                                                                <option key=\"tenx\">10x genomics</option>\n                                                                <option key=\"h5ad\">H5ad</option>\n                                                            </HTMLSelect>\n                                                        </Label> */}\n                                                    </div>\n                                                } />\n                                                <Tab id=\"h5ad\" title=\"H5AD\" panel={\n                                                    <div className=\"row\"\n                                                    >\n                                                        <Label className=\"row-input\">\n                                                            <FileInput style={{\n                                                                marginTop: '5px'\n                                                            }}\n                                                                text={inputText.file}\n                                                                onInputChange={(msg) => {\n                                                                    setInputText({ ...inputText, \"file\": msg.target.files[0].name });\n                                                                    setTmpInputFiles({ ...tmpInputFiles, \"file\": msg.target.files })\n                                                                }} />\n                                                        </Label>\n                                                    </div>\n                                                } />\n                                            </Tabs>\n\n                                        </div>\n                                    </div>\n\n                                    {get_input_qc()}\n                                    {get_input_fsel()}\n                                    {get_input_pca()}\n                                    {get_input_clus()}\n                                    {get_input_tsne()}\n                                    {get_input_umap()}\n                                </div>\n\n                                <div className=\"row-input-tooltips\">\n                                    {\n                                        !tmpInputValid &&\n                                        <Callout intent=\"danger\"\n                                            title=\"Incorrect file format\"\n                                            style={{\n                                                marginBottom: '10px'\n                                            }}>\n                                            <p>Upload files that in one of these formats;</p>\n                                            <ul>\n                                                <li>Matrix Market - <code>*.mtx</code> or <code>*.mtx.gz</code></li>\n                                                <li>features or genes, <code>*.tsv</code> or <code>*.tsv.gz</code></li>\n                                                <li>HDF5 (10x or h5ad) - <code>*.h5</code> or <code>*.hdf5</code> or <code>*.h5ad</code></li>\n                                            </ul>\n                                        </Callout>\n                                    }\n                                    {showStepHelper === 1 &&\n                                        <Callout intent=\"primary\">\n                                            <p>We currently support several common file formats for single-cell RNA-seq count data.</p>\n                                            <p>\n                                                <strong>A count matrix in the Matrix Market (<code>*.mtx</code>) format. </strong>\n                                                This file may be Gzip-compressed, in which case we expect it to have a <code>*.mtx.gz</code> extension.\n                                                We assume that the matrix has already been filtered to remove empty droplets.\n                                                We also recommend supplying the feature annotation as an additional TSV file with gene identifiers and symbols -\n                                                this is usually called <code>features.tsv.gz</code> or <code>genes.tsv</code> in the output of processing pipelines like Cellranger.\n                                            </p>\n                                            <p>\n                                                <strong>A count matrix in the 10X HDF5 feature-barcode matrix format. </strong>\n                                                We assume that the matrix has already been filtered to remove empty droplets.\n                                                This is usually called something like <code>filtered_feature_bc_matrix.h5</code> in the output of processing pipelines like Cellranger.\n                                                (See <a href=\"https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/advanced/h5_matrices\">here</a> for details.\n                                                Do not confuse this with the molecule information file, which is something different altogether.)\n                                            </p>\n                                            <p>\n                                                <strong>A count matrix in the H5AD (<code>*.h5ad</code>) format. </strong>\n                                                We assume that the count matrix is stored in the <code>X</code> group.\n                                                We will also try to guess which field in the <code>obs</code> annotation contains gene symbols.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {get_common_tooltips()}\n                                </div>\n                            </div>\n                        } />\n                        <Tab id=\"load\" title=\"Load saved analysis\" panel={\n                            <div className=\"inputs-container\">\n                                <div className='row-input'>\n                                    <div className=\"col\">\n                                        <Tabs\n                                            animate={true}\n                                            renderActiveTabPanelOnly={true}\n                                            vertical={true}\n                                            onChange={handleLoadImportTab}\n                                            defaultSelectedTabId={loadImportFormat}\n                                        >\n                                            <Tab id=\"kana\" title=\"Load from file\" panel={\n                                                <div>\n                                                    <H5><Tag round={true}>1</Tag>\n                                                        <span className=\"row-tooltip\">\n                                                            Load analysis from file\n                                                        </span>\n                                                    </H5>\n                                                    <div className=\"row\">\n                                                        <Label className=\"row-input\">\n                                                            <FileInput text={inputText.file} onInputChange={(msg) => { setInputText({ ...inputText, \"file\": msg.target.files[0].name }); setTmpInputFiles({ ...tmpInputFiles, \"file\": msg.target.files }) }} />\n                                                        </Label>\n                                                    </div>\n                                                </div>\n                                            } />\n                                            {<Tab id=\"kanadb\" title=\"Load from browser\" panel={\n                                                <div>\n                                                    <H5><Tag round={true}>1</Tag>\n                                                        <span className=\"row-tooltip\">\n                                                            Load analysis from browser cache\n                                                        </span>\n                                                    </H5>\n                                                    {\n                                                        props?.kanaIDBRecs.length > 0 ?\n                                                            <div className=\"row\">\n                                                                <RadioGroup\n                                                                    onChange={(x) => {\n                                                                        setTmpInputFiles({ ...tmpInputFiles, \"file\": x.currentTarget?.value });\n                                                                        setTmpInputValid(true);\n                                                                    }}\n                                                                    selectedValue={tmpInputFiles?.file}\n                                                                >\n                                                                    {\n                                                                        props?.kanaIDBRecs.map((x, i) => {\n                                                                            return (\n                                                                                <Radio key={i} style={{\n                                                                                    display: \"flex\",\n                                                                                    flexDirection: \"row\",\n                                                                                    alignItems: \"center\"\n                                                                                }}\n                                                                                    label={x.title} value={x.id} > &nbsp;\n                                                                                    <span className=\"kana-date\">{parseKanaDate(x.time)}</span>  &nbsp;\n                                                                                    <Icon icon=\"trash\" size=\"10\"\n                                                                                        style={{\n                                                                                            alignSelf: 'baseline',\n                                                                                            paddingTop: '4px',\n                                                                                            paddingLeft: '5px',\n                                                                                        }}\n                                                                                        onClick={() => {\n                                                                                            props?.setDeletekdb(x.id);\n                                                                                        }}></Icon>\n                                                                                </Radio>\n                                                                            )\n                                                                        })\n                                                                    }\n                                                                </RadioGroup>\n                                                            </div> :\n                                                            <div className=\"row\">\n                                                                <Label>No saved analysis found in the browser!!</Label>\n                                                            </div>\n                                                    }\n                                                </div>} />\n                                            }\n                                        </Tabs>\n                                    </div>\n                                    {\n                                        loadParams && loadParamsFor === loadImportFormat\n                                            && tmpInputFiles?.file === inputFiles?.files?.file ?\n                                            get_input_qc()\n                                            : \"\"\n                                    }\n\n                                    {\n                                        loadParams && loadParamsFor === loadImportFormat\n                                            && tmpInputFiles?.file === inputFiles?.files?.file ?\n                                            get_input_fsel()\n                                            : \"\"\n                                    }\n\n                                    {\n                                        loadParams && loadParamsFor === loadImportFormat\n                                            && tmpInputFiles?.file === inputFiles?.files?.file ?\n                                            get_input_pca()\n                                            : \"\"\n                                    }\n\n                                    {\n                                        loadParams && loadParamsFor === loadImportFormat\n                                            && tmpInputFiles?.file === inputFiles?.files?.file ?\n                                            get_input_clus()\n                                            : \"\"\n                                    }\n\n                                    {\n                                        loadParams && loadParamsFor === loadImportFormat\n                                            && tmpInputFiles?.file === inputFiles?.files?.file ?\n                                            get_input_tsne()\n                                            : \"\"\n                                    }\n\n                                    {\n                                        loadParams && loadParamsFor === loadImportFormat\n                                            && tmpInputFiles?.file === inputFiles?.files?.file ?\n                                            get_input_umap()\n                                            : \"\"\n                                    }\n                                </div>\n                                <div className='row-input-tooltips'>\n                                    {\n                                        !tmpInputValid &&\n                                        <Callout intent=\"danger\"\n                                            title=\"Incorrect file format\"\n                                            style={{\n                                                marginBottom: '10px'\n                                            }}>\n                                        </Callout>\n                                    }\n                                    <Callout intent=\"primary\">\n                                        Import a saved analysis from <strong>kana</strong>. These files\n                                        are stored as <strong><code>*.kana</code></strong>.\n                                    </Callout>\n\n                                    {showStepHelper === 1 &&\n                                        <Callout intent=\"primary\">\n                                            <p>We currently support files in the Cellranger format -\n                                                namely, a Matrix Market file containing the count matrix.\n                                                We also recommend supplying the feature annotation\n                                                (<code>features.tsv.gz</code> or <code>genes.tsv.gz</code>).\n                                                Users may also provide a TSV file containing the barcode annotations, if any.\n                                            </p>\n                                        </Callout>\n                                    }\n                                    {get_common_tooltips()}\n                                </div>\n                            </div>\n                        } />\n                    </Tabs >\n                </div >\n\n                {\n                    includeFooter ? (\n                        <div className={Classes.DIALOG_FOOTER} >\n                            <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                                <Tooltip2 content=\"Run Analysis\">\n                                    <Button disabled={!tmpInputValid} icon=\"function\" onClick={handleImport}>Analyze</Button>\n                                </Tooltip2>\n                            </div>\n                        </div>\n                    ) : (\n                        <div style={{ margin: \"0 20px\" }}>\n                        </div>\n                    )\n                }\n            </Dialog >\n        </>\n    );\n}\n\nexport default AnalysisDialog;\n","const Stats = (props) => {\n\n    return (\n        <>\n            {\n                <span>\n                    {props?.initDims ? `: ${props?.initDims}` : \" \"}\n                    {props?.qcDims ?  ` (${props?.qcDims} after QC)` : \"\" }\n                </span>\n            }\n        </>\n    );\n};\n\nexport default Stats;\n","import {\n    Button,\n    Classes,\n    Drawer,\n    Position,\n} from \"@blueprintjs/core\";\nimport React, { useState, useContext } from 'react';\n\nimport { AppContext } from '../../context/AppContext';\n\nconst Logs = (props) => {\n\n    const [state, setState] = useState({\n        autoFocus: true,\n        canEscapeKeyClose: true,\n        canOutsideClickClose: true,\n        enforceFocus: true,\n        hasBackdrop: true,\n        isOpen: false,\n        position: Position.RIGHT,\n        size: undefined,\n        usePortal: true,\n    });\n\n    const handleOpen = () => setState({ isOpen: true });\n\n    const handleClose = () => setState({ isOpen: false });\n\n    return (\n        <>\n            <Button onClick={handleOpen} icon=\"wrench\" outlined={true}\n                intent=\"warning\"></Button>\n            <Drawer\n                icon=\"info-sign\"\n                onClose={handleClose}\n                title=\"What's happening ?\"\n                {...state}\n            >\n                <div className={Classes.DRAWER_BODY}>\n                    <div className={Classes.DIALOG_BODY}>\n                        <ul className=\"list\">\n                            {\n                                props?.logs.map((x, i) => (\n                                    <li key={i}>{x}</li>\n                                ))\n                            }\n                        </ul>\n                    </div>\n                </div>\n            </Drawer>\n        </>\n    )\n}\n\nexport default Logs;\n","import {\n    Button, Classes, Dialog, H5, Card, Elevation, Position\n} from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport React, { useState, useCallback } from \"react\";\n\nconst IntroDialog = ({\n    buttonText,\n    includeFooter,\n    ...props\n}) => {\n\n    const [isOpen, setIsOpen] = useState(true);\n    const [showClose, setShowClose] = useState(false);\n\n    const handleButtonClick = useCallback(() => {\n        setIsOpen(!isOpen);\n        setShowClose(true);\n    }, [isOpen]);\n    const handleClose = useCallback(() => setIsOpen(false), []);\n\n    const handleInputs = () => {\n        props?.setOpenInput(true);\n        handleClose();\n    }\n\n    return (\n        <>\n            <Tooltip2 content=\"Some information about the app.\" position={Position.BOTTOM}>\n            <Button onClick={handleButtonClick} icon=\"info-sign\" intent=\"primary\" text=\"\" />\n            </Tooltip2>\n            <Dialog {...props} isOpen={isOpen} onClose={handleClose}>\n                <div className={Classes.DIALOG_BODY}>\n                    <Card elevation={Elevation.ZERO}>\n                        <p><strong>kana</strong> performs a standard scRNA-seq data analysis directly inside the browser.</p>\n\n                        <p>With just a few clicks, you can get a UMAP/t-SNE, clusters and their marker genes in an intuitive interface for further exploration.\n                            No need to transfer data, no need to install software, no need to configure a backend server -\n                            just point to a Matrix Market file and we'll analyze <em>your</em> data on <em>your</em> computer, no questions asked.\n                        </p>\n                        <p>Check out our <a href=\"https://github.com/jkanche/scran.js.app\" target=\"_blank\">GitHub page</a> for more details.\n                            Or you could just play around with the app to see what it can do.\n                        </p>\n                        <H5>Authors</H5>\n                        Jayaram Kancherla (<a href=\"https://github.com/jkanche\" target=\"_blank\"><strong>@jkanche</strong></a>),\n                        Aaron Lun (<a href=\"https://github.com/LTLA\" target=\"_blank\"><strong>@LTLA</strong></a>)\n                    </Card>\n                </div>\n                <div className={Classes.DIALOG_FOOTER}>\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                        {\n                            showClose ? <Button icon=\"cross\" onClick={handleClose}>Close</Button>\n                                :\n                                <Tooltip2 content=\"行くぞ!\">\n                                    <Button icon=\"bring-data\" onClick={handleInputs}>Get started</Button>\n                                </Tooltip2>\n                        }\n                    </div>\n                </div>\n            </Dialog>\n        </>\n    );\n}\n\nexport default IntroDialog;\n","import {\n  Alignment,\n  Button,\n  Navbar,\n  NavbarDivider,\n  NavbarGroup,\n  NavbarHeading,\n  ButtonGroup,\n  Menu,\n  MenuItem,\n  EditableText,\n  Position\n} from \"@blueprintjs/core\";\n\nimport { Popover2, Tooltip2 } from \"@blueprintjs/popover2\";\n\nimport React, { useContext, useState } from 'react';\n\nimport AnalysisDialog from '../Analysis';\nimport Stats from '../Stats';\nimport Logs from '../Logs';\nimport IntroDialog from \"../Intro\";\n\nimport { AppContext } from \"../../context/AppContext\";\n\nconst Header = (props) => {\n  // state for dialogs\n  const [state] = useState({\n    autoFocus: true,\n    canEscapeKeyClose: true,\n    canOutsideClickClose: false,\n    enforceFocus: false,\n    shouldReturnFocusOnClose: true,\n  });\n\n  const { datasetName, setDatasetName } = useContext(AppContext);\n  // app open inputs\n  const [openInput, setOpenInput] = useState(false);\n\n  return (\n    <>\n      <Navbar className=\"bp3-dark\">\n        <NavbarGroup className=\"navbar-group\" align={Alignment.LEFT}>\n\n          <NavbarHeading>kana</NavbarHeading>\n\n          <NavbarDivider />\n          <span>Single cell RNA-seq analysis in the browser</span>\n          <NavbarDivider />\n\n          <AnalysisDialog\n            icon=\"document\"\n            title=\"Import dataset & update parameters (mouseover for info)\"\n            buttonText=\"Start Analysis\"\n            includeFooter={true}\n            openInput={openInput}\n            {...state}\n            kanaIDBRecs={props?.kanaIDBRecs}\n            setKanaIDBRecs={props?.setKanaIDBRecs}\n            deletekdb={props?.deletekdb}\n            setDeletekdb={props?.setDeletekdb} />\n\n          <NavbarDivider />\n\n          <Tooltip2 content=\"Modify the dataset title here.\" position={Position.BOTTOM}>\n            <EditableText value={datasetName} intent=\"primary\"\n              onConfirm={(val) => { setDatasetName(val) }}\n              onChange={(val) => { setDatasetName(val) }} />\n          </Tooltip2>\n\n          <Stats initDims={props?.initDims} qcDims={props?.qcDims} />\n          <NavbarDivider />\n\n          <Tooltip2 content=\"Save the analysis, either in your browser's cache or to a file on your computer.\" position={Position.BOTTOM}>\n            <ButtonGroup>\n              <Popover2 content={\n                <Menu>\n                  <MenuItem text=\"Save to browser\" icon=\"floppy-disk\"\n                    onClick={() => {\n                      props?.setIndexedDBState(true);\n                    }} />\n                  <MenuItem text=\"Download to file\" icon=\"download\"\n                    onClick={() => {\n                      props?.setExportState(true);\n                    }} />\n                </Menu>\n              } placement=\"bottom-start\">\n                <Button intent=\"warning\" rightIcon=\"caret-down\" text=\"Export\" />\n              </Popover2>\n            </ButtonGroup>\n          </Tooltip2>\n          <NavbarDivider />\n\n          <Tooltip2 content=\"What's happening under the hood? See the blow-by-blow logs as the analysis runs.\" position={Position.BOTTOM}>\n            <Logs logs={props?.logs} />\n          </Tooltip2>\n          <NavbarDivider />\n\n          <IntroDialog\n            icon=\"document\"\n            title=\"Single-cell RNA-seq analysis in the browser\"\n            isOpen={true}\n            setOpenInput={setOpenInput}\n            {...state}\n          />\n        </NavbarGroup>\n      </Navbar>\n    </>\n  );\n};\n\nexport default React.memo(Header);\n","const getMinMax = (arr) => {\n    var max = -Number.MAX_VALUE,\n        min = Number.MAX_VALUE;\n    arr.forEach(function (x) {\n        if (max < x) {\n            max = x;\n        }\n        if (min > x) {\n            min = x;\n        }\n    });\n    return [min, max];\n}\n\n// saving svg's from https://observablehq.com/@mbostock/saving-svg\n// ource credits : https://www.demo2s.com/javascript/javascript-d3-js-save-svg-to-png-image.html\nfunction serialize(svgNode) {\n    svgNode.setAttribute('xlink', 'http://www.w3.org/1999/xlink');\n    var cssStyleText = getCSSStyles(svgNode);\n    appendCSS(cssStyleText, svgNode);\n    \n    var serializer = new XMLSerializer();\n    var svgString = serializer.serializeToString(svgNode);\n    svgString = svgString.replace(/(\\w+)?:?xlink=/g, 'xmlns:xlink='); // Fix root xlink without namespace\n    svgString = svgString.replace(/NS\\d+:href/g, 'xlink:href'); // Safari NS namespace fix\n    return svgString;\n\n    function getCSSStyles(parentElement) {\n        var selectorTextArr = [];\n        // Add Parent element Id and Classes to the list\n        selectorTextArr.push('#' + parentElement.id);\n        \n        for (let c = 0; c < parentElement.classList.length; c++)\n            if (!contains('.' + parentElement.classList[c], selectorTextArr))\n                selectorTextArr.push('.' + parentElement.classList[c]);\n        // Add Children element Ids and Classes to the list\n        \n        var nodes = parentElement.getElementsByTagName(\"*\");\n        for (let i = 0; i < nodes.length; i++) {\n            var id = nodes[i].id;\n            if (!contains('#' + id, selectorTextArr))\n                selectorTextArr.push('#' + id);\n            var classes = nodes[i].classList;\n            for (let c = 0; c < classes.length; c++)\n                if (!contains('.' + classes[c], selectorTextArr))\n                    selectorTextArr.push('.' + classes[c]);\n        }\n        \n        // Extract CSS Rules\n        var extractedCSSText = \"\";\n        for (let i = 0; i < document.styleSheets.length; i++) {\n            var s = document.styleSheets[i];\n            try {\n                if (!s.cssRules) continue;\n            } catch (e) {\n                if (e.name !== 'SecurityError') throw e; // for Firefox\n                continue;\n            }\n            var cssRules = s.cssRules;\n            for (let r = 0; r < cssRules.length; r++) {\n                if (contains(cssRules[r].selectorText, selectorTextArr))\n                    extractedCSSText += cssRules[r].cssText;\n            }\n        }\n        \n        return extractedCSSText;\n        \n        function contains(str, arr) {\n            return arr.indexOf(str) === -1 ? false : true;\n        }\n    }\n    \n    function appendCSS(cssText, element) {\n        var styleElement = document.createElement(\"style\");\n        styleElement.setAttribute(\"type\", \"text/css\");\n        styleElement.innerHTML = cssText;\n        var refNode = element.hasChildNodes() ? element.children[0] : null;\n        element.insertBefore(styleElement, refNode);\n    }\n}\n\nfunction saveSVG(svgNode, width, height, filename) {\n    let svgString = serialize(svgNode);\n    var imgsrc = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgString))); // Convert SVG string to data URL\n    var canvas = document.createElement(\"canvas\");\n    var context = canvas.getContext(\"2d\");\n    canvas.width = width;\n    canvas.height = height;\n    var image = new Image();\n    image.onload = () => {\n        context.clearRect(0, 0, width, height);\n        context.drawImage(image, 0, 0, width, height);\n        let dataBlob = canvas.toDataURL();\n        let tmpLink = document.createElement(\"a\");\n        tmpLink.href = dataBlob;\n        tmpLink.download = filename ? filename : 'plot.png';\n        tmpLink.click();\n    };\n    image.src = imgsrc;\n}\n\nexport { getMinMax, saveSVG };","import React, { useEffect, useRef } from \"react\";\nimport * as d3 from 'd3';\nimport { saveSVG } from './utils.js';\nimport { Button } from \"@blueprintjs/core\";\n\n// a typical d3 bar plot\nconst BarPlot = (props) => {\n    const container = useRef();\n\n    useEffect(() => {\n        let data = props?.data;\n        let propwidth = props?.width;\n        let color = props?.color;\n        let ymax = props?.ymax;\n\n        if (!ymax) {\n            ymax = Math.max(...data.map((d) => { return d.value; }));\n        }\n\n        if (!propwidth) {\n            propwidth = 325;\n        }\n\n        if (!color) {\n            color = \"#00B3A4\";\n        }\n\n        if (!data) return \"\";\n\n        let containerEl = container.current;\n        containerEl.innerHTML = \"\";\n\n        const margin = { top: 10, right: 30, bottom: 30, left: 40 },\n            width = propwidth - margin.left - margin.right,\n            height = 200 - margin.top - margin.bottom;\n\n        if (containerEl.querySelector(\"svg\")) {\n            containerEl.querySelector(\"svg\").innerHTML = \"\";\n        }\n\n        const svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                `translate(${margin.left},${margin.top})`);\n\n        var x = d3.scaleBand()\n            .range([0, width])\n            .domain(data.map((d) => { return d.key; }))\n            .padding(0.2);\n\n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x))\n            .selectAll(\"text\")\n            .attr(\"transform\", \"translate(-10,0)rotate(-45)\")\n            .style(\"text-anchor\", \"end\");\n\n        var y = d3.scaleLinear()\n            .domain([0, ymax])\n            .range([height, 0]);\n\n        svg.append(\"g\")\n            .call(d3.axisLeft(y));\n\n        svg.selectAll(\"bars\")\n            .data(data)\n            .enter()\n            .append(\"rect\")\n            .attr(\"x\", (d) => { return x(d.key); })\n            .attr(\"y\", (d) => { return y(d.value); })\n            .attr(\"width\", x.bandwidth())\n            .attr(\"height\", (d) => { return height - y(d.value); })\n            .attr(\"fill\", (d, i) => {\n                if (Array.isArray(color)) {\n                    return color[i];\n                }\n                return color;\n            })\n    }, [props?.data]);\n\n    return (\n        <div className=\"imgplot-container\">\n            <Button small={true} className=\"imgplot-save\" icon=\"download\"\n                onClick={() => {\n                    saveSVG(d3.select(container.current.querySelector(\"svg\")).node(),\n                        2 * 325, 2 * 200, props?.filename);\n                }}>Download</Button>\n            <div ref={container}></div>\n        </div>\n    );\n};\n\nexport default React.memo(BarPlot);","import BarPlot from './BarPlot';\nimport React from 'react';\n\nconst PCABarPlot = (props) => {\n\n    let data = props?.pca?.var_exp;\n\n    if (!data) return \"\";\n\n    let chart_data = [];\n    Object.values(data)?.forEach((x, i) => {\n        chart_data.push({\n            key: i + 1,\n            value: x * 100\n        });\n    });\n\n    return (\n        <BarPlot filename={props?.title + \"_pca.png\"} data={chart_data} />\n    );\n};\n\nexport default React.memo(PCABarPlot);","import React, { useContext, useEffect, useState } from 'react';\nimport { AppContext } from '../../context/AppContext';\nimport BarPlot from './BarPlot';\n\nconst ClusterBarPlot = (props) => {\n\n    const [chartData, setChartData] = useState(null);\n\n    const { datasetName } = useContext(AppContext);\n\n    useEffect(() => {\n        let data = props?.data?.clusters;\n\n        if (!data) return;\n\n        let x = {};\n        for (var i = 0; i < data?.length; i++) {\n            var clus = data[i];\n            if (\"CLUS_\" + clus in x) {\n                x[\"CLUS_\" + clus]++;\n            } else {\n                x[\"CLUS_\" + clus] = 0;\n            }\n        }\n\n        let chart_data = [];\n        Object.values(x)?.forEach((z, i) => {\n            chart_data.push({\n                key: i + 1,\n                value: z\n            });\n        });\n\n        setChartData(chart_data);\n    }, [props?.data, props?.clusterColors]);\n\n    return (\n        props?.clusterColors && chartData &&\n        <BarPlot\n            filename={datasetName.split(\" \").join(\"_\") + \"_clusters.png\"}\n            data={chartData} color={props?.clusterColors} />\n    );\n};\n\nexport default React.memo(ClusterBarPlot);","import React, { useEffect, useRef } from \"react\";\nimport * as d3 from 'd3';\nimport { saveSVG } from './utils.js';\nimport { Button } from \"@blueprintjs/core\";\n\nconst ViolinPlotBasic = (props) => {\n    const container = useRef();\n\n    useEffect(() => {\n\n        let data = props?.rdata;\n        let propwidth = props?.width;\n        let color = props?.color;\n\n        if (!propwidth) {\n            propwidth = 200;\n        }\n\n        if (!color) {\n            color = \"#00B3A4\";\n        }\n\n        if (!data) return \"\";\n\n        let transform = props?.dataTransform;\n        let range = props?.range;\n        let threshold = props?.threshold;\n\n        if (transform === \"log\") {\n            data = data.map(x => Math.log2(x+1));\n            range = range.map(x => Math.log2(x+1));\n            threshold = Math.log2(threshold + 1);\n        }\n\n        let containerEl = container.current;\n        containerEl.innerHTML = \"\";\n\n        const margin = { top: 10, right: 30, bottom: 30, left: 40 },\n            width = propwidth - margin.left - margin.right,\n            height = 200 - margin.top - margin.bottom;\n\n        const svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                `translate(${margin.left},${margin.top})`);\n\n        var y = d3.scaleLinear()\n            .domain(range)\n            .range([height, 0])\n            .nice();\n\n        svg.append(\"g\").call(\n            d3.axisLeft(y)\n                .tickFormat(function (d) {\n                    return transform === \"log\" ? d3.format(props?.transform)(Math.pow(2, d)) : d3.format(props?.transform)(d);\n                }));\n\n        var x = d3.scaleBand()\n            .range([0, width])\n            .domain([props?.showLabel])\n            .padding(0.05)\n\n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x))\n\n        var histogram = d3.bin()\n            .domain(y.domain())\n            .thresholds(transform === \"log\" ? y.ticks(10): y.ticks(40))\n            .value(d => d);\n\n        let bins = histogram(data);\n        var max_bin = d3.max(bins, (d) => { return d.length; })\n\n        var xNum = d3.scaleLinear()\n            .range([0, x.bandwidth()])\n            .domain([-1, 1]);\n\n        svg\n            .selectAll(\"violins\")\n            .data([props?.label])\n            .enter()\n            .append(\"g\")\n            .attr(\"transform\", (d) => { return (\"translate(\" + x(d) + \" ,0)\") })\n            .append(\"path\")\n            .datum(() => { return bins })\n            .style(\"stroke\", \"none\")\n            .style(\"fill\", color)\n            .attr(\"d\", d3.area()\n                .x0((d) => { return (xNum(-d.length / max_bin)) })\n                .x1((d) => { return (xNum(d.length / max_bin)) })\n                .y((d) => { return (y(d.x0)) })\n                .curve(transform === \"log\" ? d3.curveBasis : d3.curveCatmullRom)\n            );\n\n        svg\n            .selectAll(\"threshold\")\n            .data([threshold])\n            .enter()\n            .append(\"line\")\n            .attr(\"transform\", () => { return (\"translate(\" + x(props?.label) + \" ,0)\") })\n            .attr(\"class\", \"threshold\")\n            .attr(\"x1\", 5)\n            .attr(\"y1\", (d) => y(d))\n            .attr(\"x2\", x.bandwidth() - 5)\n            .attr(\"y2\", (d) => y(d))\n            .attr(\"stroke-width\", 2)\n            .attr(\"stroke\", \"Orange\")\n            .on(\"mouseover\", function () {\n                var lines = d3.select(this);\n                lines.attr(\"stroke\", \"black\");\n                lines.attr(\"stroke-width\", \"8\");\n            })\n            .on(\"mouseout\", function () {\n                var lines = d3.select(this);\n                lines.attr(\"stroke\", \"Orange\");\n                lines.attr(\"stroke-width\", \"5\");\n            });\n    }, [props]);\n\n    return (\n        <div className=\"imgplot-container\">\n            <Button small={true} className=\"imgplot-save\" icon=\"download\"\n                onClick={() => {\n                    saveSVG(d3.select(container.current.querySelector(\"svg\")).node(),\n                        2 * 325, 2 * 200, props?.filename);\n                }}>Download</Button>\n            <div ref={container}></div>\n        </div>\n    );\n};\n\nexport default React.memo(ViolinPlotBasic);","import ViolinPlotBasic from './ViolinPlotBasic';\nimport './QCPlots.css';\nimport React from 'react';\nimport { useEffect, useState } from 'react';\n\n// shows the QC plots for sums, detected and proportion\n// transforms data to a log scale or %\nconst QCPlotMgr = (props) => {\n\n    const [qcData, setQCData] = useState(null);\n\n    useEffect(() => {\n        setQCData(props.data);\n    }, [props]);\n\n    return (\n        qcData && <div className=\"qc-plots\">\n            {\n                [\"sums\", \"detected\", \"proportion\"].map(x => {\n                    const props2 = {\n                        \"threshold\": qcData?.[\"thresholds\"]?.[x],\n                        \"range\": qcData?.[\"ranges\"]?.[x],\n                        \"label\": x,\n                        \"transform\": x === \"proportion\" ? \".2\" : \".2s\",\n                        \"showLabel\": x,\n                        \"dataTransform\": x === \"proportion\" ? null : \"log\",\n                        \"rdata\": qcData?.[\"data\"]?.[x]\n                    }\n                    return (\n                        <div key={x}>\n                            <ViolinPlotBasic\n                                filename={props?.title + \"_\" + x + \".png\"} {...props2} />\n                        </div>)\n                })\n            }\n        </div>\n    );\n};\n\nexport default React.memo(QCPlotMgr);","import { Button } from \"@blueprintjs/core\";\nimport { useEffect, useRef, useState, useContext } from \"react\";\nimport { AppContext } from \"../../context/AppContext\";\n\nimport './ImgPlot.css';\n\nconst ImgPlot = (props) => {\n    const container = useRef();\n    const [title, setTitle] = useState(null);\n\n    const { genesInfo, geneColSel } = useContext(AppContext);\n\n    let data = props?.data;\n    let propwidth = props?.width;\n    let propheight = props?.height;\n    let color = props?.color;\n\n    if (!propwidth) {\n        propwidth = 325;\n    }\n\n    if (!propheight) {\n        propheight = 200\n    }\n\n    if (!color) {\n        color = \"#00B3A4\";\n    }\n\n    useEffect(() => {\n        let containerEL = container.current;\n        if (containerEL) {\n\n            if (data?.image) {\n                let ctx = containerEL.getContext(\"2d\");\n\n                var img = new Image();\n                img.onload = () => {\n                    ctx.drawImage(img, 0, 0, propwidth, propheight);\n                };\n                img.src = data?.image;\n                // ctx.putImageData(data?.image, 0, 0);\n            }\n\n            let text = ` ${data?.config?.embedding} `\n            if (data?.config?.gene) {\n                text += `⊃ ${genesInfo[geneColSel][props?.gene]} `\n            }\n\n            if (data?.config?.highlight) {\n                String(data?.config?.highlight).startsWith(\"cs\") ?\n                text += `⊃ Custom Selection ${data?.config?.highlight} `\n                : text += `⊃ Cluster ${parseInt(data?.config?.highlight) + 1} `\n            }\n\n            setTitle(text);\n        }\n    }, []);\n\n    return (\n        <div className=\"imgplot-container\">\n            <h5>{title}</h5>\n            <Button small={true} className=\"imgplot-save\" icon=\"download\"\n                onClick={() => {\n                    let tmpLink = document.createElement(\"a\");\n                    tmpLink.href = data?.image;\n                    tmpLink.download = `${title.replace(\"⊃\", \"\").split(\" \").join(\"_\")}.png`;\n                    tmpLink.click();\n                }}>Download</Button>\n            <canvas className=\"imgplot-canvas\" width={propwidth} height={propheight} ref={container}></canvas>\n        </div>\n    );\n};\n\nexport default ImgPlot;","import React from \"react\";\nimport PCABarPlot from \"../Plots/PCABarPlot\";\nimport ClusterBarPlot from \"../Plots/ClusterBarPlot\";\nimport { useContext } from 'react';\nimport { AppContext } from './../../context/AppContext';\nimport { Card, Elevation } from \"@blueprintjs/core\";\nimport QCPlotMgr from \"../Plots/QCPlotMgr\";\n\nimport './Gallery.css';\nimport ImgPlot from \"../Plots/ImgPlot\";\n\nconst Gallery = (props) => {\n  const { datasetName } = useContext(AppContext);\n\n  return (\n    <>\n      <div className=\"gallery-cont\">\n        {\n          props?.qcData && props?.qcData?.[\"thresholds\"] ?\n            <Card className=\"gallery-elem\" elevation={Elevation.ONE}>\n              <h5>QC Statistics</h5>\n              <QCPlotMgr title={datasetName.split(\" \").join(\"_\")} data={props?.qcData} />\n            </Card>\n            : \"\"\n        }\n        {\n          props?.pcaVarExp ?\n            <Card className=\"gallery-elem\" elevation={Elevation.ONE}>\n              <h5>PCA (% variance explained)</h5>\n              <PCABarPlot title={datasetName.split(\" \").join(\"_\")} pca={props?.pcaVarExp} />\n            </Card>\n            : \"\"\n        }\n        {\n          props?.clusterData && props?.clusterColors ?\n            <Card className=\"gallery-elem\" elevation={Elevation.ONE}>\n              <h5># of cells per cluster</h5>\n              <ClusterBarPlot data={props?.clusterData} clusterColors={props?.clusterColors} />\n            </Card>\n            : \"\"\n        }\n        {\n          props?.savedPlot ?\n            props?.savedPlot.map((x, i) => (\n              <Card key={i} className=\"gallery-elem\" elevation={Elevation.ONE}>\n                <ImgPlot data={x} gene={props?.gene} />\n              </Card>\n            )\n            ) : \"\"\n        }\n      </div>\n    </>\n  );\n};\n\nexport default React.memo(Gallery);\n","import { Position, Toaster } from \"@blueprintjs/core\";\n\nexport const AppToaster = Toaster.create({\n    className: \"notifications\",\n    position: Position.TOP_RIGHT,\n    maxToasts: 5,\n});","/*\nRainbowVis-JS \nReleased under Eclipse Public License - v 1.0\n*/\n\nexport default function Rainbow() {\n\t\"use strict\";\n\tvar gradients = null;\n\tvar minNum = 0;\n\tvar maxNum = 100;\n\tvar colours = ['ff0000', 'ffff00', '00ff00', '0000ff'];\n\tsetColours(colours);\n\n\tfunction setColours(spectrum) {\n\t\tif (spectrum.length < 2) {\n\t\t\tthrow new Error('Rainbow must have two or more colours.');\n\t\t} else {\n\t\t\tvar increment = (maxNum - minNum) / (spectrum.length - 1);\n\t\t\tvar firstGradient = new ColourGradient();\n\t\t\tfirstGradient.setGradient(spectrum[0], spectrum[1]);\n\t\t\tfirstGradient.setNumberRange(minNum, minNum + increment);\n\t\t\tgradients = [firstGradient];\n\n\t\t\tfor (var i = 1; i < spectrum.length - 1; i++) {\n\t\t\t\tvar colourGradient = new ColourGradient();\n\t\t\t\tcolourGradient.setGradient(spectrum[i], spectrum[i + 1]);\n\t\t\t\tcolourGradient.setNumberRange(minNum + increment * i, minNum + increment * (i + 1));\n\t\t\t\tgradients[i] = colourGradient;\n\t\t\t}\n\n\t\t\tcolours = spectrum;\n\t\t}\n\t}\n\n\tthis.setSpectrum = function () {\n\t\tsetColours(arguments);\n\t\treturn this;\n\t}\n\n\tthis.setSpectrumByArray = function (array) {\n\t\tsetColours(array);\n\t\treturn this;\n\t}\n\n\tthis.colourAt = function (number) {\n\t\tif (isNaN(number)) {\n\t\t\tthrow new TypeError(number + ' is not a number');\n\t\t} else if (gradients.length === 1) {\n\t\t\treturn gradients[0].colourAt(number);\n\t\t} else {\n\t\t\tvar segment = (maxNum - minNum) / (gradients.length);\n\t\t\tvar index = Math.min(Math.floor((Math.max(number, minNum) - minNum) / segment), gradients.length - 1);\n\t\t\treturn gradients[index].colourAt(number);\n\t\t}\n\t}\n\n\tthis.colorAt = this.colourAt;\n\n\tthis.setNumberRange = function (minNumber, maxNumber) {\n\t\tif (maxNumber > minNumber) {\n\t\t\tminNum = minNumber;\n\t\t\tmaxNum = maxNumber;\n\t\t\tsetColours(colours);\n\t\t} else {\n\t\t\tthrow new RangeError('maxNumber (' + maxNumber + ') is not greater than minNumber (' + minNumber + ')');\n\t\t}\n\t\treturn this;\n\t}\n}\n\nfunction ColourGradient() {\n\t\"use strict\";\n\tvar startColour = 'ff0000';\n\tvar endColour = '0000ff';\n\tvar minNum = 0;\n\tvar maxNum = 100;\n\n\tthis.setGradient = function (colourStart, colourEnd) {\n\t\tstartColour = getHexColour(colourStart);\n\t\tendColour = getHexColour(colourEnd);\n\t}\n\n\tthis.setNumberRange = function (minNumber, maxNumber) {\n\t\tif (maxNumber > minNumber) {\n\t\t\tminNum = minNumber;\n\t\t\tmaxNum = maxNumber;\n\t\t} else {\n\t\t\tthrow new RangeError('maxNumber (' + maxNumber + ') is not greater than minNumber (' + minNumber + ')');\n\t\t}\n\t}\n\n\tthis.colourAt = function (number) {\n\t\treturn calcHex(number, startColour.substring(0, 2), endColour.substring(0, 2))\n\t\t\t+ calcHex(number, startColour.substring(2, 4), endColour.substring(2, 4))\n\t\t\t+ calcHex(number, startColour.substring(4, 6), endColour.substring(4, 6));\n\t}\n\n\tfunction calcHex(number, channelStart_Base16, channelEnd_Base16) {\n\t\tvar num = number;\n\t\tif (num < minNum) {\n\t\t\tnum = minNum;\n\t\t}\n\t\tif (num > maxNum) {\n\t\t\tnum = maxNum;\n\t\t}\n\t\tvar numRange = maxNum - minNum;\n\t\tvar cStart_Base10 = parseInt(channelStart_Base16, 16);\n\t\tvar cEnd_Base10 = parseInt(channelEnd_Base16, 16);\n\t\tvar cPerUnit = (cEnd_Base10 - cStart_Base10) / numRange;\n\t\tvar c_Base10 = Math.round(cPerUnit * (num - minNum) + cStart_Base10);\n\t\treturn formatHex(c_Base10.toString(16));\n\t}\n\n\tfunction formatHex(hex) {\n\t\tif (hex.length === 1) {\n\t\t\treturn '0' + hex;\n\t\t} else {\n\t\t\treturn hex;\n\t\t}\n\t}\n\n\tfunction isHexColour(string) {\n\t\tvar regex = /^#?[0-9a-fA-F]{6}$/i;\n\t\treturn regex.test(string);\n\t}\n\n\tfunction getHexColour(string) {\n\t\tif (isHexColour(string)) {\n\t\t\treturn string.substring(string.length - 6, string.length);\n\t\t} else {\n\t\t\tvar name = string.toLowerCase();\n\t\t\tif (colourNames.hasOwnProperty(name)) {\n\t\t\t\treturn colourNames[name];\n\t\t\t}\n\t\t\tthrow new Error(string + ' is not a valid colour.');\n\t\t}\n\t}\n\n\t// Extended list of CSS colornames s taken from\n\t// http://www.w3.org/TR/css3-color/#svg-color\n\tvar colourNames = {\n\t\taliceblue: \"F0F8FF\",\n\t\tantiquewhite: \"FAEBD7\",\n\t\taqua: \"00FFFF\",\n\t\taquamarine: \"7FFFD4\",\n\t\tazure: \"F0FFFF\",\n\t\tbeige: \"F5F5DC\",\n\t\tbisque: \"FFE4C4\",\n\t\tblack: \"000000\",\n\t\tblanchedalmond: \"FFEBCD\",\n\t\tblue: \"0000FF\",\n\t\tblueviolet: \"8A2BE2\",\n\t\tbrown: \"A52A2A\",\n\t\tburlywood: \"DEB887\",\n\t\tcadetblue: \"5F9EA0\",\n\t\tchartreuse: \"7FFF00\",\n\t\tchocolate: \"D2691E\",\n\t\tcoral: \"FF7F50\",\n\t\tcornflowerblue: \"6495ED\",\n\t\tcornsilk: \"FFF8DC\",\n\t\tcrimson: \"DC143C\",\n\t\tcyan: \"00FFFF\",\n\t\tdarkblue: \"00008B\",\n\t\tdarkcyan: \"008B8B\",\n\t\tdarkgoldenrod: \"B8860B\",\n\t\tdarkgray: \"A9A9A9\",\n\t\tdarkgreen: \"006400\",\n\t\tdarkgrey: \"A9A9A9\",\n\t\tdarkkhaki: \"BDB76B\",\n\t\tdarkmagenta: \"8B008B\",\n\t\tdarkolivegreen: \"556B2F\",\n\t\tdarkorange: \"FF8C00\",\n\t\tdarkorchid: \"9932CC\",\n\t\tdarkred: \"8B0000\",\n\t\tdarksalmon: \"E9967A\",\n\t\tdarkseagreen: \"8FBC8F\",\n\t\tdarkslateblue: \"483D8B\",\n\t\tdarkslategray: \"2F4F4F\",\n\t\tdarkslategrey: \"2F4F4F\",\n\t\tdarkturquoise: \"00CED1\",\n\t\tdarkviolet: \"9400D3\",\n\t\tdeeppink: \"FF1493\",\n\t\tdeepskyblue: \"00BFFF\",\n\t\tdimgray: \"696969\",\n\t\tdimgrey: \"696969\",\n\t\tdodgerblue: \"1E90FF\",\n\t\tfirebrick: \"B22222\",\n\t\tfloralwhite: \"FFFAF0\",\n\t\tforestgreen: \"228B22\",\n\t\tfuchsia: \"FF00FF\",\n\t\tgainsboro: \"DCDCDC\",\n\t\tghostwhite: \"F8F8FF\",\n\t\tgold: \"FFD700\",\n\t\tgoldenrod: \"DAA520\",\n\t\tgray: \"808080\",\n\t\tgreen: \"008000\",\n\t\tgreenyellow: \"ADFF2F\",\n\t\tgrey: \"808080\",\n\t\thoneydew: \"F0FFF0\",\n\t\thotpink: \"FF69B4\",\n\t\tindianred: \"CD5C5C\",\n\t\tindigo: \"4B0082\",\n\t\tivory: \"FFFFF0\",\n\t\tkhaki: \"F0E68C\",\n\t\tlavender: \"E6E6FA\",\n\t\tlavenderblush: \"FFF0F5\",\n\t\tlawngreen: \"7CFC00\",\n\t\tlemonchiffon: \"FFFACD\",\n\t\tlightblue: \"ADD8E6\",\n\t\tlightcoral: \"F08080\",\n\t\tlightcyan: \"E0FFFF\",\n\t\tlightgoldenrodyellow: \"FAFAD2\",\n\t\tlightgray: \"D3D3D3\",\n\t\tlightgreen: \"90EE90\",\n\t\tlightgrey: \"D3D3D3\",\n\t\tlightpink: \"FFB6C1\",\n\t\tlightsalmon: \"FFA07A\",\n\t\tlightseagreen: \"20B2AA\",\n\t\tlightskyblue: \"87CEFA\",\n\t\tlightslategray: \"778899\",\n\t\tlightslategrey: \"778899\",\n\t\tlightsteelblue: \"B0C4DE\",\n\t\tlightyellow: \"FFFFE0\",\n\t\tlime: \"00FF00\",\n\t\tlimegreen: \"32CD32\",\n\t\tlinen: \"FAF0E6\",\n\t\tmagenta: \"FF00FF\",\n\t\tmaroon: \"800000\",\n\t\tmediumaquamarine: \"66CDAA\",\n\t\tmediumblue: \"0000CD\",\n\t\tmediumorchid: \"BA55D3\",\n\t\tmediumpurple: \"9370DB\",\n\t\tmediumseagreen: \"3CB371\",\n\t\tmediumslateblue: \"7B68EE\",\n\t\tmediumspringgreen: \"00FA9A\",\n\t\tmediumturquoise: \"48D1CC\",\n\t\tmediumvioletred: \"C71585\",\n\t\tmidnightblue: \"191970\",\n\t\tmintcream: \"F5FFFA\",\n\t\tmistyrose: \"FFE4E1\",\n\t\tmoccasin: \"FFE4B5\",\n\t\tnavajowhite: \"FFDEAD\",\n\t\tnavy: \"000080\",\n\t\toldlace: \"FDF5E6\",\n\t\tolive: \"808000\",\n\t\tolivedrab: \"6B8E23\",\n\t\torange: \"FFA500\",\n\t\torangered: \"FF4500\",\n\t\torchid: \"DA70D6\",\n\t\tpalegoldenrod: \"EEE8AA\",\n\t\tpalegreen: \"98FB98\",\n\t\tpaleturquoise: \"AFEEEE\",\n\t\tpalevioletred: \"DB7093\",\n\t\tpapayawhip: \"FFEFD5\",\n\t\tpeachpuff: \"FFDAB9\",\n\t\tperu: \"CD853F\",\n\t\tpink: \"FFC0CB\",\n\t\tplum: \"DDA0DD\",\n\t\tpowderblue: \"B0E0E6\",\n\t\tpurple: \"800080\",\n\t\tred: \"FF0000\",\n\t\trosybrown: \"BC8F8F\",\n\t\troyalblue: \"4169E1\",\n\t\tsaddlebrown: \"8B4513\",\n\t\tsalmon: \"FA8072\",\n\t\tsandybrown: \"F4A460\",\n\t\tseagreen: \"2E8B57\",\n\t\tseashell: \"FFF5EE\",\n\t\tsienna: \"A0522D\",\n\t\tsilver: \"C0C0C0\",\n\t\tskyblue: \"87CEEB\",\n\t\tslateblue: \"6A5ACD\",\n\t\tslategray: \"708090\",\n\t\tslategrey: \"708090\",\n\t\tsnow: \"FFFAFA\",\n\t\tspringgreen: \"00FF7F\",\n\t\tsteelblue: \"4682B4\",\n\t\ttan: \"D2B48C\",\n\t\tteal: \"008080\",\n\t\tthistle: \"D8BFD8\",\n\t\ttomato: \"FF6347\",\n\t\tturquoise: \"40E0D0\",\n\t\tviolet: \"EE82EE\",\n\t\twheat: \"F5DEB3\",\n\t\twhite: \"FFFFFF\",\n\t\twhitesmoke: \"F5F5F5\",\n\t\tyellow: \"FFFF00\",\n\t\tyellowgreen: \"9ACD32\"\n\t}\n}\n\n// if (typeof module !== 'undefined') {\n//   module.exports = Rainbow;\n// }\n","import { ScatterGL } from 'scatter-gl';\nimport React, { useEffect, useRef, useContext, useState } from 'react';\nimport {\n    ControlGroup, Button, Icon, ButtonGroup, Callout, RangeSlider,\n    Divider,\n    Label,\n    Tag\n} from \"@blueprintjs/core\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\n\nimport { AppContext } from '../../context/AppContext';\nimport { getMinMax } from './utils';\n\nimport Rainbow from './rainbowvis';\nimport { randomColor } from 'randomcolor';\n\nimport \"./DimPlot.css\";\nimport { AppToaster } from \"../Spinners/AppToaster\";\n\nconst DimPlot = (props) => {\n    const container = useRef();\n\n    // ref to the plot object\n    const [scatterplot, setScatterplot] = useState(null);\n    // set which cluster to highlight, also for custom selections\n    const [clusHighlight, setClusHighlight] = useState(null);\n    // show a gradient on the plot ?\n    const [showGradient, setShowGradient] = useState(false);\n    // expression min & max\n    const [exprMinMax, setExprMinMax] = useState(null);\n    // user selected min and max from UI\n    const [sliderMinMax, setSliderMinMax] = useState(exprMinMax);\n    // gradient scale\n    const [gradient, setGradient] = useState(null);\n    // first render ?\n    const [renderCount, setRenderCount] = useState(true);\n\n    const { genesInfo, geneColSel } = useContext(AppContext);\n\n    // keeps track of what points were selected in lasso selections\n    const [selectedPoints, setSelectedPoints] = useState(null);\n    // set mode for plot\n    const [plotMode, setPlotMode] = useState('PAN');\n\n    const max = Math.max(...props?.clusterData?.clusters);\n\n    // if either gene or expression changes, compute gradients and min/max\n    useEffect(() => {\n        if (props?.gene === null) {\n            setShowGradient(false);\n            setGradient(null);\n        }\n\n        let index = props?.selectedClusterIndex?.[props?.gene];\n        let expr = props?.selectedClusterSummary?.[index]?.expr;\n\n        if (expr) {\n            let exprMinMax = getMinMax(expr);\n            let val = exprMinMax[1] === 0 ? 0.01 : exprMinMax[1];\n            let tmpgradient = new Rainbow();\n            tmpgradient.setSpectrum('#F5F8FA', \"#2965CC\");\n            tmpgradient.setNumberRange(0, val);\n            if (exprMinMax[0] !== exprMinMax[1]) {\n                setShowGradient(true);\n                setSliderMinMax([0, val]);\n                setExprMinMax([0, val]);\n            } else {\n                setShowGradient(false);\n                AppToaster.show({ icon: \"warning-sign\", intent: \"warning\", message: `${genesInfo[geneColSel][props?.gene]} is not expressed in any cell (mean = 0)` })\n            }\n            setGradient(tmpgradient);\n        }\n    }, [props?.selectedClusterIndex?.[props?.gene], \n        props?.selectedClusterSummary?.[props?.selectedClusterIndex?.[props?.gene]]?.expr,\n        props?.gene]);\n\n    // hook to also react when user changes the slider\n    useEffect(() => {\n\n        if (Array.isArray(sliderMinMax)) {\n            let tmpgradient = new Rainbow();\n            tmpgradient.setSpectrum('#F5F8FA', \"#2965CC\");\n            tmpgradient.setNumberRange(...sliderMinMax);\n            setGradient(tmpgradient);\n            setShowGradient(true);\n        }\n\n    }, [sliderMinMax]);\n\n    useEffect(() => {\n\n        const containerEl = container.current;\n\n        if (containerEl) {\n\n            let tmp_scatterplot = scatterplot;\n\n            // only create the plot object once\n            if (!tmp_scatterplot) {\n                const containerEl = container.current;\n\n                containerEl.style.width = \"95%\";\n                containerEl.style.height = \"95%\";\n\n                tmp_scatterplot = new ScatterGL(containerEl, {\n                    onSelect: (points) => {\n                        if (points.length !== 0) {\n                            setSelectedPoints(points);\n                        }\n                    },\n                    orbitControls: {\n                        zoomSpeed: 1.25,\n                    },\n                    styles: {\n                        point: {\n                            scaleDefault: 1,\n                            scaleSelected: 1.25,\n                            scaleHover: 1.25,\n                        }\n                    }\n                });\n\n                tmp_scatterplot.setPanMode();\n                setScatterplot(tmp_scatterplot);\n            }\n\n            let data = null;\n\n            if (props?.showAnimation) {\n                data = props?.animateData;\n            } else {\n                if (props?.defaultRedDims === \"TSNE\") {\n                    data = props?.tsneData;\n                } else if (props?.defaultRedDims === \"UMAP\") {\n                    data = props?.umapData;\n                }\n            }\n\n            // if dimensions are available\n            if (data) {\n\n                let cluster_mappings = props?.clusterData?.clusters;\n                const cluster_colors = props?.clusterColors;\n\n                let points = []\n                data.x.forEach((x, i) => {\n                    points.push([x, data.y[i]]);\n                });\n\n                let metadata = {\n                    clusters: cluster_mappings\n                };\n                const dataset = new ScatterGL.Dataset(points, metadata);\n\n                if (renderCount) {\n                    tmp_scatterplot.render(dataset);\n                    setRenderCount(false);\n                } else {\n                    tmp_scatterplot.updateDataset(dataset);\n                }\n\n                // callback for coloring cells on the plot\n                // by default chooses the cluster assigned color for the plot\n                // if a gradient bar is available, sets gradient \n                // if a cluster is highlighted, grays out all other cells except the cells\n                // in the cluster or selection\n                // priority of rendering\n                // gradient selection > cluster selection > graying out\n                // an initial implementation also used a per cluster gradient to color cells\n                // by expression, commmented out\n                tmp_scatterplot.setPointColorer((i, selectedIndices, hoverIndex) => {\n\n                    if (selectedIndices.has(i)) {\n                        return \"#30404D\";\n                    }\n\n                    if (clusHighlight != null) {\n                        if (!String(clusHighlight).startsWith(\"cs\")) {\n                            if (clusHighlight !== cluster_mappings[i]) return '#D3D3D3';\n                        } else {\n                            if (!props?.customSelection[clusHighlight].includes(i)) return '#D3D3D3';\n                        }\n                    }\n\n                    if (props?.gene !== null) {\n                        let index = props?.selectedClusterIndex?.[props?.gene];\n                        let expr = props?.selectedClusterSummary?.[index]?.expr;\n\n                        if (Array.isArray(expr)) {\n                            return \"#\" + gradient.colorAt(expr?.[i]);\n                            // if we want per cell gradient \n                            // let colorGradients = cluster_colors.map(x => {\n                            //     var gradient = new Rainbow();\n                            //     gradient.setSpectrum('#D3D3D3', x);\n                            //     let val = exprMinMax[1] === 0 ? 0.01 : exprMinMax[1];\n                            //     gradient.setNumberRange(0, val);\n                            //     return gradient;\n                            // });\n\n                            // return \"#\" + colorGradients[cluster_mappings[i]].colorAt(props?.selectedClusterSummary?.[gene]?.expr?.[i])\n                        }\n                    }\n\n                    if (clusHighlight != null && String(clusHighlight).startsWith(\"cs\")) {\n                        let tmpclus = parseInt(clusHighlight.replace(\"cs\", \"\"));\n                        return cluster_colors[max + tmpclus];\n                    } else {\n                        return cluster_colors[cluster_mappings[i]];\n                    }\n                });\n            }\n        }\n    }, [props?.tsneData, props?.umapData, props?.animateData, props?.defaultRedDims, \n            gradient, clusHighlight, props?.clusterData]);\n\n    const setInteraction = (x) => {\n        if (x === \"SELECT\") {\n            scatterplot.setSelectMode();\n            setPlotMode(\"SELECT\");\n        } else {\n            scatterplot.setPanMode();\n            setPlotMode(\"PAN\");\n        }\n    }\n\n    const clearPoints = () => {\n        setSelectedPoints(null);\n        scatterplot.select(null);\n    }\n\n    // save use selected selection of cells\n    const savePoints = () => {\n        // generate random color\n        let color = randomColor({ luminosity: 'dark', count: 1 });\n        let tmpcolor = [...props?.clusterColors];\n        tmpcolor.push(color[0]);\n        props?.setClusterColors(tmpcolor);\n\n        let cid = Object.keys(props?.customSelection).length;\n        let tmpSelection = { ...props?.customSelection };\n        tmpSelection[`cs${cid + 1}`] = selectedPoints;\n        props?.setCustomSelection(tmpSelection);\n\n        setSelectedPoints(null);\n        scatterplot.select(null);\n    }\n\n    function handleSaveEmbedding() {\n        console.log(\"handleSaveEmbedding\");\n\n        const containerEl = container.current;\n        if (containerEl) {\n            // preserve drawing buffers is false, so render and capture state right away\n            scatterplot.renderScatterPlot();\n            const iData = scatterplot.scatterPlot.renderer.domElement.toDataURL();\n\n            let tmp = [...props?.savedPlot];\n\n            tmp.push({\n                \"image\": iData,\n                \"config\": {\n                    \"cluster\": props?.selectedCluster,\n                    \"gene\": props?.gene,\n                    \"highlight\": clusHighlight,\n                    \"embedding\": props?.defaultRedDims\n                }\n            });\n\n            props?.setSavedPlot(tmp);\n        }\n    }\n\n    return (\n        <div className=\"scatter-plot\">\n            <ButtonGroup style={{ minWidth: 75, minHeight: 150 }}\n                fill={false}\n                large={false}\n                minimal={false}\n                vertical={true}\n                className='left-sidebar'\n            >\n                <Button className='dim-button'\n                    disabled={props?.redDims.indexOf(\"TSNE\") === -1}\n                    onClick={() => props?.setDefaultRedDims(\"TSNE\")}\n                    intent={props?.defaultRedDims === \"TSNE\" ? \"primary\" : \"\"}\n                >\n                    <Icon icon=\"heatmap\"></Icon>\n                    <br />\n                    <span>t-SNE</span>\n                </Button>\n                <Button className='dim-button'\n                    disabled={props?.redDims.indexOf(\"UMAP\") === -1}\n                    onClick={() => props?.setDefaultRedDims(\"UMAP\")}\n                    intent={props?.defaultRedDims === \"UMAP\" ? \"primary\" : \"\"}\n                >\n                    <Icon icon=\"heatmap\"></Icon><br />\n                    <span>UMAP</span>\n                </Button>\n                <Button className='dim-button'\n                    disabled={true}\n                >\n                    <Icon icon=\"heat-grid\"></Icon>\n                    <br />\n                    <span>HEATMAP (coming soon)</span>\n                </Button>\n            </ButtonGroup>\n            <div className=\"top-header\">\n                <ControlGroup fill={false} vertical={false}\n                    style={{\n                        marginRight: '4px'\n                    }}>\n                    <Tooltip2 content=\"Interactively visualize embeddings\">\n                        <Button icon=\"play\"\n                            onClick={() => {\n                                props?.setShowAnimation(true);\n                                props?.setTriggerAnimation(true);\n                            }}>Animate</Button>\n                    </Tooltip2>\n                    <Tooltip2 content=\"Save this embedding\">\n                        <Button icon=\"inheritance\"\n                            onClick={handleSaveEmbedding}>Save</Button>\n                    </Tooltip2>\n                </ControlGroup>\n                <ControlGroup fill={false} vertical={false}>\n                    <Button active={plotMode === \"PAN\"}\n                        intent={plotMode === \"PAN\" ? \"primary\" : \"none\"}\n                        icon=\"hand-up\" onClick={x => setInteraction(\"PAN\")}>Pan</Button>\n                    <Button active={plotMode === \"SELECT\"}\n                        intent={plotMode === \"SELECT\" ? \"primary\" : \"none\"}\n                        icon=\"widget\" onClick={x => setInteraction(\"SELECT\")}>Selection</Button>\n                </ControlGroup>\n            </div>\n            {\n                props?.showAnimation ?\n                    <Label className='iter'>Iteration: {props?.animateData?.iteration}</Label>\n                    : \"\"\n            }\n            <div className='dim-plot'>\n                {\n                    props?.defaultRedDims ?\n                        <div ref={container} ></div> :\n                        \"Choose an Embedding... or Embeddings are being computed...\"\n                }\n            </div>\n            <div className='right-sidebar'>\n                <div style={{ width: '100%' }}>\n                    {\n                        <div className='right-sidebar-cluster'>\n                            <Callout title=\"CLUSTERS\">\n                                <ul>\n                                    {props?.clusterColors?.map((x, i) => {\n                                        return i < props?.clusterColors.length - Object.keys(props?.customSelection).length ?\n                                            (<li key={i}\n                                                className={clusHighlight === i ? 'legend-highlight' : ''}\n                                                style={{ color: x }}\n                                                onClick={() => {\n                                                    if (i === clusHighlight) {\n                                                        setClusHighlight(null);\n                                                    } else {\n                                                        setClusHighlight(i);\n                                                    }\n                                                }}\n                                            > Cluster {i + 1} </li>)\n                                            : \"\"\n                                    })}\n                                </ul>\n                            </Callout>\n                            {\n                                (Object.keys(props?.customSelection).length > 0 || (selectedPoints && selectedPoints.length > 0)) ?\n                                    <Callout title=\"CUSTOM SELECTIONS\">\n                                        <div\n                                            style={{\n                                                paddingTop: '5px'\n                                            }}>\n                                            <ul>\n                                                {Object.keys(props?.customSelection)?.map((x, i) => {\n                                                    return (<li key={x}\n                                                        className={clusHighlight === x ? 'legend-highlight' : ''}\n                                                        style={{ color: props?.clusterColors[Math.max(...props?.clusterData?.clusters) + 1 + i] }}\n                                                    >\n                                                        <div style={{\n                                                            display: 'inline-flex',\n                                                            alignItems: 'center',\n                                                            flexDirection: 'row'\n                                                        }}>\n                                                            <span\n                                                                style={{\n                                                                    alignSelf: 'center'\n                                                                }}\n                                                                onClick={() => {\n                                                                    if (x === clusHighlight) {\n                                                                        setClusHighlight(null);\n                                                                    } else {\n                                                                        setClusHighlight(x);\n                                                                    }\n                                                                }}>Custom Selection {x.replace(\"cs\", \"\")}\n                                                            </span>\n                                                            <Icon\n                                                                size={12}\n                                                                icon=\"trash\"\n                                                                style={{\n                                                                    paddingLeft: '2px'\n                                                                }}\n                                                                onClick={() => {\n                                                                    let tmpSel = { ...props?.customSelection };\n                                                                    delete tmpSel[x];\n                                                                    props?.setCustomSelection(tmpSel);\n\n                                                                    let tmpcolors = [...props?.clusterColors];\n                                                                    tmpcolors = tmpcolors.slice(0, tmpcolors.length - 1);\n                                                                    props?.setClusterColors(tmpcolors);\n\n                                                                    props?.setDelCustomSelection(x);\n\n                                                                    if (clusHighlight === x) {\n                                                                        setClusHighlight(null);\n                                                                    }\n                                                                }}></Icon>\n                                                        </div>\n                                                    </li>)\n                                                })}\n                                            </ul>\n                                        </div>\n                                        {\n                                            selectedPoints && selectedPoints.length > 0 ?\n                                                <div>\n                                                    <Divider />\n                                                    <div className='selection-container'>\n                                                        <span>{selectedPoints.length} cells selected</span>\n                                                        <div className='selection-button-container'>\n                                                            <Button small={true} intent='primary'\n                                                                onClick={savePoints}>Save</Button>\n                                                            <Button small={true}\n                                                                onClick={clearPoints}>Clear</Button>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                :\n                                                \"\"\n                                        }\n                                    </Callout>\n                                    :\n                                    \"\"\n                            }\n                        </div>\n                    }\n                    {showGradient ?\n                        <div className='right-sidebar-slider'>\n                            <Callout>\n                                <span>Gradient for <Tag\n                                    minimal={true}\n                                    intent='primary' onRemove={() => {\n                                        props?.setGene(null);\n                                    }}>{genesInfo[geneColSel][props?.gene]}</Tag>&nbsp;\n                                    <Tooltip2 content=\"Use the slider to adjust the color gradient of the plot. Useful when data is skewed\n                                by either a few lowly or highly expressed cells\" openOnTargetFocus={false}>\n                                        <Icon icon=\"help\"></Icon>\n                                    </Tooltip2>\n                                </span>\n                                <div className='dim-slider-container'>\n                                    <div className='dim-slider-gradient'>\n                                        {/* <span>{Math.round(exprMinMax[0])}</span>&nbsp; */}\n                                        <div\n                                            style={{\n                                                backgroundImage: `linear-gradient(to right, #F5F8FA ${(sliderMinMax[0] - exprMinMax[0]) * 100 / (exprMinMax[1] - exprMinMax[0])}%, ${((sliderMinMax[1] + sliderMinMax[0] - (2 * exprMinMax[0]))) * 100 / (2 * (exprMinMax[1] - exprMinMax[0]))}%, #2965CC ${(100 - (exprMinMax[1] - sliderMinMax[1]) * 100 / (exprMinMax[1] - exprMinMax[0]))}%)`,\n                                                width: '175px', height: '15px',\n                                            }}></div>&nbsp;\n                                        {/* <span>{Math.round(exprMinMax[1])}</span> */}\n                                    </div>\n                                    <div className='dim-range-slider'>\n                                        <RangeSlider\n                                            min={Math.round(exprMinMax[0])}\n                                            max={Math.round(exprMinMax[1])}\n                                            stepSize={Math.round(exprMinMax[1] - exprMinMax[0]) / 10}\n                                            labelValues={[Math.round(exprMinMax[0]), Math.round(exprMinMax[1])]}\n                                            onChange={(range) => { setSliderMinMax(range) }}\n                                            value={[Math.round(sliderMinMax[0]), Math.round(sliderMinMax[1])]}\n                                            vertical={false}\n                                        />\n                                    </div>\n                                </div>\n                            </Callout>\n                        </div>\n                        :\n                        \"\"\n                    }\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default React.memo(DimPlot);\n","import { useEffect, useRef } from \"react\";\nimport * as d3 from 'd3';\n\nconst StackedHistogram = (props) => {\n    const container = useRef();\n\n    useEffect(() => {\n\n        let data = props?.data;\n        let propwidth = props?.width;\n        let color = props?.color;\n        let clusters = props?.clusters;\n        let clusterlabel = props?.clusterlabel;\n\n        if (!propwidth) {\n            propwidth = 325;\n        }\n\n        if (!color) {\n            color = \"#00B3A4\";\n        }\n\n        if (!data) return \"\";\n\n        let containerEl = container.current;\n        containerEl.innerHTML = \"\";\n\n        const margin = { top: 10, right: 30, bottom: 30, left: 40 },\n            width = propwidth - margin.left - margin.right,\n            height = 150 - margin.top - margin.bottom;\n\n        const svg = d3.select(containerEl)\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                `translate(${margin.left},${margin.top})`);\n\n        const x = d3.scaleLinear()\n            .domain(d3.extent(data))\n            .range([0, width]);\n\n        svg.append(\"g\")\n            .attr(\"transform\", `translate(0, ${height/2})`)\n            .call(d3.axisBottom(x)\n                .ticks(5)\n                .tickValues(d3.extent(data)));\n\n        const histogram = d3.bin()\n            .value((d) => { return d; })\n            .domain(x.domain())\n            .thresholds(d3.thresholdScott);\n\n        const allCells = histogram(data.filter((d, i) => { return clusters?.[i] === 0 }));\n        const clusterCells = histogram(data.filter((d, i) => { return clusters?.[i] === 1 }));\n        const allCellsMax = d3.max(allCells, (d) => { return d.length; });\n        const clusterCellsMax = d3.max(clusterCells, (d) => { return d.length; });\n        \n        const y = d3.scaleLinear()\n            .range([height, 0])\n            .domain([-1, 1]);\n\n        // svg.append(\"g\")\n        //     .call(d3.axisLeft(y));\n\n        svg.selectAll(\"rectAll\")\n            .data(allCells)\n            .join(\"rect\")\n            .attr(\"x\", 1)\n            .attr(\"transform\", (d) => { return `translate(${x(d.x0)} , ${y(0)})` })\n            .attr(\"width\", (d) => { return x(d.x1) - x(d.x0) - 1; })\n            .attr(\"height\", (d) => { return y(-d.length/allCellsMax) - height/2; })\n            .style(\"fill\", \"#D3D3D3\")\n            .style(\"opacity\", 0.6)\n\n        svg.selectAll(\"rectCluster\")\n            .data(clusterCells)\n            .enter()\n            .append(\"rect\")\n            .attr(\"x\", 1)\n            .attr(\"transform\", (d) => { return `translate(${x(d.x0)}, ${y(d.length/clusterCellsMax)})` })\n            .attr(\"width\", (d) => { return x(d.x1) - x(d.x0) - 1; })\n            .attr(\"height\", (d) => { return height/2 - y(d.length/clusterCellsMax); })\n            .style(\"fill\", color)\n            .style(\"opacity\", 0.6)\n\n        // svg.append(\"circle\").attr(\"cx\", width - 50).attr(\"cy\", 5).attr(\"r\", 3).style(\"fill\", \"#D3D3D3\")\n        // svg.append(\"circle\").attr(\"cx\", width - 50).attr(\"cy\", 15).attr(\"r\", 3).style(\"fill\", color)\n        \n        svg.append(\"text\").attr(\"x\", width - 20).attr(\"y\", y(-0.5)).text(\"other cells\")\n            .style(\"font-size\", \"10px\").attr(\"alignment-baseline\", \"middle\");\n        \n        if (clusterlabel.startsWith(\"Custom\")) {\n            let text = clusterlabel.split(\" \");\n            text.forEach((t, i) => {\n                svg.append(\"text\").attr(\"x\", width - 20).attr(\"y\", y(0.7 - (i * 0.17))).text(t)\n                .style(\"font-size\", \"10px\").attr(\"alignment-baseline\", \"middle\")\n                .style(\"fill\", color);\n            });\n        } else {\n            svg.append(\"text\").attr(\"x\", width - 20).attr(\"y\", y(0.5)).text(clusterlabel)\n            .style(\"font-size\", \"10px\").attr(\"alignment-baseline\", \"middle\")\n            .style(\"fill\", color);\n        }\n    }, []);\n\n    return (\n        <div ref={container}></div>\n    );\n};\n\nexport default StackedHistogram;","import { useRef } from \"react\";\n\n// uses two divs to fill out bars given various props\nconst Cell = (props) => {\n    const container = useRef();\n\n    let propwidth = props?.width;\n    let minmax = props?.minmax;\n    let score = props?.score;\n    let colorscale = props?.colorscale;\n    let colorscore = props?.colorscore;\n    let color = props?.color;\n\n    let percWidth = ((score - minmax[0]) / (minmax[1] - minmax[0]));\n\n    if (!propwidth) {\n        propwidth = \"100%\";\n    }\n\n    if (!color) {\n        color = \"#00B3A4\";\n    }\n\n    return (\n        <div ref={container}\n            style={{\n                width: propwidth, height: '15px',\n                margin: '1px', border: '1px solid gainsboro',\n                alignItems: 'center'\n            }}>\n            {colorscale ?\n                <div style={{\n                    width: `${colorscore * 100}%`,\n                    backgroundColor: colorscale(colorscore),\n                    height: '100%'\n                }}></div>\n                :\n                <div style={{\n                    width: `${percWidth * 100}%`,\n                    backgroundColor: color,\n                    height: '100%'\n                }}>\n                </div>\n            }\n        </div>\n    );\n};\n\nexport default Cell;","import { useRef } from \"react\";\nimport * as d3 from 'd3';\n\n// similar to cell, but fills the entire div, \n// width is not controlled in this case\nconst HeatmapCell = (props) => {\n    const container = useRef();\n\n    let propwidth = props?.width;\n    let score = props?.score;\n    let minmax = props?.minmax;\n\n    // inverted scale - blue for +ve, red for -ve\n    var lower = minmax[0];\n    var upper = minmax[1];\n\n    var limit = 0;\n    if (lower < 0) {\n        limit = -lower;\n    }\n    if (upper > 0 && upper > limit) {\n        limit = upper;\n    }\n    const detectedScale = d3.scaleSequential(d3.interpolateRdYlBu).domain([limit, -limit]);\n\n    if (!propwidth) {\n        propwidth = \"100%\";\n    }\n\n    return (\n        <div ref={container}\n            style={{\n                width: propwidth, height: '15px',\n                margin: '1px', border: '1px solid gainsboro',\n                alignItems: 'center',\n                backgroundColor: detectedScale(score)\n            }}>\n            <div style={{\n                width: '100%',\n                backgroundColor: detectedScale(score),\n                height: '100%'\n            }}></div>\n        </div>\n    );\n};\n\nexport default HeatmapCell;\n","import React, { useEffect, useContext, useState, useMemo } from 'react';\nimport {\n    Button, H4, H5, Icon, Collapse, InputGroup, Text,\n    RangeSlider, Tag, HTMLSelect, Classes, Card, Elevation\n} from \"@blueprintjs/core\";\nimport { Popover2 } from \"@blueprintjs/popover2\";\nimport { Virtuoso } from 'react-virtuoso';\nimport * as d3 from 'd3';\n\nimport { AppContext } from '../../context/AppContext';\nimport StackedHistogram from '../Plots/StackedHistogram';\n\nimport Cell from '../Plots/Cell.js';\nimport HeatmapCell from '../Plots/HeatmapCell';\n// import Histogram from '../Plots/Histogram';\nimport './markers.css';\n\nconst MarkerPlot = (props) => {\n\n    const { genesInfo, geneColSel, setGeneColSel } = useContext(AppContext);\n\n    // what cluster is selected\n    const [clusSel, setClusSel] = useState(null);\n    // binary vector for stacked histogram plots, this cluster (1) vs others (0)\n    const [clusArrayStacked, setClusArrayStacked] = useState(null);\n    // gene search\n    const [searchInput, setSearchInput] = useState(null);\n\n    // ranges for various marker stats\n    const [meanMinMax, setMeanMinMax] = useState(null);\n    const [deltaMinMax, setDeltaMinMax] = useState(null);\n    const [lfcMinMax, setLfcMinMax] = useState(null);\n    const [detectedMinMax, setDetectedMinMax] = useState(null);\n    const [minMaxs, setMinMaxs] = useState(null);\n\n    // stores range filters from UI\n    const [markerFilter, setMarkerFilter] = useState({});\n    // records to show after filtering\n    const [prosRecords, setProsRecords] = useState(null);\n\n    // scale to use for detected on expression bar\n    const detectedScale = d3.interpolateRdYlBu; //d3.interpolateRdBu;\n    // d3.scaleSequential()\n    // .domain([0, 1])\n    // .range([\"red\", \"blue\"])\n    // .interpolate(d3.interpolateHcl);\n\n    // if a cluster changes, its summary data is requested from the worker\n    // pre-process results for UI\n    useEffect(() => {\n        if (!props?.selectedClusterSummary) return props?.selectedClusterSummary;\n\n        let trecs = props?.selectedClusterSummary;\n\n        if (trecs.length === 0) return trecs;\n\n        let tmpmeans = trecs.map(x => x?.mean);\n        let tmeanMinMax = d3.extent(tmpmeans)\n        let tmeanval = tmeanMinMax[1] === 0 ? 0.01 : tmeanMinMax[1];\n        setMeanMinMax([parseFloat(tmeanMinMax[0].toFixed(2)), parseFloat(tmeanval.toFixed(2))]);\n\n        let tmpdeltas = trecs.map(x => x?.delta);\n        let tdeltaMinMax = d3.extent(tmpdeltas)\n        let tdeltaval = tdeltaMinMax[1] === 0 ? 0.01 : tdeltaMinMax[1];\n        setDeltaMinMax([parseFloat(tdeltaMinMax[0].toFixed(2)), parseFloat(tdeltaval.toFixed(2))]);\n\n        let tmplfcs = trecs.map(x => x?.lfc);\n        let tlfcsMinMax = d3.extent(tmplfcs)\n        let tlfcsval = tlfcsMinMax[1] === 0 ? 0.01 : tlfcsMinMax[1];\n        setLfcMinMax([parseFloat(tlfcsMinMax[0].toFixed(2)), parseFloat(tlfcsval.toFixed(2))]);\n\n        let tmpdetects = trecs.map(x => x?.detected);\n        let tdetectsMinMax = d3.extent(tmpdetects)\n        let tdetecval = tdetectsMinMax[1] === 0 ? 0.01 : tdetectsMinMax[1];\n        setDetectedMinMax([parseFloat(tdetectsMinMax[0].toFixed(2)), parseFloat(tdetecval.toFixed(2))]);\n\n        setMinMaxs({\n            \"lfc\": [parseFloat(tlfcsMinMax[0].toFixed(2)), parseFloat(tlfcsval.toFixed(2))],\n            \"mean\": [parseFloat(tmeanMinMax[0].toFixed(2)), parseFloat(tmeanval.toFixed(2))],\n            \"detected\": [parseFloat(tdetectsMinMax[0].toFixed(2)), parseFloat(tdetecval.toFixed(2))],\n            \"delta\": [parseFloat(tdeltaMinMax[0].toFixed(2)), parseFloat(tdeltaval.toFixed(2))],\n        });\n\n        let sortedRows = [...trecs];\n\n        setMarkerFilter({\n            \"lfc\": markerFilter?.lfc ? markerFilter?.lfc : [0, parseFloat(tlfcsval.toFixed(2))],\n            \"delta\": markerFilter?.delta ? markerFilter?.delta : [0, parseFloat(tdeltaval.toFixed(2))],\n            \"mean\": markerFilter?.mean ? markerFilter?.mean : [parseFloat(tmeanMinMax[0].toFixed(2)), parseFloat(tmeanval.toFixed(2))],\n            \"detected\": markerFilter?.detected ? markerFilter?.detected : [parseFloat(tdetectsMinMax[0].toFixed(2)), parseFloat(tdetecval.toFixed(2))]\n        });\n\n        setProsRecords(sortedRows);\n\n    }, [props?.selectedClusterSummary]);\n\n    // genes to show, hook for filters and input\n    const sortedRows = useMemo(() => {\n\n        if (!prosRecords) return [];\n\n        let sortedRows = prosRecords;\n        if (markerFilter) {\n            for (let key in markerFilter) {\n                let range = markerFilter[key];\n                if (!range) continue;\n                if (range[0] === minMaxs[key][0] && range[1] === minMaxs[key][1]) continue;\n                sortedRows = sortedRows.filter((x) => x[key] >= range[0] && x[key] <= range[1]);\n            }\n        }\n\n        if (!searchInput || searchInput === \"\") return sortedRows;\n\n        sortedRows = sortedRows.filter((x) => genesInfo[geneColSel][x.gene].toLowerCase().indexOf(searchInput.toLowerCase()) !== -1);\n        return sortedRows;\n    }, [prosRecords, searchInput, markerFilter]);\n\n    // update clusters when custom selection is made in the UI\n    useEffect(() => {\n        if (props?.clusterData?.clusters) {\n            let max_clusters = Math.max(...props?.clusterData.clusters);\n\n            let clus = [];\n            for (let i = 0; i < max_clusters + 1; i++) {\n                clus.push(i + 1);\n            }\n\n            clus = clus.concat(Object.keys(props?.customSelection));\n\n            setClusSel(clus);\n            if (props?.selectedCluster === null) {\n                props?.setSelectedCluster(0);\n            }\n        }\n    }, [props?.clusterData, props?.customSelection, props?.selectedCluster]);\n\n    // hook for figure out this vs other cells for stacked histograms\n    useEffect(() => {\n        var clusArray = [];\n        if (String(props?.selectedCluster).startsWith(\"cs\")) {\n            props?.clusterData?.clusters?.forEach((x, i) => props?.customSelection[props?.selectedCluster].includes(i) ? clusArray.push(1) : clusArray.push(0));\n        } else {\n            props?.clusterData?.clusters?.forEach(x => x === props?.selectedCluster ? clusArray.push(1) : clusArray.push(0));\n        }\n        setClusArrayStacked(clusArray);\n    }, [props?.selectedCluster]);\n\n    const handleMarkerFilter = (val, key) => {\n\n        let tmp = { ...markerFilter };\n        tmp[key] = val;\n        setMarkerFilter(tmp);\n    }\n\n    const createColorScale = (lower, upper) => {\n        if (lower > 0) {\n            return `linear-gradient(to right, yellow 0%, red 100%)`;\n        } else if (upper < 0) {\n            return `linear-gradient(to right, blue 0%, yellow 100%)`;\n        } else {\n            var limit = 0;\n            if (lower < 0) {\n                limit = -lower;\n            }\n            if (upper > 0 && upper > limit) {\n                limit = upper;\n            }\n            var scaler = d3.scaleSequential(d3.interpolateRdYlBu).domain([limit, -limit]);\n\n            var leftcol = scaler(lower);\n            var rightcol = scaler(upper);\n            var midprop = Math.round(-lower / (upper - lower) * 100);\n            return `linear-gradient(to right, ${leftcol} 0%, yellow ${midprop}%, ${rightcol} 100%)`;\n        }\n    };\n\n    return (\n        <div className='marker-container'>\n            <Popover2\n                popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                hasBackdrop={false}\n                interactionKind=\"hover\"\n                placement='left'\n                hoverOpenDelay={500}\n                modifiers={{\n                    arrow: { enabled: true },\n                    flip: { enabled: true },\n                    preventOverflow: { enabled: true },\n                }}\n                content={\n                    <Card style={{\n                        width: '450px'\n                    }} elevation={Elevation.ZERO}\n                    >\n                        <p>This panel shows the marker genes that are upregulated in the cluster of interest compared to some or all of the other clusters.\n                            Hopefully, this allows us to assign some kind of biological meaning to each cluster based on the functions of the top markers.\n                            Several ranking schemes are available depending on how we choose to quantify the strength of the upregulation.</p>\n                    </Card>\n                }\n            >\n                <H4 style={{\n                    textDecoration: \"underline\",\n                    cursor: \"help\"\n                }}>Marker Genes</H4>\n            </Popover2>\n            {\n                clusSel ?\n                    <HTMLSelect\n                        onChange={(x) => {\n                            let tmpselection = x.currentTarget?.value;\n                            if (tmpselection.startsWith(\"Cluster\")) {\n                                tmpselection = parseInt(tmpselection.replace(\"Cluster \", \"\")) - 1\n                            } else if (tmpselection.startsWith(\"Custom\")) {\n                                tmpselection = tmpselection.replace(\"Custom Selection \", \"\")\n                            }\n                            props?.setSelectedCluster(tmpselection);\n\n                            setMarkerFilter({});\n                            props?.setGene(null);\n                        }}>\n                        {\n                            clusSel.map((x, i) => (\n                                <option key={i}>{String(x).startsWith(\"cs\") ? \"Custom Selection\" : \"Cluster\"} {x}</option>\n                            ))\n                        }\n                    </HTMLSelect>\n                    : \"\"\n            }\n            {\n                props?.selectedClusterSummary ?\n                    <div className='marker-table'>\n                        <div className='marker-header'>\n                            <InputGroup\n                                leftIcon=\"search\"\n                                small={true}\n                                placeholder=\"Search gene...\"\n                                type={\"text\"}\n                                onChange={(e) => setSearchInput(e.target.value)}\n                            />\n                            <span style={{\n                                textDecoration: \"underline\",\n                                cursor: \"help\"\n                            }}>\n                                <Popover2\n                                    popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                    hasBackdrop={false}\n                                    interactionKind=\"hover\"\n                                    placement='left'\n                                    hoverOpenDelay={50}\n                                    modifiers={{\n                                        arrow: { enabled: true },\n                                        flip: { enabled: true },\n                                        preventOverflow: { enabled: true },\n                                    }}\n                                    content={\n                                        <Card style={{\n                                            width: '450px'\n                                        }} elevation={Elevation.ZERO}\n                                        >\n                                            <p>Choose the effect size and summary statistic to use for ranking markers. For each gene, effect sizes are computed by pairwise comparisons between clusters:</p>\n                                            <ul>\n                                                <li><strong><em>Cohen's d</em></strong> is the ratio of the log-fold change to the average standard deviation between two clusters.</li>\n                                                <li>The area under the curve (<strong><em>AUC</em></strong>) is the probability that a randomly chosen observation from one cluster is greater than a randomly chosen observation from another cluster.</li>\n                                                <li>The log-fold change (<strong><em>lfc</em></strong>) is the difference in the mean log-expression between two clusters.</li>\n                                                <li>The <strong><em>Δ-detected</em></strong> is the difference in the detected proportions between two clusters.</li>\n                                            </ul>\n                                            <p>For each cluster, the effect sizes from the comparisons to all other clusters are summarized into a single statistic for ranking purposes:</p>\n                                            <ul>\n                                                <li><strong><em>mean</em></strong> uses the mean effect sizes from all pairwise comparisons. This generally provides a good compromise between exclusitivity and robustness.</li>\n                                                <li><strong><em>min</em></strong> uses the minimum effect size from all pairwise comparisons. This promotes markers that are exclusively expressed in the chosen cluster, but will perform poorly if no such genes exist.</li>\n                                                <li><strong><em>min-rank</em></strong> ranks genes according to their best rank in each of the individual pairwise comparisons. This is the most robust as the combination of top-ranked genes will always be able to distinguish the chosen cluster from the other clusters, but may not give high rankings to exclusive genes.</li>\n                                            </ul>\n                                        </Card>\n                                    }\n                                >\n                                    <Icon intent=\"warning\" icon=\"sort\" style={{\n                                        paddingRight: '5px'\n                                    }}></Icon>\n                                </Popover2>\n                                <HTMLSelect\n                                    onChange={(x) => {\n                                        props?.setClusterRank(x.currentTarget.value);\n                                    }} defaultValue={\"cohen-min-rank\"}>\n                                    <option>cohen-min</option>\n                                    <option>cohen-mean</option>\n                                    <option>cohen-min-rank</option>\n                                    <option>auc-min</option>\n                                    <option>auc-mean</option>\n                                    <option>auc-min-rank</option>\n                                    <option>lfc-min</option>\n                                    <option>lfc-mean</option>\n                                    <option>lfc-min-rank</option>\n                                    <option>delta-d-min</option>\n                                    <option>delta-d-mean</option>\n                                    <option>delta-d-min-rank</option>\n                                </HTMLSelect>\n                            </span>\n                        </div>\n                        <Virtuoso\n                            components={{\n                                Item: ({ children, ...props }) => {\n                                    return (\n                                        <div className='row-card' {...props}>\n                                            {children}\n                                        </div>\n                                    );\n                                },\n                                Header: () => {\n                                    return (<div className='row-container row-header'>\n                                        <span>\n                                            <HTMLSelect large={false} minimal={true} defaultValue={geneColSel}\n                                                onChange={(nval, val) => setGeneColSel(nval?.currentTarget?.value)}>\n                                                {\n                                                    Object.keys(genesInfo).map((x, i) => (\n                                                        <option key={i}>{x}</option>\n                                                    ))\n                                                }\n                                            </HTMLSelect>\n                                        </span>\n                                        <Popover2\n                                            popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                            hasBackdrop={false}\n                                            interactionKind=\"hover\"\n                                            placement='auto'\n                                            hoverOpenDelay={50}\n                                            modifiers={{\n                                                arrow: { enabled: true },\n                                                flip: { enabled: true },\n                                                preventOverflow: { enabled: true },\n                                            }}\n                                            content={\n                                                <Card style={{\n                                                    width: '250px'\n                                                }} elevation={Elevation.ZERO}>\n                                                    <p>Log-fold change in mean expression between cells inside and outside the cluster.</p>\n                                                    <p>Use the color scale below to apply a filter on this statistic.</p>\n                                                </Card>\n                                            }>\n                                            <span style={{\n                                                textDecoration: \"underline\",\n                                                cursor: \"help\"\n                                            }}>\n                                                Log-FC\n                                            </span>\n                                        </Popover2>\n                                        <Popover2\n                                            popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                            hasBackdrop={false}\n                                            interactionKind=\"hover\"\n                                            placement='auto'\n                                            hoverOpenDelay={50}\n                                            modifiers={{\n                                                arrow: { enabled: true },\n                                                flip: { enabled: true },\n                                                preventOverflow: { enabled: true },\n                                            }}\n                                            content={\n                                                <Card style={{\n                                                    width: '250px'\n                                                }} elevation={Elevation.ZERO}>\n                                                    <p>\n                                                        Difference in the proportion of detected genes inside and outside the cluster.</p>\n                                                    <p>Use the color scale below to apply a filter on this statistic.</p>\n                                                </Card>}>\n                                            <span style={{\n                                                textDecoration: \"underline\",\n                                                cursor: \"help\"\n                                            }}>\n                                                Δ-detected\n                                            </span>\n                                        </Popover2>\n                                        <Popover2\n                                            popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                            hasBackdrop={false}\n                                            interactionKind=\"hover\"\n                                            placement='auto'\n                                            hoverOpenDelay={50}\n                                            modifiers={{\n                                                arrow: { enabled: true },\n                                                flip: { enabled: true },\n                                                preventOverflow: { enabled: true },\n                                            }}\n                                            content={\n                                                <Card style={{\n                                                    width: '250px'\n                                                }} elevation={Elevation.ZERO}>\n                                                    <p>The intensity of color represents the mean expression of the gene in this cluster,\n                                                        while the length of the bar represents the percentage of cells in which any expression is detected.\n                                                    </p>\n                                                </Card>}>\n                                            <span style={{\n                                                textDecoration: \"underline\",\n                                                cursor: \"help\"\n                                            }}>\n                                                Expression\n                                            </span>\n                                        </Popover2>\n                                    </div>)\n                                }\n                            }}\n                            className='marker-list'\n                            totalCount={sortedRows.length}\n                            itemContent={index => {\n                                const row = sortedRows[index];\n                                const rowexp = row.expanded;\n                                const rowExpr = row.expr;\n\n                                return (\n                                    <div>\n                                        <div className='row-container'>\n                                            <span style={{\n                                                color: row.gene === props?.gene ?\n                                                    String(props?.selectedCluster).startsWith(\"cs\") ? props?.clusterColors[Math.max(...props?.clusterData?.clusters) + parseInt(props?.selectedCluster.replace(\"cs\", \"\"))] : props?.clusterColors[props?.selectedCluster]\n                                                    : 'black'\n                                            }}\n                                                className={row.gene === props?.gene ? 'marker-gene-title-selected' : 'marker-gene-title'}>{genesInfo[geneColSel][row.gene]}</span>\n                                            {\n                                                <Popover2\n                                                    popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                                    hasBackdrop={false}\n                                                    interactionKind=\"hover\"\n                                                    placement='auto'\n                                                    hoverOpenDelay={500}\n                                                    modifiers={{\n                                                        arrow: { enabled: true },\n                                                        flip: { enabled: true },\n                                                        preventOverflow: { enabled: true },\n                                                    }}\n                                                    content={\n                                                        <Card elevation={Elevation.ZERO}>\n                                                            <table>\n                                                                <tr>\n                                                                    <td></td>\n                                                                    <th scope=\"col\">{genesInfo[geneColSel][row.gene]}</th>\n                                                                    <th scope=\"col\">This cluster</th>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Log-FC</th>\n                                                                    <td>{row.lfc.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{lfcMinMax[0].toFixed(2)}, {lfcMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Δ-detected</th>\n                                                                    <td>{row.delta.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{deltaMinMax[0].toFixed(2)}, {deltaMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Detected</th>\n                                                                    <td>{row.detected.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{detectedMinMax[0].toFixed(2)}, {detectedMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Expression</th>\n                                                                    <td>{row.mean.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{meanMinMax[0].toFixed(2)}, {meanMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                            </table>\n                                                        </Card>\n                                                    }>\n                                                    <HeatmapCell minmax={lfcMinMax} colorscale={d3.interpolateRdBu} score={row.lfc} />\n                                                </Popover2>\n                                            }\n                                            {\n                                                <Popover2\n                                                    popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                                    hasBackdrop={false}\n                                                    interactionKind=\"hover\"\n                                                    placement='auto'\n                                                    hoverOpenDelay={500}\n                                                    modifiers={{\n                                                        arrow: { enabled: true },\n                                                        flip: { enabled: true },\n                                                        preventOverflow: { enabled: true },\n                                                    }}\n                                                    content={\n                                                        <Card elevation={Elevation.ZERO}>\n                                                            <table>\n                                                                <tr>\n                                                                    <td></td>\n                                                                    <th scope=\"col\">{genesInfo[geneColSel][row.gene]}</th>\n                                                                    <th scope=\"col\">This cluster</th>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Δ-detected</th>\n                                                                    <td>{row.delta.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{deltaMinMax[0].toFixed(2)}, {deltaMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Detected</th>\n                                                                    <td>{row.detected.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{detectedMinMax[0].toFixed(2)}, {detectedMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Log-FC</th>\n                                                                    <td>{row.lfc.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{lfcMinMax[0].toFixed(2)}, {lfcMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Expression</th>\n                                                                    <td>{row.mean.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{meanMinMax[0].toFixed(2)}, {meanMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                            </table>\n                                                        </Card>\n                                                    }>\n                                                    <HeatmapCell minmax={deltaMinMax} colorscale={d3.interpolateRdBu} score={row.delta} />\n                                                </Popover2>}\n                                            {\n                                                <Popover2\n                                                    popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                                    hasBackdrop={false}\n                                                    interactionKind=\"hover\"\n                                                    placement='auto'\n                                                    hoverOpenDelay={500}\n                                                    modifiers={{\n                                                        arrow: { enabled: true },\n                                                        flip: { enabled: true },\n                                                        preventOverflow: { enabled: true },\n                                                    }}\n                                                    content={\n                                                        <Card elevation={Elevation.ZERO}>\n                                                            <table>\n                                                                <tr>\n                                                                    <td></td>\n                                                                    <th scope=\"col\">{genesInfo[geneColSel][row.gene]}</th>\n                                                                    <th scope=\"col\">This cluster</th>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Expression</th>\n                                                                    <td>{row.mean.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{meanMinMax[0].toFixed(2)}, {meanMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Log-FC</th>\n                                                                    <td>{row.lfc.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{lfcMinMax[0].toFixed(2)}, {lfcMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Δ-detected</th>\n                                                                    <td>{row.delta.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{deltaMinMax[0].toFixed(2)}, {deltaMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                                <tr>\n                                                                    <th scope=\"row\">Detected</th>\n                                                                    <td>{row.detected.toFixed(2)}</td>\n                                                                    <td style={{ fontStyle: 'italic' }}>∈ [{detectedMinMax[0].toFixed(2)}, {detectedMinMax[1].toFixed(2)}]</td>\n                                                                </tr>\n                                                            </table>\n                                                        </Card>\n                                                    }>\n                                                    <Cell minmax={meanMinMax} colorscale={detectedScale}\n                                                        score={row.mean} colorscore={row.detected}\n                                                    />\n                                                </Popover2>}\n                                            <div className='row-action'>\n                                                <Button icon={rowexp ? 'minus' : 'plus'} small={true} fill={false}\n                                                    className='row-action'\n                                                    onClick={() => {\n                                                        let tmp = [...props?.selectedClusterSummary];\n                                                        var gindex = props?.selectedClusterIndex[row.gene];\n                                                        tmp[gindex].expanded = !tmp[gindex].expanded;\n                                                        props?.setSelectedClusterSummary(tmp);\n                                                        if (!rowExpr && tmp[gindex].expanded) {\n                                                            props?.setReqGene(row.gene);\n                                                        } else {\n                                                            props?.setReqGene(null);\n                                                        }\n                                                    }}\n                                                >\n                                                </Button>\n                                                <Button small={true} fill={false}\n                                                    className='row-action'\n                                                    onClick={() => {\n                                                        if (row.gene === props?.gene) {\n                                                            props?.setGene(null);\n                                                        } else {\n                                                            props?.setGene(row.gene);\n                                                            if (!rowExpr) {\n                                                                props?.setReqGene(row.gene);\n                                                            }\n                                                        }\n                                                    }}\n                                                >\n                                                    <Icon icon={'tint'}\n                                                        color={row.gene === props?.gene ?\n                                                            String(props?.selectedCluster).startsWith(\"cs\") ? props?.clusterColors[Math.max(...props?.clusterData?.clusters) + parseInt(props?.selectedCluster.replace(\"cs\", \"\"))] : props?.clusterColors[props?.selectedCluster]\n                                                            : ''}\n                                                    ></Icon>\n                                                </Button>\n                                            </div>\n                                        </div>\n                                        <Collapse isOpen={rowexp}>\n                                            {/* <Histogram data={rowExpr} color={clusterColors[selectedCluster]} /> */}\n                                            {rowExpr && <StackedHistogram data={rowExpr}\n                                                color={String(props?.selectedCluster).startsWith(\"cs\") ? props?.clusterColors[Math.max(...props?.clusterData?.clusters) + parseInt(props?.selectedCluster.replace(\"cs\", \"\"))] : props?.clusterColors[props?.selectedCluster]}\n                                                clusterlabel={String(props?.selectedCluster).startsWith(\"cs\") ? `Custom Selection ${props?.selectedCluster}` : `Cluster ${parseInt(props?.selectedCluster + 1)}`}\n                                                clusters={clusArrayStacked} />}\n                                        </Collapse>\n                                    </div>\n                                )\n                            }}\n                        />\n                        <div className='marker-footer'>\n                            <H5>\n                                <Popover2\n                                    popoverClassName={Classes.POPOVER2_CONTENT_SIZING}\n                                    hasBackdrop={false}\n                                    interactionKind=\"hover\"\n                                    placement='left'\n                                    hoverOpenDelay={500}\n                                    modifiers={{\n                                        arrow: { enabled: true },\n                                        flip: { enabled: true },\n                                        preventOverflow: { enabled: true },\n                                    }}\n                                    content={\n                                        <Card style={{\n                                            width: '450px'\n                                        }} elevation={Elevation.ZERO}\n                                        >\n                                            <p>Filter the set of marker genes according to various statistics.\n                                                For example, this can be used to apply a minimum threshold on the <strong><em>log-fold change</em></strong> or <strong><em>Δ-detected</em></strong>, to focus on genes with strong upregulation;\n                                                or to apply a maximum threshold on the expression, to remove constitutively expressed genes.</p>\n                                            <p>Note that this does not change the relative ordering in the table above.</p>\n                                        </Card>\n                                    }\n                                >\n                                    <Text style={{\n                                        textDecoration: \"underline\",\n                                        cursor: \"help\"\n                                    }}>Filter Markers</Text>\n                                </Popover2>\n                            </H5>\n\n                            <div className='marker-filter-container'>\n                                <Tag className=\"marker-filter-container-tag\" minimal={true} intent='primary'>Log-FC</Tag>\n                                {lfcMinMax &&\n                                    <div className='marker-slider-container'>\n                                        {/* <Histogram data={selectedClusterSummary} datakey={\"lfc\"} height={100} minmax={lfcMinMax}/> */}\n                                        <div className='marker-filter-gradient'>\n                                            <div\n                                                style={{\n                                                    backgroundImage: createColorScale(lfcMinMax[0], lfcMinMax[1]),\n                                                    width: '100%', height: '5px',\n                                                }}></div>&nbsp;\n                                        </div>\n                                        <RangeSlider\n                                            className='marker-filter-slider'\n                                            min={lfcMinMax[0]}\n                                            max={lfcMinMax[1]}\n                                            labelValues={lfcMinMax}\n                                            stepSize={parseFloat((Math.abs(lfcMinMax[1] - lfcMinMax[0]) / 20).toFixed(2))}\n                                            onChange={(val) => handleMarkerFilter(val, \"lfc\")}\n                                            value={markerFilter?.[\"lfc\"]}\n                                            vertical={false}\n                                        />\n                                    </div>}\n                            </div>\n\n                            <div className='marker-filter-container'>\n                                <Tag className=\"marker-filter-container-tag\" minimal={true} intent='primary'>Δ-detected</Tag>\n                                {/* <Histogram data={deltas} height={35} color=\"#4580E6\" minmax={deltaMinMax} /> */}\n                                {deltaMinMax &&\n                                    <div className='marker-slider-container'>\n                                        <div className='marker-filter-gradient'>\n                                            <div\n                                                style={{\n                                                    backgroundImage: createColorScale(deltaMinMax[0], deltaMinMax[1]),\n                                                    width: '100%', height: '5px',\n                                                }}></div>&nbsp;\n                                        </div>\n                                        <RangeSlider\n                                            className='marker-filter-slider'\n                                            min={deltaMinMax[0]}\n                                            max={deltaMinMax[1]}\n                                            labelValues={deltaMinMax}\n                                            stepSize={parseFloat((Math.abs(deltaMinMax[1] - deltaMinMax[0]) / 20).toFixed(2))}\n                                            onChange={(val) => handleMarkerFilter(val, \"delta\")}\n                                            value={markerFilter?.[\"delta\"]}\n                                            vertical={false}\n                                        />\n                                    </div>}\n                            </div>\n\n                            <div className='marker-filter-container'>\n                                <Tag className=\"marker-filter-container-tag\" minimal={true} intent='primary'>Expression (mean)</Tag>\n                                {/* <Histogram data={means} height={35} minmax={meanMinMax} /> */}\n                                {meanMinMax &&\n                                    <div className='marker-slider-container'>\n                                        <div className='marker-filter-gradient'>\n                                            <div\n                                                style={{\n                                                    backgroundImage: `linear-gradient(to right, #F5F8FA, #2965CC)`,\n                                                    width: '100%', height: '5px',\n                                                }}></div>&nbsp;\n                                        </div>\n                                        <RangeSlider\n                                            className='marker-filter-slider'\n                                            min={meanMinMax[0]}\n                                            max={meanMinMax[1]}\n                                            labelValues={meanMinMax}\n                                            stepSize={parseFloat((Math.abs(meanMinMax[1] - meanMinMax[0]) / 20).toFixed(2))}\n                                            onChange={(val) => handleMarkerFilter(val, \"mean\")}\n                                            value={markerFilter?.[\"mean\"]}\n                                            vertical={false}\n                                        />\n                                    </div>}\n                            </div>\n\n                            <div className='marker-filter-container'>\n                                <Tag className=\"marker-filter-container-tag\" minimal={true} intent='primary'>Expression (detected)</Tag>\n                                {/* <Histogram data={detects} height={35} minmax={detectedMinMax} /> */}\n                                {detectedMinMax &&\n                                    <div className='marker-slider-container'>\n                                        {/* <div className='marker-filter-gradient'>\n                                            <div\n                                                style={{\n                                                    backgroundImage: `linear-gradient(to right, yellow 33%, red 50%, blue 100%)`,\n                                                    width: '100%', height: '5px',\n                                                }}></div>&nbsp;\n                                        </div> */}\n                                        <RangeSlider\n                                            className='marker-filter-slider'\n                                            min={detectedMinMax[0]}\n                                            max={detectedMinMax[1]}\n                                            labelValues={detectedMinMax}\n                                            stepSize={parseFloat((Math.abs(detectedMinMax[1] - detectedMinMax[0]) / 20).toFixed(2))}\n                                            onChange={(val) => handleMarkerFilter(val, \"detected\")}\n                                            value={markerFilter?.[\"detected\"]}\n                                            vertical={false}\n                                        />\n                                    </div>}\n                            </div>\n                        </div>\n                    </div>\n                    : \"\"\n            }\n        </div>\n    );\n};\n\nexport default React.memo(MarkerPlot);\n","import { useEffect, useRef } from \"react\";\n\nimport './Pong.css';\n\nconst Pong = () => {\n    const container = useRef();\n\n    useEffect(() => {\n\n        const elem = container.current;\n\n        // Global Variables\n        var DIRECTION = {\n            IDLE: 0,\n            UP: 1,\n            DOWN: 2,\n            LEFT: 3,\n            RIGHT: 4\n        };\n\n        var rounds = [5, 5, 3, 3, 2];\n        var colors = ['#1abc9c', '#2ecc71', '#3498db', '#e74c3c', '#9b59b6'];\n\n        // The ball object (The cube that bounces back and forth)\n        var Ball = {\n            new: function (incrementedSpeed) {\n                return {\n                    width: 18,\n                    height: 18,\n                    x: (this.canvas.width / 2) - 9,\n                    y: (this.canvas.height / 2) - 9,\n                    moveX: DIRECTION.IDLE,\n                    moveY: DIRECTION.IDLE,\n                    speed: incrementedSpeed || 9\n                };\n            }\n        };\n\n        // The paddle object (The two lines that move up and down)\n        var Paddle = {\n            new: function (side) {\n                return {\n                    width: 18,\n                    height: 70,\n                    x: side === 'left' ? 150 : this.canvas.width - 150,\n                    y: (this.canvas.height / 2) - 35,\n                    score: 0,\n                    move: DIRECTION.IDLE,\n                    speed: 10\n                };\n            }\n        };\n\n        var Game = {\n            initialize: function () {\n                this.canvas = elem.querySelector('canvas');\n                this.context = this.canvas.getContext('2d');\n\n                this.canvas.width = 1400;\n                this.canvas.height = 1000;\n\n                this.canvas.style.width = (this.canvas.width / 2) + 'px';\n                this.canvas.style.height = (this.canvas.height / 2) + 'px';\n\n                this.player = Paddle.new.call(this, 'left');\n                this.paddle = Paddle.new.call(this, 'right');\n                this.ball = Ball.new.call(this);\n\n                this.paddle.speed = 8;\n                this.running = this.over = false;\n                this.turn = this.paddle;\n                this.timer = this.round = 0;\n                this.color = '#2c3e50';\n\n                Pong.menu();\n                Pong.listen();\n            },\n\n            endGameMenu: function (text) {\n                // Change the canvas font size and color\n                Pong.context.font = '50px Courier New';\n                Pong.context.fillStyle = this.color;\n\n                // Draw the rectangle behind the 'Press any key to begin' text.\n                Pong.context.fillRect(\n                    Pong.canvas.width / 2 - 350,\n                    Pong.canvas.height / 2 - 48,\n                    700,\n                    100\n                );\n\n                // Change the canvas color;\n                Pong.context.fillStyle = '#ffffff';\n\n                // Draw the end game menu text ('Game Over' and 'Winner')\n                Pong.context.fillText(text,\n                    Pong.canvas.width / 2,\n                    Pong.canvas.height / 2 + 15\n                );\n\n                setTimeout(function () {\n                    Pong = Object.assign({}, Game);\n                    Pong.initialize();\n                }, 3000);\n            },\n\n            menu: function () {\n                // Draw all the Pong objects in their current state\n                Pong.draw();\n\n                // Change the canvas font size and color\n                this.context.font = '50px Courier New';\n                this.context.fillStyle = this.color;\n\n                // Draw the rectangle behind the 'Press any key to begin' text.\n                this.context.fillRect(\n                    this.canvas.width / 2 - 350,\n                    this.canvas.height / 2 - 48,\n                    700,\n                    100\n                );\n\n                // Change the canvas color;\n                this.context.fillStyle = '#ffffff';\n\n                // Draw the 'press any key to begin' text\n                this.context.fillText('Press any key to begin',\n                    this.canvas.width / 2,\n                    this.canvas.height / 2 + 15\n                );\n            },\n\n            // Update all objects (move the player, paddle, ball, increment the score, etc.)\n            update: function () {\n                if (!this.over) {\n                    // If the ball collides with the bound limits - correct the x and y coords.\n                    if (this.ball.x <= 0) Pong._resetTurn.call(this, this.paddle, this.player);\n                    if (this.ball.x >= this.canvas.width - this.ball.width) Pong._resetTurn.call(this, this.player, this.paddle);\n                    if (this.ball.y <= 0) this.ball.moveY = DIRECTION.DOWN;\n                    if (this.ball.y >= this.canvas.height - this.ball.height) this.ball.moveY = DIRECTION.UP;\n\n                    // Move player if they player.move value was updated by a keyboard event\n                    if (this.player.move === DIRECTION.UP) this.player.y -= this.player.speed;\n                    else if (this.player.move === DIRECTION.DOWN) this.player.y += this.player.speed;\n\n                    // On new serve (start of each turn) move the ball to the correct side\n                    // and randomize the direction to add some challenge.\n                    if (Pong._turnDelayIsOver.call(this) && this.turn) {\n                        this.ball.moveX = this.turn === this.player ? DIRECTION.LEFT : DIRECTION.RIGHT;\n                        this.ball.moveY = [DIRECTION.UP, DIRECTION.DOWN][Math.round(Math.random())];\n                        this.ball.y = Math.floor(Math.random() * this.canvas.height - 200) + 200;\n                        this.turn = null;\n                    }\n\n                    // If the player collides with the bound limits, update the x and y coords.\n                    if (this.player.y <= 0) this.player.y = 0;\n                    else if (this.player.y >= (this.canvas.height - this.player.height)) this.player.y = (this.canvas.height - this.player.height);\n\n                    // Move ball in intended direction based on moveY and moveX values\n                    if (this.ball.moveY === DIRECTION.UP) this.ball.y -= (this.ball.speed / 1.5);\n                    else if (this.ball.moveY === DIRECTION.DOWN) this.ball.y += (this.ball.speed / 1.5);\n                    if (this.ball.moveX === DIRECTION.LEFT) this.ball.x -= this.ball.speed;\n                    else if (this.ball.moveX === DIRECTION.RIGHT) this.ball.x += this.ball.speed;\n\n                    // Handle paddle (AI) UP and DOWN movement\n                    if (this.paddle.y > this.ball.y - (this.paddle.height / 2)) {\n                        if (this.ball.moveX === DIRECTION.RIGHT) this.paddle.y -= this.paddle.speed / 1.5;\n                        else this.paddle.y -= this.paddle.speed / 4;\n                    }\n                    if (this.paddle.y < this.ball.y - (this.paddle.height / 2)) {\n                        if (this.ball.moveX === DIRECTION.RIGHT) this.paddle.y += this.paddle.speed / 1.5;\n                        else this.paddle.y += this.paddle.speed / 4;\n                    }\n\n                    // Handle paddle (AI) wall collision\n                    if (this.paddle.y >= this.canvas.height - this.paddle.height) this.paddle.y = this.canvas.height - this.paddle.height;\n                    else if (this.paddle.y <= 0) this.paddle.y = 0;\n\n                    // Handle Player-Ball collisions\n                    if (this.ball.x - this.ball.width <= this.player.x && this.ball.x >= this.player.x - this.player.width) {\n                        if (this.ball.y <= this.player.y + this.player.height && this.ball.y + this.ball.height >= this.player.y) {\n                            this.ball.x = (this.player.x + this.ball.width);\n                            this.ball.moveX = DIRECTION.RIGHT;\n\n                            // beep1.play();\n                        }\n                    }\n\n                    // Handle paddle-ball collision\n                    if (this.ball.x - this.ball.width <= this.paddle.x && this.ball.x >= this.paddle.x - this.paddle.width) {\n                        if (this.ball.y <= this.paddle.y + this.paddle.height && this.ball.y + this.ball.height >= this.paddle.y) {\n                            this.ball.x = (this.paddle.x - this.ball.width);\n                            this.ball.moveX = DIRECTION.LEFT;\n\n                            // beep1.play();\n                        }\n                    }\n                }\n\n                // Handle the end of round transition\n                // Check to see if the player won the round.\n                if (this.player.score === rounds[this.round]) {\n                    // Check to see if there are any more rounds/levels left and display the victory screen if\n                    // there are not.\n                    if (!rounds[this.round + 1]) {\n                        this.over = true;\n                        setTimeout(function () { Pong.endGameMenu('Winner!'); }, 1000);\n                    } else {\n                        // If there is another round, reset all the values and increment the round number.\n                        this.color = this._generateRoundColor();\n                        this.player.score = this.paddle.score = 0;\n                        this.player.speed += 0.5;\n                        this.paddle.speed += 1;\n                        this.ball.speed += 1;\n                        this.round += 1;\n\n                        // beep3.play();\n                    }\n                }\n                // Check to see if the paddle/AI has won the round.\n                else if (this.paddle.score === rounds[this.round]) {\n                    this.over = true;\n                    setTimeout(function () { Pong.endGameMenu('Game Over!'); }, 1000);\n                }\n            },\n\n            // Draw the objects to the canvas element\n            draw: function () {\n                // Clear the Canvas\n                this.context.clearRect(\n                    0,\n                    0,\n                    this.canvas.width,\n                    this.canvas.height\n                );\n\n                // Set the fill style to black\n                this.context.fillStyle = this.color;\n\n                // Draw the background\n                this.context.fillRect(\n                    0,\n                    0,\n                    this.canvas.width,\n                    this.canvas.height\n                );\n\n                // Set the fill style to white (For the paddles and the ball)\n                this.context.fillStyle = '#ffffff';\n\n                // Draw the Player\n                this.context.fillRect(\n                    this.player.x,\n                    this.player.y,\n                    this.player.width,\n                    this.player.height\n                );\n\n                // Draw the Paddle\n                this.context.fillRect(\n                    this.paddle.x,\n                    this.paddle.y,\n                    this.paddle.width,\n                    this.paddle.height\n                );\n\n                // Draw the Ball\n                if (Pong._turnDelayIsOver.call(this)) {\n                    this.context.fillRect(\n                        this.ball.x,\n                        this.ball.y,\n                        this.ball.width,\n                        this.ball.height\n                    );\n                }\n\n                // Draw the net (Line in the middle)\n                this.context.beginPath();\n                this.context.setLineDash([7, 15]);\n                this.context.moveTo((this.canvas.width / 2), this.canvas.height - 140);\n                this.context.lineTo((this.canvas.width / 2), 140);\n                this.context.lineWidth = 10;\n                this.context.strokeStyle = '#ffffff';\n                this.context.stroke();\n\n                // Set the default canvas font and align it to the center\n                this.context.font = '100px Courier New';\n                this.context.textAlign = 'center';\n\n                // Draw the players score (left)\n                this.context.fillText(\n                    this.player.score.toString(),\n                    (this.canvas.width / 2) - 300,\n                    200\n                );\n\n                // Draw the paddles score (right)\n                this.context.fillText(\n                    this.paddle.score.toString(),\n                    (this.canvas.width / 2) + 300,\n                    200\n                );\n\n                // Change the font size for the center score text\n                this.context.font = '30px Courier New';\n\n                // Draw the winning score (center)\n                this.context.fillText(\n                    'Round ' + (Pong.round + 1),\n                    (this.canvas.width / 2),\n                    35\n                );\n\n                // Change the font size for the center score value\n                this.context.font = '40px Courier';\n\n                // Draw the current round number\n                this.context.fillText(\n                    rounds[Pong.round] ? rounds[Pong.round] : rounds[Pong.round - 1],\n                    (this.canvas.width / 2),\n                    100\n                );\n            },\n\n            loop: function () {\n                Pong.update();\n                Pong.draw();\n\n                // If the game is not over, draw the next frame.\n                if (!Pong.over) requestAnimationFrame(Pong.loop);\n            },\n\n            listen: function () {\n                document.addEventListener('keydown', function (key) {\n                    // Handle the 'Press any key to begin' function and start the game.\n                    if (Pong.running === false) {\n                        Pong.running = true;\n                        window.requestAnimationFrame(Pong.loop);\n                    }\n\n                    // Handle up arrow and w key events\n                    if (key.keyCode === 38 || key.keyCode === 87) Pong.player.move = DIRECTION.UP;\n\n                    // Handle down arrow and s key events\n                    if (key.keyCode === 40 || key.keyCode === 83) Pong.player.move = DIRECTION.DOWN;\n                });\n\n                // Stop the player from moving when there are no keys being pressed.\n                document.addEventListener('keyup', function (key) { Pong.player.move = DIRECTION.IDLE; });\n            },\n\n            // Reset the ball location, the player turns and set a delay before the next round begins.\n            _resetTurn: function (victor, loser) {\n                this.ball = Ball.new.call(this, this.ball.speed);\n                this.turn = loser;\n                this.timer = (new Date()).getTime();\n\n                victor.score++;\n                // beep2.play();\n            },\n\n            // Wait for a delay to have passed after each turn.\n            _turnDelayIsOver: function () {\n                return ((new Date()).getTime() - this.timer >= 1000);\n            },\n\n            // Select a random color as the background of each level/round.\n            _generateRoundColor: function () {\n                var newColor = colors[Math.floor(Math.random() * colors.length)];\n                if (newColor === this.color) return Pong._generateRoundColor();\n                return newColor;\n            }\n        };\n\n        var Pong = Object.assign({}, Game);\n        Pong.initialize();\n    }, []);\n\n    return (\n        <div ref={container} className='pong-container'>\n            <canvas></canvas>\n            <p className=\"credit\">Game Credits <a href=\"https://codepen.io/gdube/pen/JybxxZ\" target=\"_blank\">Pong Game</a></p>\n        </div>\n    );\n};\n\nexport default Pong;","import './Spinner2.css';\n\nconst Spinner2 = () => {\n    return (\n        <div className='dots-bars-5'></div>\n    )    \n}\n\nexport default Spinner2;","import './App.css';\nimport Header from \"./components/Header\";\nimport Gallery from './components/Gallery';\nimport { randomColor } from 'randomcolor';\n\nimport { Button, Label, Overlay, Spinner, Alert, Divider } from \"@blueprintjs/core\";\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { AppContext } from './context/AppContext';\n\nimport { AppToaster } from \"./components/Spinners/AppToaster\";\nimport DimPlot from './components/Plots/DimPlot.js';\nimport MarkerPlot from './components/Markers';\nimport Pong from './components/Spinners/Pong';\nimport Spinner2 from './components/Spinners/Spinner2';\n\n// App is the single point of contact with the web workers\n// All requests and responses are received here\n\nfunction App() {\n\n  // show loading screen ?\n  const [loading, setLoading] = useState(true);\n  // use local state for tsne/umap animation\n  const [animateData, setAnimateData] = useState(null);\n  // show in-app game ?\n  const [showGame, setShowGame] = useState(false);\n  // app export state - .kana file\n  const [exportState, setExportState] = useState(false);\n  // app export state - store to indexedDB\n  const [indexedDBState, setIndexedDBState] = useState(false);\n  // saved analysis in the browser's indexeddb\n  const [kanaIDBRecs, setKanaIDBRecs] = useState([]);\n  // delete rec in database\n  const [deletekdb, setDeletekdb] = useState(null);\n  // Response State for various components\n  // dim sizes\n  const [initDims, setInitDims] = useState(null);\n  const [qcDims, setQcDims] = useState(null);\n  // const [fSelDims, setFSelDims] = useState(null);\n\n  // Logs\n  const [logs, setLogs] = useState([]);\n\n  // QC Data\n  const [qcData, setQcData] = useState(null);\n  // Feature Selection\n  const [fSelectionData, setFSelectionData] = useState(null);\n\n  // UI dimensions reduction dropdown\n  const [redDims, setRedDims] = useState([]);\n  // which dimension is selected\n  const [defaultRedDims, setDefaultRedDims] = useState(null);\n  // TSNE\n  const [tsneData, setTsneData] = useState(null);\n  // UMAP\n  const [umapData, setUmapData] = useState(null);\n  // this applies to both tsne and umap\n  // is animation in progress ?\n  const [showAnimation, setShowAnimation] = useState(false);\n  // if a user manually triggers an animation (using the play button)\n  const [triggerAnimation, setTriggerAnimation] = useState(false);\n\n  // PCA\n  const [pcaVarExp, setPcaVarExp] = useState(null);\n\n  // Cluster Data\n  // which cluster is selected\n  const [selectedCluster, setSelectedCluster] = useState(null);\n  // cohen, mean scores per gene\n  const [selectedClusterSummary, setSelectedClusterSummary] = useState([]);\n  // ordering of genes for the selected cluster\n  const [selectedClusterIndex, setSelectedClusterIndex] = useState([]);\n  // set Cluster rank-type\n  const [clusterRank, setClusterRank] = useState(null);\n\n  // Cluster Analysis\n  // cluster assignments\n  const [clusterData, setClusterData] = useState(null);\n  // set cluster colors\n  const [clusterColors, setClusterColors] = useState(null);\n  // custom selection on tsne plot\n  const [customSelection, setCustomSelection] = useState({});\n  // remove custom Selection\n  const [delCustomSelection, setDelCustomSelection] = useState(null);\n\n  // geneExpression\n  // what gene is selected for scatterplot\n  const [gene, setGene] = useState(null);\n  // request gene expression\n  const [reqGene, setReqGene] = useState(null);\n\n  // ImageData user saves while exploring\n  const [savedPlot, setSavedPlot] = useState([]);\n\n  // Error handling\n  // error message caught from the worker \n  const [scranError, setScranError] = useState(null);\n\n  // props for dialogs\n  const loadingProps = {\n    autoFocus: true,\n    canEscapeKeyClose: false,\n    canOutsideClickClose: false,\n    enforceFocus: true,\n    hasBackdrop: true,\n    usePortal: true,\n    useTallContent: false,\n  };\n\n  const { setWasmInitialized,\n    setGenesInfo,\n    datasetName, params,\n    setGeneColSel, setLoadParams,\n    setInitLoadState, inputFiles } = useContext(AppContext);\n\n  const palette = {\n    1: ['#1b9e77'],\n    2: ['#1b9e77', '#d95f02'],\n    3: ['#1b9e77', '#d95f02', '#7570b3'],\n    4: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a'],\n    5: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e'],\n    6: ['#1b9e77', '#d95f02', '#7570b3', '#e7298a', '#66a61e', '#e6ab02'],\n    7: [\n      '#1b9e77',\n      '#d95f02',\n      '#7570b3',\n      '#e7298a',\n      '#66a61e',\n      '#e6ab02',\n      '#a6761d',\n    ],\n    8: [\n      '#1b9e77',\n      '#d95f02',\n      '#7570b3',\n      '#e7298a',\n      '#66a61e',\n      '#e6ab02',\n      '#a6761d',\n      '#666666',\n    ],\n    9: [\n      '#a6cee3',\n      '#1f78b4',\n      '#b2df8a',\n      '#33a02c',\n      '#fb9a99',\n      '#e31a1c',\n      '#fdbf6f',\n      '#ff7f00',\n      '#cab2d6',\n    ],\n    10: [\n      '#a6cee3',\n      '#1f78b4',\n      '#b2df8a',\n      '#33a02c',\n      '#fb9a99',\n      '#e31a1c',\n      '#fdbf6f',\n      '#ff7f00',\n      '#cab2d6',\n      '#6a3d9a',\n    ],\n    11: [\n      '#a6cee3',\n      '#1f78b4',\n      '#b2df8a',\n      '#33a02c',\n      '#fb9a99',\n      '#e31a1c',\n      '#fdbf6f',\n      '#ff7f00',\n      '#cab2d6',\n      '#6a3d9a',\n      '#ffff99',\n    ],\n    12: [\n      '#a6cee3',\n      '#1f78b4',\n      '#b2df8a',\n      '#33a02c',\n      '#fb9a99',\n      '#e31a1c',\n      '#fdbf6f',\n      '#ff7f00',\n      '#cab2d6',\n      '#6a3d9a',\n      '#ffff99',\n      '#b15928',\n    ],\n  };\n\n  // initializes various things on the worker side\n  useEffect(() => {\n    window.scranWorker.postMessage({\n      \"type\": \"INIT\",\n      \"msg\": \"Initial Load\"\n    });\n  }, [])\n\n  // request worker for new markers \n  // if either the cluster or the ranking changes\n  useEffect(() => {\n\n    if (selectedCluster !== null) {\n      let type = String(selectedCluster).startsWith(\"cs\") ?\n        \"getMarkersForSelection\" : \"getMarkersForCluster\";\n      window.scranWorker.postMessage({\n        \"type\": type,\n        \"payload\": {\n          \"cluster\": selectedCluster,\n          \"rank_type\": clusterRank,\n        }\n      });\n    }\n  }, [selectedCluster, clusterRank]);\n\n  // compute markers in the worker \n  // when a new custom selection of cells is made through the UI\n  useEffect(() => {\n\n    if (customSelection !== null && Object.keys(customSelection).length > 0) {\n      let csLen = `cs${Object.keys(customSelection).length}`;\n      var cs = customSelection[csLen];\n      window.scranWorker.postMessage({\n        \"type\": \"computeCustomMarkers\",\n        \"payload\": {\n          \"selection\": cs,\n          \"id\": csLen\n        }\n      });\n    }\n  }, [customSelection]);\n\n  // Remove a custom selection from cache\n  useEffect(() => {\n    if (delCustomSelection !== null) {\n      window.scranWorker.postMessage({\n        \"type\": \"removeCustomMarkers\",\n        \"payload\": {\n          \"id\": delCustomSelection\n        }\n      });\n\n      setDelCustomSelection(null);\n    }\n  }, [delCustomSelection]);\n\n  // get expression for a gene from worker\n  useEffect(() => {\n\n    reqGene !== null && window.scranWorker.postMessage({\n      \"type\": \"getGeneExpression\",\n      \"payload\": {\n        \"gene\": reqGene\n      }\n    });\n  }, [reqGene]);\n\n  useEffect(() => {\n    triggerAnimation && defaultRedDims && window.scranWorker.postMessage({\n      \"type\": \"animate\" + defaultRedDims,\n      payload: {\n        params: params[defaultRedDims.toLowerCase()]\n      }\n    });\n  }, [triggerAnimation]);\n\n  // export an analysis\n  useEffect(() => {\n\n    if (exportState) {\n      window.scranWorker.postMessage({\n        \"type\": \"EXPORT\",\n        \"payload\": {\n          \"files\": inputFiles,\n          \"params\": params\n        },\n        \"msg\": \"not much to pass\"\n      });\n\n      AppToaster.show({ icon: \"download\", intent: \"primary\", message: \"Exporting analysis in the background\" });\n    } else {\n      inputFiles?.files && AppToaster.show({ icon: \"download\", intent: \"primary\", message: \"Analysis saved. Please check your downloads directory!\" });\n    }\n  }, [exportState]);\n\n  useEffect(() => {\n\n    if (indexedDBState) {\n      window.scranWorker.postMessage({\n        \"type\": \"SAVEKDB\",\n        \"payload\": {\n          \"title\": datasetName,\n        },\n        \"msg\": \"not much to pass\"\n      });\n\n      AppToaster.show({ icon: \"floppy-disk\", intent: \"primary\", message: \"Saving analysis in the background. Note: analysis is saved within the browser!!\" });\n    } else {\n      inputFiles?.files && AppToaster.show({ icon: \"floppy-disk\", intent: \"primary\", message: \"Analysis saved!\" });\n    }\n  }, [indexedDBState]);\n\n  // callback for all responses from workers\n  // all interactions are logged and shown on the UI\n  window.scranWorker.onmessage = (msg) => {\n    const payload = msg.data;\n\n    if (payload?.msg) {\n      let tmp = [...logs];\n      let d = new Date();\n      tmp.push(`${d.getHours() + \":\" + d.getMinutes() + \":\" + d.getSeconds()} - ${payload?.type} - ${payload?.msg}`);\n\n      setLogs(tmp);\n    }\n\n    if (payload?.type.endsWith(\"ERROR\")) {\n      setScranError(payload);\n    }\n\n    if (payload.type === \"INIT\") {\n      setLoading(false);\n      setWasmInitialized(true);\n    } else if (payload.type === \"KanaDB_store\") {\n      const { resp } = payload;\n      if (resp !== undefined) {\n        setKanaIDBRecs(resp);\n      }\n      setIndexedDBState(false);\n    } else if (payload.type === \"inputs_DATA\") {\n      setInitDims(`${payload.resp.dimensions.num_genes} genes, ${payload.resp.dimensions.num_cells} cells`);\n      setGenesInfo(payload.resp.genes);\n      setGeneColSel(Object.keys(payload.resp.genes)[0]);\n    } else if (payload.type === \"quality_control_metrics_DATA\") {\n      const { resp } = payload;\n      setQcData(resp);\n    } else if (payload.type === \"quality_control_thresholds_DATA\") {\n      const { resp } = payload;\n      let tmp = { ...qcData };\n      tmp[\"thresholds\"] = resp;\n      setQcData(tmp);\n    } else if (payload.type === \"quality_control_filtered_DATA\") {\n      setQcDims(`${payload.resp.retained}`);\n    } else if (payload.type === \"feature_selection_DATA\") {\n      const { resp } = payload;\n      setFSelectionData(resp);\n    } else if (payload.type === \"pca_DATA\") {\n      const { resp } = payload;\n      setPcaVarExp(resp);\n    } else if (payload.type === \"snn_cluster_graph_DATA\") {\n      const { resp } = payload;\n\n      let cluster_count = Math.max(...resp?.clusters) + 1;\n      if (customSelection) {\n        cluster_count += Object.keys(customSelection).length;\n      }\n      let cluster_colors = null;\n      if (cluster_count > Object.keys(palette).length) {\n        cluster_colors = randomColor({ luminosity: 'dark', count: cluster_count + 1 });\n      } else {\n        cluster_colors = palette[cluster_count.toString()];\n      }\n      setClusterColors(cluster_colors);\n\n      setClusterData(resp);\n\n      // show markers for the first cluster\n      setSelectedCluster(0);\n    } else if (payload.type === \"tsne_DATA\") {\n      const { resp } = payload;\n      setTsneData(resp);\n\n      let tmp = [...redDims];\n      tmp.push(\"TSNE\");\n      // once t-SNE is available, set this as the default display\n      if (!defaultRedDims) {\n        setDefaultRedDims(\"TSNE\");\n      }\n\n      setRedDims(tmp);\n      // also don't show the pong game anymore\n      setShowGame(false);\n      setShowAnimation(false);\n      setTriggerAnimation(false);\n    } else if (payload.type === \"tsne_iter\" || payload.type === \"umap_iter\") {\n      const { resp } = payload;\n      setAnimateData(resp);\n    } else if (payload.type === \"umap_DATA\") {\n      const { resp } = payload;\n      setUmapData(resp);\n\n      // enable UMAP selection\n      let tmp = [...redDims];\n      tmp.push(\"UMAP\");\n      setRedDims(tmp);\n\n      setShowAnimation(false);\n      setTriggerAnimation(false);\n    } else if (payload.type === \"markerGene_DATA\") {\n    } else if (payload.type === \"setMarkersForCluster\"\n      || payload.type === \"setMarkersForCustomSelection\") {\n      const { resp } = payload;\n      let records = [];\n      let index = Array(resp.ordering.length);\n      resp.means.forEach((x, i) => {\n        index[resp.ordering[i]] = i;\n        records.push({\n          \"gene\": resp?.ordering?.[i],\n          \"mean\": parseFloat(x.toFixed(2)),\n          \"delta\": parseFloat(resp?.delta_detected?.[i].toFixed(2)),\n          \"lfc\": parseFloat(resp?.lfc?.[i].toFixed(2)),\n          \"detected\": parseFloat(resp?.detected?.[i].toFixed(2)),\n          \"expanded\": false,\n          \"expr\": null,\n        });\n      });\n      setSelectedClusterIndex(index);\n      setSelectedClusterSummary(records);\n    } else if (payload.type === \"setGeneExpression\") {\n      const { resp } = payload;\n      let tmp = [...selectedClusterSummary];\n      tmp[selectedClusterIndex[resp.gene]].expr = Object.values(resp.expr);\n      setSelectedClusterSummary(tmp);\n      setReqGene(null);\n    } else if (payload.type === \"exportState\") {\n      const { resp } = payload;\n\n      let tmpLink = document.createElement(\"a\");\n      var fileNew = new Blob([resp], {\n        type: \"text/plain\"\n      });\n      tmpLink.href = URL.createObjectURL(fileNew);\n      tmpLink.download = datasetName.split(' ').join('_') + \".kana\";\n      tmpLink.click();\n\n      setExportState(false);\n    } else if (payload.type === \"KanaDB\") {\n      setIndexedDBState(false);\n    } else if (payload.type === \"loadedParameters\") {\n      const { resp } = payload;\n      setLoadParams(resp.params);\n\n      setTimeout(() => {\n        setInitLoadState(false);\n      }, 1000);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Header\n        setExportState={setExportState}\n        setIndexedDBState={setIndexedDBState}\n        initDims={initDims}\n        qcDims={qcDims}\n        logs={logs} \n        kanaIDBRecs={kanaIDBRecs}\n        setKanaIDBRecs={setKanaIDBRecs}\n        deletekdb={deletekdb}\n        setDeletekdb={setDeletekdb}/>\n      <div className=\"App-content\">\n        <div className=\"plot\">\n          {\n            defaultRedDims ?\n              <DimPlot\n                tsneData={tsneData} umapData={umapData}\n                animateData={animateData}\n                redDims={redDims}\n                defaultRedDims={defaultRedDims}\n                setDefaultRedDims={setDefaultRedDims}\n                showAnimation={showAnimation}\n                setShowAnimation={setShowAnimation}\n                setTriggerAnimation={setTriggerAnimation}\n                selectedClusterSummary={selectedClusterSummary}\n                setSelectedClusterSummary={setSelectedClusterSummary}\n                selectedClusterIndex={selectedClusterIndex}\n                selectedCluster={selectedCluster}\n                savedPlot={savedPlot}\n                setSavedPlot={setSavedPlot}\n                clusterData={clusterData}\n                customSelection={customSelection}\n                setCustomSelection={setCustomSelection}\n                setGene={setGene}\n                gene={gene}\n                clusterColors={clusterColors}\n                setClusterColors={setClusterColors}\n                setDelCustomSelection={setDelCustomSelection}\n              /> :\n              showGame ?\n                <div style={{\n                  height: '100%',\n                  width: '100%',\n                  display: 'flex',\n                  flexDirection: 'column',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  paddingTop: '50px'\n                }}>\n                  <Label>Get some coffee or play pong while you wait for the analysis to finish..</Label>\n                  <Button onClick={() => { setShowGame(false) }}>I'm good, go back</Button>\n                  <Pong />\n                </div>\n                :\n                <div style={{\n                  height: '100%',\n                  width: '100%',\n                  display: 'flex',\n                  flexDirection: 'column',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  paddingTop: '50px'\n                }}>\n                  <Spinner2 />\n                  <Label>Get some coffee or play pong while you wait for the analysis to finish..</Label>\n                  <Button onClick={() => { setShowGame(true) }}>Play Pong</Button>\n                </div>\n          }\n        </div>\n        <div className=\"marker\">\n          {clusterData ?\n            selectedClusterSummary && <MarkerPlot\n              selectedClusterSummary={selectedClusterSummary}\n              setSelectedClusterSummary={setSelectedClusterSummary}\n              selectedClusterIndex={selectedClusterIndex}\n              selectedCluster={selectedCluster}\n              setSelectedCluster={setSelectedCluster}\n              setClusterRank={setClusterRank}\n              clusterData={clusterData}\n              customSelection={customSelection}\n              setGene={setGene}\n              gene={gene}\n              clusterColors={clusterColors}\n              setReqGene={setReqGene}\n            /> :\n            <div style={{\n              height: '100%',\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center'\n            }}>\n              <Spinner2 />\n              <Label>Generating nearest neighbor graph to compute clusters....</Label>\n            </div>}\n        </div>\n        <div className=\"analysis\">\n          <Gallery\n            qcData={qcData}\n            pcaVarExp={pcaVarExp}\n            savedPlot={savedPlot}\n            setSavedPlot={setSavedPlot} \n            clusterData={clusterData}\n            clusterColors={clusterColors}\n            gene={gene}\n            />\n        </div>\n      </div>\n      <Overlay\n        isOpen={loading}\n        {...loadingProps}\n      >\n        <div className=\"spinner\">\n          <Spinner size={100} />\n          <p>Initializing kana</p>\n        </div>\n      </Overlay>\n\n      <Alert\n        canEscapeKeyCancel={false}\n        canOutsideClickCancel={false}\n        confirmButtonText=\"Reload App\"\n        icon=\"warning-sign\"\n        intent=\"danger\"\n        isOpen={scranError != null}\n        onConfirm={() => window.location.reload()}\n      >\n        <h3>{scranError?.type.replace(\"_\", \" \").toUpperCase()}</h3>\n        <Divider/>\n        <p>\n          {scranError?.msg}\n        </p>\n        <Divider/>\n        <p>If the error is related to input data, we support <a href=\"https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/output/matrices\">Matrix Market</a>, \n          <a href=\"https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/advanced/h5_matrices\">10X V3 HDF5</a> or H5AD formats.</p>\n        <p>\n          If not, please report the issue on <a href='https://github.com/jkanche/kana/issues' target=\"_blank\">GitHub</a>.\n        </p>\n      </Alert>\n\n    </div>\n  );\n}\n\nexport default React.memo(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport AppContext from \"./context/AppContext\";\n\nReactDOM.render(\n  // <React.StrictMode>\n    <AppContext>\n      <App />\n    </AppContext>,\n  //  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n// serviceWorkerRegistration.unregister();\n// serviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}