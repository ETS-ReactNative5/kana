{"version":3,"file":"static/js/729.1237660d.chunk.js","mappings":"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","sources":["workers/_utils.js","workers/_inputs.js","workers/mito.js","workers/_qc_metrics.js","workers/_qc_thresholds.js","workers/_qc_filter.js","workers/_normalization.js","workers/_model_gene_var.js","workers/_pca.js","workers/_neighbor_index.js","workers/_snn_neighbors.js","workers/_snn_graph.js","workers/_snn_cluster.js","workers/_kmeans_cluster.js","workers/_choose_clustering.js","workers/_utils_viz_parent.js","workers/_tsne_monitor.js","workers/_umap_monitor.js","workers/_utils_markers.js","workers/_score_markers.js","workers/_custom_markers.js","workers/KanaDBHandler.js","workers/scran.worker.js","workers/_utils_serialize.js","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["import * as scran from \"scran.js\";\nimport * as wa from \"wasmarrays.js\";\n\nexport function freeCache(object) {\n    if (object !== undefined && object !== null) {\n        try { // placeholder try() for now, because older scran.js don't work with double-free.\n            object.free();\n        } catch (e) {\n        }\n    }\n    return;\n}\n\nexport function freeReloaded(cache) {\n    if (\"reloaded\" in cache) {\n        for (const [k, v] of Object.entries(cache.reloaded)) {\n            if (v instanceof wa.WasmArray) {\n                v.free();\n            }\n        }\n        delete cache.reloaded;\n    }\n}\n\nexport function changedParameters(x, y) {\n    return JSON.stringify(x) != JSON.stringify(y);\n}\n\nexport function computeRange(arr) {\n    var max = -Infinity, min = Infinity;\n    arr.forEach(function (x) {\n        if (max < x) {\n            max = x;\n        }\n        if (min > x) {\n            min = x;\n        }\n    });\n    return [min, max];\n}\n\nexport function allocateCachedArray(size, type, cache, name = \"buffer\") {\n    var reallocate = true;\n    if (name in cache) {\n        var candidate = cache[name];\n        if (candidate.size != size || candidate.constructor.className != type) {\n            candidate.free();\n        } else {\n            reallocate = false;\n        }\n    }\n  \n    if (reallocate) {\n        switch (type) {\n            case \"Uint8Array\":\n                cache[name] = scran.createUint8WasmArray(size);\n                break;\n            case \"Int32Array\":\n                cache[name] = scran.createInt32WasmArray(size);\n                break;\n            case \"Float64Array\":\n                cache[name] = scran.createFloat64WasmArray(size);\n                break;\n            default:\n                // We only ever use one of the three above types in our \n                // internal data stores, so no need to go all-out here.\n                throw \"allocating '\" + type + \"' not yet supported\";\n        }\n    }\n\n    return cache[name];\n}\n\nexport function extractBuffers(object, store) {\n    if (Array.isArray(object)) {\n        for (const element of object) {\n            extractBuffers(element, store);\n        }\n    } else if (object.constructor == Object) {\n        for (const [key, element] of Object.entries(object)) {\n            extractBuffers(element, store);\n        }\n    } else if (ArrayBuffer.isView(object)) {\n        if (! (object.buffer instanceof ArrayBuffer)) {\n            throw \"only ArrayBuffers should be in the message payload\";\n        }\n        store.push(object.buffer);\n    }\n}\n\nexport function isObject(object) {\n    return typeof object === 'object' && Array.isArray(object) === false;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./_utils.js\";\nimport * as d3 from \"d3-dsv\";\nimport * as pako from \"pako\";\n\nvar cache = {};\nvar parameters = {};\nvar abbreviated = {};\n\nexport var changed = false;\n\nfunction dummyGenes(numberOfRows) {\n    let genes = []\n    for (let i = 0; i < numberOfRows; i++) {\n        genes.push(`Gene ${i + 1}`);\n    }\n    return { \"id\": genes };\n}\n\nfunction guessFeatureType() {\n    var gene_info_type = {};\n    var gene_info = fetchGenes();\n    for (const [key, val] of Object.entries(gene_info)) {\n        gene_info_type[key] = scran.guessFeatures(val);\n    }\n    cache.gene_types = gene_info_type;\n    return;\n}\n\nfunction readDSVFromBuffer(content, fname, delim = \"\\t\") {\n    var ext = fname.name.split('.').pop();\n\n    if (ext == \"gz\") {\n        content = pako.ungzip(content);\n    }\n\n    const dec = new TextDecoder();\n    let decoded = dec.decode(content);\n    const tsv = d3.dsvFormat(delim);\n    let parsed = tsv.parseRows(decoded);\n\n    return parsed;\n}\n\n/** Matrix Market **/\nfunction loadMatrixMarketRaw(files) {\n    utils.freeCache(cache.matrix);\n\n    // In theory, this section may support multiple files (e.g., for multiple samples).\n    var mtx_files = files.filter(x => x.type == \"mtx\");\n    var first_mtx = mtx_files[0];\n    var contents = new Uint8Array(first_mtx.buffer);\n    var ext = first_mtx.name.split('.').pop();\n    var is_compressed = (ext == \"gz\");\n    cache.matrix = scran.initializeSparseMatrixFromMatrixMarketBuffer(contents, { \"compressed\": is_compressed });\n\n    var genes_file = files.filter(x => x.type == \"genes\");\n    if (genes_file.length == 1) {\n        var genes_file = genes_file[0]\n        var content = new Uint8Array(genes_file.buffer);\n\n        let parsed = readDSVFromBuffer(content, genes_file);\n\n        if (parsed.length != cache.matrix.numberOfRows()) {\n            throw \"number of matrix rows is not equal to the number of genes in '\" + genes_file.name + \"'\";\n        }\n\n        var ids = [], symb = [];\n        parsed.forEach(x => {\n            ids.push(x[0]);\n            symb.push(x[1]);\n        });\n\n        cache.genes = { \"id\": ids, \"symbol\": symb };\n    } else {\n        cache.genes = dummyGenes(cache.matrix.numberOfRows());\n    }\n\n    scran.permuteFeatures(cache.matrix, cache.genes);\n\n    var annotations_file = files.filter(x => x.type == \"annotations\");\n    if (annotations_file.length == 1) {\n        var annotations_file = annotations_file[0]\n        var content = new Uint8Array(annotations_file.buffer);\n\n        let parsed = readDSVFromBuffer(content, annotations_file);\n\n        let diff = cache.matrix.numberOfColumns() - parsed.length;\n        // check if a header is present or not\n        let headerFlag = false;\n        if (diff === 0) {\n            headerFlag = false;\n        } else if (diff === -1) {\n            headerFlag = true;\n        } else {\n            throw \"number of annotations rows is not equal to the number of cells in '\" + annotations_file.name + \"'\";\n        }\n\n        let headers = [];\n        if (headerFlag) {\n            headers = parsed.shift();\n        } else {\n            parsed[0].forEach((x, i) => {\n                headers.push(`Column_${i + 1}`);\n            })\n        }\n\n        cache.annotations = {}\n        headers.forEach((x, i) => {\n            cache.annotations[x] = parsed.map(y => y[i]);\n        });\n\n    } else {\n        cache.annotations = null;\n    }\n\n    if (\"reloaded\" in cache) {\n        delete cache.reloaded;\n    }\n\n    return;\n}\n\nfunction loadMatrixMarket(args) {\n    var reader = new FileReaderSync();\n\n    // First pass computes an abbreviated version to quickly check for changes.\n    // Second pass does the actual readArrayBuffer.\n    for (var it = 0; it < 2; it++) {\n        var formatted = { \"type\": \"MatrixMarket\", \"files\": [] };\n\n        var bufferFun;\n        if (it == 0) {\n            bufferFun = (f) => f.size;\n        } else {\n            bufferFun = (f) => reader.readAsArrayBuffer(f);\n        }\n\n        for (const f of args.mtx) {\n            formatted.files.push({ \"type\": \"mtx\", \"name\": f.name, \"buffer\": bufferFun(f) });\n        }\n\n        if (args.gene !== null) {\n            if (args.gene.length !== 1) {\n                throw \"expected no more than one gene file\";\n            }\n            var genes_file = args.gene[0];\n            formatted.files.push({ \"type\": \"genes\", \"name\": genes_file.name, \"buffer\": bufferFun(genes_file) });\n        }\n\n        if (args.barcode !== null) {\n            if (args.barcode.length !== 1) {\n                throw \"expected no more than one cell annotation file\";\n            }\n            var annotations_file = args.barcode[0];\n            formatted.files.push({ \"type\": \"annotations\", \"name\": annotations_file.name, \"buffer\": bufferFun(annotations_file) });\n        }\n\n        if (it == 0) {\n            if (!utils.changedParameters(abbreviated, formatted)) {\n                changed = false;\n                return;\n            } else {\n                abbreviated = formatted;\n                changed = true;\n            }\n        } else {\n            parameters = formatted;\n            loadMatrixMarketRaw(formatted.files);\n        }\n    }\n\n    return;\n}\n\n/** HDF5 **/\n\nfunction load10XRaw(files) {\n    utils.freeCache(cache.matrix);\n\n    // In theory, we could support multiple HDF5 buffers.\n    var first_file = files[0];\n    var tmppath = first_file.name;\n    scran.writeFile(tmppath, new Uint8Array(first_file.buffer));\n\n    try {\n        cache.matrix = scran.initializeSparseMatrixFromHDF5(tmppath, \"matrix\");\n\n        // Fetching the gene IDs and names.\n        cache.genes = null;\n        let objects = scran.extractHDF5ObjectNames(tmppath);\n        if (\"features\" in objects[\"matrix\"]) {\n            let fobjects = objects[\"matrix\"][\"features\"];\n            if (\"id\" in fobjects && fobjects[\"id\"] === \"string dataset\") {\n                cache.genes = { id: scran.loadHDF5Dataset(tmppath, \"matrix/features/id\").contents };\n                if (\"name\" in fobjects && fobjects[\"name\"] === \"string dataset\") {\n                    cache.genes.names = scran.loadHDF5Dataset(tmppath, \"matrix/features/name\").contents;\n                }\n            }\n        }\n\n        // TODO: pull out sample IDs from the HDF5 file, if they exist.\n        cache.annotations = null;\n\n    } finally {\n        scran.removeFile(tmppath);\n    }\n\n    if (cache.genes === null) {\n        cache.genes = dummyGenes(cache.matrix.numberOfRows());\n    }\n    scran.permuteFeatures(cache.matrix, cache.genes);\n\n    if (\"reloaded\" in cache) {\n        delete cache.reloaded;\n    }\n\n    return;\n}\n\nfunction loadH5ADRaw(files, name) {\n    utils.freeCache(cache.matrix);\n\n    // In theory, we could support multiple HDF5 buffers.\n    var first_file = files[0];\n    var tmppath = first_file.name;\n    scran.writeFile(tmppath, new Uint8Array(first_file.buffer));\n\n    try {\n        cache.matrix = scran.initializeSparseMatrixFromHDF5(tmppath, \"X\");\n        let objects = scran.extractHDF5ObjectNames(tmppath);\n\n        // Trying to guess the gene names.\n        cache.genes = null;\n        if (\"var\" in objects) {\n            let vobjects = objects[\"var\"];\n            if (utils.isObject(vobjects)) {\n                if (\"_index\" in vobjects && vobjects[\"_index\"] == \"string dataset\") {\n                    cache.genes = { \"_index\": scran.loadHDF5Dataset(tmppath, \"var/_index\").contents };\n                    for (const [key, val] of Object.entries(vobjects)) {\n                        if (val === \"string dataset\" && (key.match(/name/i) || key.match(/symb/i))) {\n                            cache.genes[key] = scran.loadHDF5Dataset(tmppath, `var/${key}`).contents;\n                        }\n                    }\n                }\n            }\n        }\n\n        // Adding the annotations.\n        cache.annotations = null;\n        if (\"obs\" in objects) {\n            let bobjects = objects[\"obs\"];\n            cache.annotations = {};\n\n            if (utils.isObject(bobjects)) {\n                // Maybe it has names, maybe not, who knows; let's just add what's there.\n                if (\"_index\" in bobjects && bobjects[\"_index\"] == \"string dataset\") {\n                    cache.annotations[\"_index\"] = scran.loadHDF5Dataset(tmppath, \"obs/_index\").contents;\n                }\n\n                for (const [key, val] of Object.entries(bobjects)) {\n                    if (val === \"string dataset\" || val === \"integer dataset\" || val === \"float dataset\") {\n                        let bobj_factors = scran.loadHDF5Dataset(tmppath, `obs/${key}`).contents;\n\n                        if (\"__categories\" in bobjects && bobjects[\"__categories\"][key] == \"string dataset\") {\n                            let bobj_index = scran.loadHDF5Dataset(tmppath, `obs/__categories/${key}`).contents;\n                            cache.annotations[key] = {\n                                \"type\": \"factor\",\n                                \"index\": bobj_index,\n                                \"factor\": bobj_factors\n                            }\n                        } else {\n                            cache.annotations[key] = bobj_factors;\n                        }\n                    }\n                }\n            }\n        }\n\n    } finally {\n        scran.removeFile(tmppath);\n    }\n\n    if (cache.genes === null) {\n        cache.genes = dummyGenes(cache.matrix.numberOfRows());\n    }\n    scran.permuteFeatures(cache.matrix, cache.genes);\n\n    if (\"reloaded\" in cache) {\n        delete cache.reloaded;\n    }\n\n    return;\n}\n\nfunction loadHDF5(args, format) {\n    var reader = new FileReaderSync();\n\n    // First pass computes an abbreviated version to quickly check for changes.\n    // Second pass does the actual readArrayBuffer.\n    for (var it = 0; it < 2; it++) {\n        var formatted = { \"type\": format, \"files\": [] };\n\n        var bufferFun;\n        if (it == 0) {\n            bufferFun = (f) => f.size;\n        } else {\n            bufferFun = (f) => reader.readAsArrayBuffer(f);\n        }\n\n        for (const f of args.file) {\n            formatted.files.push({ \"type\": \"h5\", \"name\": f.name, \"buffer\": bufferFun(f) });\n        }\n\n        if (it == 0) {\n            if (!utils.changedParameters(abbreviated, formatted)) {\n                changed = false;\n                return;\n            } else {\n                abbreviated = formatted;\n                changed = true;\n            }\n        } else {\n            parameters = formatted;\n            if (format == \"10X\") {\n                load10XRaw(formatted.files);\n            } else {\n                loadH5ADRaw(formatted.files);\n            }\n        }\n    }\n\n    return;\n}\n\n/** Public functions (standard) **/\nexport function compute(args) {\n    switch (args.format) {\n        case \"mtx\":\n            loadMatrixMarket(args.files);\n            break;\n        case \"hdf5\":\n        case \"tenx\":\n            loadHDF5(args.files, \"10X\");\n            break;\n        case \"h5ad\":\n            loadHDF5(args.files, \"H5AD\");\n            break;\n        case \"kana\":\n            // do nothing, this is handled by unserialize.\n            break;\n        default:\n            throw \"unknown matrix file extension: '\" + args.format + \"'\";\n    }\n    guessFeatureType();\n    return;\n}\n\nexport function results() {\n    var output = { \"dimensions\": fetchDimensions() }\n    if (\"reloaded\" in cache) {\n        output.genes = { ...cache.reloaded.genes };\n\n        if (cache.annotations) {\n            output.annotations = Object.keys(cache.reloaded.annotations);\n        }\n    } else {\n        output.genes = { ...cache.genes };\n        if (cache.annotations) {\n            output.annotations = Object.keys(cache.annotations);\n        }\n    }\n    return output;\n}\n\nexport function serialize() {\n    var contents = {};\n    if (\"reloaded\" in cache) {\n        contents.genes = { ...cache.reloaded.genes };\n        contents.num_cells = cache.reloaded.num_cells;\n        if (cache.reloaded.annotations) {\n            contents.annotations = cache.reloaded.annotations;\n        }\n    } else {\n        contents.genes = { ...cache.genes };\n        contents.num_cells = cache.matrix.numberOfColumns();\n        if (cache.annotations) {\n            contents.annotations = cache.annotations;\n        }\n    }\n\n    // Making a deep-ish clone of the parameters so that any fiddling with\n    // buffers during serialization does not compromise internal state.\n    var parameters2 = { ...parameters };\n    parameters2.files = parameters.files.map(x => { return { ...x }; });\n\n    return {\n        \"parameters\": parameters2,\n        \"contents\": contents\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    guessFeatureType();\n    return;\n}\n\n/** Public functions (custom) **/\nexport function fetchCountMatrix() {\n    if (\"reloaded\" in cache) {\n        if (parameters.type == \"MatrixMarket\") {\n            loadMatrixMarketRaw(parameters.files);\n\n        } else if (parameters.type == \"H5AD\") {\n            loadH5ADRaw(parameters.files);\n\n        } else if (parameters.type == \"10X\") {\n            load10XRaw(parameters.files);\n\n        } else if (parameters.type == \"HDF5\") {\n            // legacy support: trying to guess what it is based on its extension.\n            if (parameters.files[0].name.match(/h5ad$/i)) {\n                loadH5ADRaw(parameters.files);\n            } else {\n                load10XRaw(parameters.files);\n            }\n\n        } else {\n            throw `unrecognized count matrix format, ${parameters.type}`;\n        }\n    }\n    return cache.matrix;\n}\n\nexport function fetchDimensions() {\n    if (\"reloaded\" in cache) {\n        return {\n            // This should contain at least one element,\n            // and all of them should have the same length,\n            // so indexing by the first element is safe.\n            \"num_genes\": Object.values(cache.reloaded.genes)[0].length,\n            \"num_cells\": cache.reloaded.num_cells\n        };\n    } else {\n        return {\n            \"num_genes\": cache.matrix.numberOfRows(),\n            \"num_cells\": cache.matrix.numberOfColumns()\n        };\n    }\n}\n\nexport function fetchGenes() {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.genes;\n    } else {\n        return cache.genes;\n    }\n}\n\nexport function fetchAnnotations(col) {\n    let annots, asize;\n    if (\"reloaded\" in cache) {\n        annots = cache.reloaded.annotations;\n        asize = cache.reloaded.matrix.numberOfColumns();\n    } else {\n        annots = cache.annotations;\n        asize = cache.matrix.numberOfColumns();\n    }\n\n    if (!(col in annots)) {\n        throw `column ${col} does not exist in col.tsv`;\n    }\n\n    if (utils.isObject(annots[col]) && \"type\" in annots[col]) {\n        return annots[col];\n    }\n\n    let uvals = {};\n    let uTypedAray = new Uint8Array(asize);\n    annots[col].map((x, i) => {\n        if (!(x in uvals)) {\n            uvals[x] = Object.keys(uvals).length;\n        }\n\n        uTypedAray[i] = uvals[x];\n    });\n\n    return {\n        \"index\": Object.keys(uvals),\n        \"factor\": uTypedAray\n    }\n}\n","/* Derived from scran.js's blacklists.js.R. */\n\nexport var mito = {};\nmito.ensembl = new Set([\"ENSMUSG00000064336\",\"ENSMUSG00000064337\",\"ENSMUSG00000064338\",\"ENSMUSG00000064339\",\"ENSMUSG00000064340\",\"ENSMUSG00000064341\",\"ENSMUSG00000064342\",\"ENSMUSG00000064343\",\"ENSMUSG00000064344\",\"ENSMUSG00000064345\",\"ENSMUSG00000064346\",\"ENSMUSG00000064347\",\"ENSMUSG00000064348\",\"ENSMUSG00000064349\",\"ENSMUSG00000064350\",\"ENSMUSG00000064351\",\"ENSMUSG00000064352\",\"ENSMUSG00000064353\",\"ENSMUSG00000064354\",\"ENSMUSG00000064355\",\"ENSMUSG00000064356\",\"ENSMUSG00000064357\",\"ENSMUSG00000064358\",\"ENSMUSG00000064359\",\"ENSMUSG00000064360\",\"ENSMUSG00000064361\",\"ENSMUSG00000064363\",\"ENSMUSG00000064364\",\"ENSMUSG00000064365\",\"ENSMUSG00000064366\",\"ENSMUSG00000064367\",\"ENSMUSG00000064368\",\"ENSMUSG00000064369\",\"ENSMUSG00000064370\",\"ENSMUSG00000064371\",\"ENSMUSG00000064372\",\"ENSMUSG00000065947\",\"ENSG00000198695\",\"ENSG00000198712\",\"ENSG00000198727\",\"ENSG00000198763\",\"ENSG00000198786\",\"ENSG00000198804\",\"ENSG00000198840\",\"ENSG00000198886\",\"ENSG00000198888\",\"ENSG00000198899\",\"ENSG00000198938\",\"ENSG00000209082\",\"ENSG00000210049\",\"ENSG00000210077\",\"ENSG00000210082\",\"ENSG00000210100\",\"ENSG00000210107\",\"ENSG00000210112\",\"ENSG00000210117\",\"ENSG00000210127\",\"ENSG00000210135\",\"ENSG00000210140\",\"ENSG00000210144\",\"ENSG00000210151\",\"ENSG00000210154\",\"ENSG00000210156\",\"ENSG00000210164\",\"ENSG00000210174\",\"ENSG00000210176\",\"ENSG00000210184\",\"ENSG00000210191\",\"ENSG00000210194\",\"ENSG00000210195\",\"ENSG00000210196\",\"ENSG00000211459\",\"ENSG00000212907\",\"ENSG00000228253\"]);\nmito.symbol = new Set([\"mt-Tf\",\"mt-Rnr1\",\"mt-Tv\",\"mt-Rnr2\",\"mt-Tl1\",\"mt-Nd1\",\"mt-Ti\",\"mt-Tq\",\"mt-Tm\",\"mt-Nd2\",\"mt-Tw\",\"mt-Ta\",\"mt-Tn\",\"mt-Tc\",\"mt-Ty\",\"mt-Co1\",\"mt-Ts1\",\"mt-Td\",\"mt-Co2\",\"mt-Tk\",\"mt-Atp8\",\"mt-Atp6\",\"mt-Co3\",\"mt-Tg\",\"mt-Nd3\",\"mt-Tr\",\"mt-Nd4\",\"mt-Th\",\"mt-Ts2\",\"mt-Tl2\",\"mt-Nd5\",\"mt-Nd6\",\"mt-Te\",\"mt-Cytb\",\"mt-Tt\",\"mt-Tp\",\"mt-Nd4l\",\"MT-ND6\",\"MT-CO2\",\"MT-CYB\",\"MT-ND2\",\"MT-ND5\",\"MT-CO1\",\"MT-ND3\",\"MT-ND4\",\"MT-ND1\",\"MT-ATP6\",\"MT-CO3\",\"MT-TL1\",\"MT-TF\",\"MT-TV\",\"MT-RNR2\",\"MT-TI\",\"MT-TQ\",\"MT-TM\",\"MT-TW\",\"MT-TA\",\"MT-TN\",\"MT-TC\",\"MT-TY\",\"MT-TS1\",\"MT-TD\",\"MT-TK\",\"MT-TG\",\"MT-TR\",\"MT-TH\",\"MT-TS2\",\"MT-TL2\",\"MT-TE\",\"MT-TT\",\"MT-TP\",\"MT-RNR1\",\"MT-ND4L\",\"MT-ATP8\"]);\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as inputs from \"./_inputs.js\";\nimport { mito } from \"./mito.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nfunction rawCompute(args) {\n    utils.freeCache(cache.raw);\n    var mat = inputs.fetchCountMatrix();\n\n    // TODO: add more choices.\n    var nsubsets = 1;\n    var subsets = utils.allocateCachedArray(mat.numberOfRows() * nsubsets, \"Uint8Array\", cache);\n    subsets.fill(0);\n\n    var gene_info = inputs.fetchGenes();\n    var sub_arr = subsets.array();\n    for (const [key, val] of Object.entries(gene_info)) {\n        if (args.use_mito_default) {\n            val.forEach((x, i) => {\n                if (mito.symbol.has(x) || mito.ensembl.has(x)) {\n                    sub_arr[i] = 1;\n                }\n            });\n        } else {\n            var lower_mito = args.mito_prefix.toLowerCase();\n            val.forEach((x, i) => {\n                if(x.toLowerCase().startsWith(lower_mito)) {\n                    sub_arr[i] = 1;\n                }\n            });\n        }\n    }\n\n    var mat = inputs.fetchCountMatrix();\n\n    cache.raw = scran.computePerCellQCMetrics(mat, subsets);\n    delete cache.reloaded;\n    return;\n}\n\nfunction fetchResults() {\n    var data = {};\n    if (\"reloaded\" in cache) {\n        var qc_output = cache.reloaded;\n        data.sums = qc_output.sums.slice();\n        data.detected = qc_output.detected.slice();\n        data.proportion = qc_output.proportion.slice();\n    } else {\n        var qc_output = cache.raw;\n        data.sums = qc_output.sums();\n        data.detected = qc_output.detected();\n        data.proportion = qc_output.subsetProportions(0);\n    }\n    return data;\n}\n\nexport function compute(args) {\n    if (!inputs.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        rawCompute(args);\n        parameters = args;\n        changed = true;\n    }\n    return;\n}\n\nexport function results() {\n    var data = fetchResults();\n\n    var ranges = {};\n    ranges.sums = utils.computeRange(data.sums);\n    ranges.detected = utils.computeRange(data.detected);\n    ranges.proportion = utils.computeRange(data.proportion);\n\n    return { \n        \"data\": data, \n        \"ranges\": ranges \n    };\n}\n\nexport function serialize() {\n    return {\n      \"parameters\": parameters,\n      \"contents\": fetchResults()\n    };\n}\n\nexport function unserialize(saved) {\n    /* TODO: reconstutite a fully-formed QCMetrics object so that\n     * fetchQCMetrics() doesn't have to recompute it.\n     */\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\nexport function fetchQCMetrics() {\n    if (\"reloaded\" in cache) {\n        rawCompute();\n    }\n    return cache.raw;\n}\n\nexport function fetchSums({ unsafe = true } = {}) {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.sums;\n    } else {\n        // Unsafe, because we're returning a raw view into the Wasm heap,\n        // which might be invalidated upon further allocations.\n        return cache.raw.sums({ copy: !unsafe });\n    }\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as metrics from \"./_qc_metrics.js\";\nimport * as wa from \"wasmarrays.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nexport function compute(args) {\n    if (!metrics.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        utils.freeCache(cache.raw);\n        var stats = metrics.fetchQCMetrics();\n\n        cache.raw = scran.computePerCellQCFilters(stats, { numberOfMADs: args.nmads });\n\n        utils.freeReloaded(cache);\n        changed = true;\n        parameters = args;\n    }\n    return;\n}\n\nexport function results() {\n    let data;\n    if (\"reloaded\" in cache) {\n        data = {\n            \"sums\": cache.reloaded.sums,\n            \"detected\": cache.reloaded.detected,\n            \"proportion\": cache.reloaded.proportion\n        };\n    } else {\n        var obj = cache.raw;\n        data = {\n            \"sums\": obj.thresholdsSums()[0],\n            \"detected\": obj.thresholdsDetected()[0],\n            \"proportion\": obj.thresholdsSubsetProportions(0)[0] // TODO: generalize...\n        };\n    }\n    return data;\n}\n\nexport function serialize() {\n    var contents = results();\n    contents.discards = fetchDiscards();\n    return {\n        \"parameters\": parameters,\n        \"contents\": contents\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n\n    utils.freeReloaded(cache);\n    cache.reloaded = saved.contents;\n\n    var tmp = scran.createUint8WasmArray(cache.reloaded.discards.length);\n    tmp.set(cache.reloaded.discards);\n    cache.reloaded.discards = tmp;\n    \n    return;\n}\n\nexport function fetchDiscardsAsWasmArray() {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.discards;        \n    } else {\n        return cache.raw.discardOverall({ copy: \"view\" });\n    }\n}\n\nexport function fetchDiscards({ unsafe = false } = {}) {\n    var out;\n    if (\"reloaded\" in cache) {\n        out = cache.reloaded.discards.array();\n    } else {\n        out = cache.raw.discardOverall();\n    }\n\n    if (unsafe) {\n        // Unsafe, because we're returning a raw view into the Wasm heap,\n        // which might be invalidated upon further allocations.\n        return out;\n    } else {\n        return out.slice();\n    }\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as inputs from \"./_inputs.js\";\nimport * as thresholds from \"./_qc_thresholds.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nfunction rawCompute() {\n    utils.freeCache(cache.matrix);\n    var mat = inputs.fetchCountMatrix();\n\n    var disc = thresholds.fetchDiscardsAsWasmArray();\n    cache.matrix = scran.filterCells(mat, disc);\n\n    delete cache.reloaded;\n    return;\n}\n\nexport function compute(args) {\n    if (!inputs.changed && !thresholds.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        rawCompute();\n        parameters = args;\n        changed = true;\n    }\n    return;\n}\n   \nexport function results() {\n    return {\n      \"retained\": fetchRetained()\n    };\n}\n\nexport function serialize() {\n    return {\n        \"parameters\": parameters,\n        \"contents\": results()\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n\n    // Precomputing this for easier retrieval later.\n    var discards = thresholds.fetchDiscards({ unsafe: true });\n    var retained = 0;\n    for (const i of discards) {\n        if (i == 0) {\n            retained++;\n        }\n    }\n    cache.reloaded.retained = retained;\n    return;\n}\n\nexport function fetchFilteredMatrix() {\n    if (\"reloaded\" in cache) {\n        rawCompute();\n    }\n    return cache.matrix;    \n}\n\nexport function fetchRetained() {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.retained;\n    } else {\n        return cache.matrix.numberOfColumns();\n    }\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as thresholds from \"./_qc_thresholds.js\";\nimport * as filter from \"./_qc_filter.js\";\nimport * as metrics from \"./_qc_metrics.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nfunction rawCompute() {\n    var mat = filter.fetchFilteredMatrix();\n    var buffer = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", cache);\n\n    // Better not have any more allocations in between now and filling of size_factors!\n    var sums = metrics.fetchSums({ unsafe: true });\n    var discards = thresholds.fetchDiscards({ unsafe: true });\n\n    // Reusing the totals computed earlier.\n    var size_factors = buffer.array();\n    var j = 0;\n    for (var i = 0; i < discards.length; ++i) {\n        if (!discards[i]) {\n            size_factors[j] = sums[i];\n            j++;\n        }\n    }\n\n    if (j != mat.numberOfColumns()) {\n        throw \"normalization and filtering are not in sync\";\n    }\n\n    utils.freeCache(cache.matrix);\n    cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer });\n\n    delete cache.reloaded;\n    return;\n}\n\nexport function compute(args) {\n    if (!metrics.changed && !filter.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        rawCompute();\n        parameters = args;\n        changed = true;\n    }\n    return;\n}\n\nexport function results() {\n    return {};\n}\n\nexport function serialize() {\n    return {\n        \"parameters\": parameters,\n        \"contents\": results()\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\nexport function fetchNormalizedMatrix() {\n    if (\"reloaded\" in cache) {\n        rawCompute();\n    }\n    return cache.matrix;\n}\n\nexport function fetchExpression(index) {\n    var mat = fetchNormalizedMatrix();\n    var buffer = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", cache); // re-using the buffer.\n    mat.row(index, { buffer: buffer });\n    return buffer.slice();\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as normalization from \"./_normalization.js\";\n  \nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nfunction spawnStats() {\n    var model_output = cache.raw;\n    return {\n        \"means\": model_output.means(),\n        \"vars\": model_output.variances(),\n        \"fitted\": model_output.fitted(),\n        \"resids\": model_output.residuals()\n    };\n}\n\nexport function compute(args) {\n    if (!normalization.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        var mat = normalization.fetchNormalizedMatrix();\n        cache.raw = scran.modelGeneVar(mat, { span: args.span });\n\n        cache.sorted_residuals = cache.raw.residuals().slice(); // a separate copy.\n        cache.sorted_residuals.sort();\n\n        parameters = args;\n        delete cache.reloaded;\n        changed = true;\n    }\n    return;\n}\n\nexport function results() {\n    if (\"reloaded\" in cache) {\n        return {\n            \"means\": cache.reloaded.means.slice(),\n            \"vars\": cache.reloaded.vars.slice(),\n            \"fitted\": cache.reloaded.fitted.slice(),\n            \"resids\": cache.reloaded.resids.slice()\n        };\n    } else {\n        return spawnStats();\n    }\n}\n\nexport function serialize() {\n    return { \n        \"parameters\": parameters,\n        \"contents\": results()\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    cache.sorted_residuals = cache.reloaded.resids.slice();\n    cache.sorted_residuals.sort();\n    return;\n}\n\nexport function fetchSortedResiduals() {\n    return cache.sorted_residuals;\n}\n\nexport function fetchResiduals({ unsafe = false } = {}) {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.resids;\n    } else {\n        return cache.raw.residuals({ copy: !unsafe });\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./_utils.js\";\nimport * as normalization from \"./_normalization.js\";\nimport * as variance from \"./_model_gene_var.js\";\nimport * as wa from \"wasmarrays.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nfunction fetchPCsAsWasmArray() {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.pcs;\n    } else {\n        return cache.raw.principalComponents({ copy: \"view\" });\n    }\n}\n\nexport function compute(args) {\n    if (!normalization.changed && !variance.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        // Choosing the highly variable genes.\n        var sorted_resids = variance.fetchSortedResiduals();\n        var threshold_at = sorted_resids[sorted_resids.length - args.num_hvgs];\n\n        var mat = normalization.fetchNormalizedMatrix();\n        var sub = utils.allocateCachedArray(mat.numberOfRows(), \"Uint8Array\", cache);\n        var unsorted_resids = variance.fetchResiduals({ unsafe: true });\n        sub.array().forEach((element, index, array) => {\n            array[index] = unsorted_resids[index] >= threshold_at;\n        });\n\n        // Actually performing the PCA.\n        utils.freeCache(cache.raw);\n        cache.raw = scran.runPCA(mat, { features: sub, numberOfPCs: args.num_pcs });\n\n        utils.freeReloaded(cache);\n        changed = true;\n        parameters = args;\n    }\n    return;\n}\n\nexport function results() {\n    var var_exp;\n\n    if (\"reloaded\" in cache) {\n        var_exp = cache.reloaded.var_exp.slice();\n    } else {\n        var pca_output = cache.raw;\n        var_exp = pca_output.varianceExplained();\n        var total_var = pca_output.totalVariance();\n        var_exp.forEach((x, i) => {\n            var_exp[i] = x/total_var;\n        });\n    }\n\n    return { \"var_exp\": var_exp };\n}\n\nexport function serialize() {\n    var to_save = results();\n    to_save.pcs = fetchPCsAsWasmArray().slice();\n    return {\n      \"parameters\": parameters,\n      \"contents\": to_save\n    };\n}\n \nexport function unserialize(saved) {\n    parameters = saved.parameters;\n\n    utils.freeReloaded(cache);\n    cache.reloaded = saved.contents;\n\n    var tmp = scran.createFloat64WasmArray(cache.reloaded.pcs.length);\n    tmp.set(cache.reloaded.pcs);\n    cache.reloaded.pcs = tmp;\n    return;\n}\n\nexport function fetchPCs() {\n    var pcs = fetchPCsAsWasmArray();\n    return {\n        \"pcs\": pcs,\n        \"num_pcs\": parameters.num_pcs,\n        \"num_obs\": pcs.length / parameters.num_pcs\n    };\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./_utils.js\";\nimport * as pca from \"./_pca.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nexport function rawCompute(args) {\n    utils.freeCache(cache.raw);\n    var pcs = pca.fetchPCs();\n    cache.raw = scran.buildNeighborSearchIndex(pcs.pcs, { numberOfDims: pcs.num_pcs, numberOfCells: pcs.num_obs });\n    delete cache.reloaded;\n    return;\n}\n\nexport function compute(args) {\n    if (!pca.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        rawCompute(args);\n        parameters = args;\n        changed = true;\n    }\n    return;\n}\n\nexport function results() {\n    return {};\n}\n\nexport function serialize() {\n    return {\n      \"parameters\": parameters,\n      \"contents\": results()\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\nexport function fetchIndex() {\n    if (\"reloaded\" in cache) {\n        rawCompute(parameters);\n    }\n    return cache.raw;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./_utils.js\";\nimport * as index from \"./_neighbor_index.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nexport function rawCompute(args) {\n    utils.freeCache(cache.raw);\n    var nn_index = index.fetchIndex();\n    cache.raw = scran.findNearestNeighbors(nn_index, args.k);\n    delete cache.reloaded;\n    return;\n}\n\nexport function compute(args) {\n    // Setting the existing cluster_method to the new method so that we don't\n    // pick up changes in the method in the changedParameters() call. This aims\n    // to preserve the state if only the clustering method choice changed, such\n    // that a user avoids recomputation when they switch back to this method.\n    let method = args.cluster_method;\n    delete args.cluster_method;\n\n    if (changed !== null && !index.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n\n    } else if (!method.startsWith(\"snn_\")) {\n        changed = null; // neither changed or unchanged, just skipped.\n        utils.freeCache(cache.raw); // freeing some memory as a courtesy.\n        delete cache.reloaded;\n        parameters = args;\n\n    } else {\n        rawCompute(args);\n        parameters = args;\n        changed = true;\n    }\n\n    return;\n}\n\nexport function results() {\n    return {};\n}\n\nexport function serialize() {\n    let output = { \n        \"parameters\": parameters\n    };\n\n    if (changed === null) {\n        output.contents = null;\n    } else {\n        output.contents = results();\n    }\n    \n    return output;\n};\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n\n    if (saved.contents !== null) {\n        cache.reloaded = saved.contents;\n    } else {\n        changed = null;\n    }\n\n    return;\n}\n\nexport function fetchNeighbors() {\n    if (\"reloaded\" in cache) {\n        rawCompute(parameters);\n    }\n    return cache.raw;\n}\n","import * as scran from \"scran.js\";\nimport * as neighbors from \"./_snn_neighbors.js\";\nimport * as utils from \"./_utils.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nfunction rawCompute(args) {\n    utils.freeCache(cache.raw);\n    var res = neighbors.fetchNeighbors();\n    cache.raw = scran.buildSNNGraph(res, { scheme: args.scheme });\n    delete cache.reloaded;\n    return;\n}\n\nexport function compute(args) {\n    if (neighbors.changed === null) { // If my upstream was skipped, then I am also skipped.\n        changed = null;\n        utils.freeCache(cache.raw); // Clearing out memory as a courtesy.\n        delete cache.reloaded;\n        parameters = args;\n\n    } else if (changed !== null && !neighbors.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n\n    } else {\n        rawCompute(args);\n        parameters = args;\n        changed = true;\n    }\n\n    return;\n}\n\nexport function results() {\n    return {};\n}\n\nexport function serialize() {\n    let output = { \n        \"parameters\": parameters\n    };\n\n    if (changed === null) {\n        output.contents = null;\n    } else {\n        output.contents = results();\n    }\n\n    return output;\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n\n    if (saved !== undefined) {\n        cache.reloaded = saved.contents;\n    } else {\n        changed = null;\n    }\n\n    return;\n}\n\nexport function fetchGraph() {\n    if (\"reloaded\" in cache) {\n        rawCompute(parameters);\n    }\n    return cache.raw;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as graph from \"./_snn_graph.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nexport function fetchClustersAsWasmArray() {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.clusters;\n    } else {\n        return cache.raw.membership({ copy: \"view\" });\n    }\n}\n\nexport function compute(args) {\n    if (graph.changed === null) { // If my upstream was skipped, then I am also skipped.\n        changed = null;\n        utils.freeCache(cache.raw); // Also freeing some memory as a courtesy.\n        utils.freeReloaded(cache);\n        parameters = args;\n\n    } else if (changed !== null && !graph.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n        \n    } else {\n        utils.freeCache(cache.raw);\n        var g = graph.fetchGraph();\n        cache.raw = scran.clusterSNNGraph(g, { resolution: args.resolution });\n\n        parameters = args;\n        changed = true;\n        utils.freeReloaded(cache);\n    }\n\n    return;\n}\n\nexport function results() {\n    // Cluster IDs will be passed to main thread in \n    // choose_clustering, so no need to do it here.\n    return {};\n}\n\nexport function serialize() {\n    let output = { \n        \"parameters\": parameters\n    };\n\n    if (changed === null) {\n        output.contents = null;\n    } else {\n        output.contents = {\n            \"clusters\": fetchClustersAsWasmArray().slice()\n        };\n    }\n\n    return output;\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n\n    if (saved.contents !== null) {\n        utils.freeReloaded(cache);\n        cache.reloaded = saved.contents;\n\n        var out = scran.createInt32WasmArray(cache.reloaded.clusters.length);\n        out.set(cache.reloaded.clusters);\n        cache.reloaded.clusters = out;\n    } else {\n        changed = null;\n    }\n\n    return;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as pca from \"./_pca.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nexport function fetchClustersAsWasmArray() {\n    if (\"reloaded\" in cache) {\n        return cache.reloaded.clusters;\n    } else {\n        return cache.raw.clusters({ copy: \"view\" });\n    }\n}\n\nexport function compute(args) {\n    // Removing the cluster_method so that we don't pick up changes in the\n    // method in the changedParameters() call. This aims to preserve the state\n    // if only the clustering method choice changed, such that a user avoids\n    // recomputation when they switch back to this method.\n    let method = args.cluster_method;\n    delete args.cluster_method;\n\n    if (changed !== null && !pca.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n\n    } else if (method !== \"kmeans\") {\n        changed = null; // neither changed or unchanged, just skipped.\n        utils.freeCache(cache.raw); // free up some memory as a courtesy.\n        utils.freeReloaded(cache);\n        parameters = args;\n\n    } else {\n        utils.freeCache(cache.raw);\n        var pcs = pca.fetchPCs();\n        cache.raw = scran.clusterKmeans(pcs.pcs, args.k, { numberOfDims: pcs.num_pcs, numberOfCells: pcs.num_obs, initMethod: \"pca-part\" });\n        parameters = args;\n        changed = true;\n        utils.freeReloaded(cache);\n    }\n\n    return;\n}\n\nexport function results() {\n    // Cluster IDs will be passed to main thread in \n    // choose_clustering, so no need to do it here.\n    return {};\n}\n\nexport function serialize() {\n    let output = { \n        \"parameters\": parameters\n    };\n\n    if (changed === null) {\n        output.contents = null;\n    } else {\n        output.contents = {\n            \"clusters\": fetchClustersAsWasmArray().slice()\n        };\n    }\n\n    return output;\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n\n    if (saved.contents !== null) {\n        utils.freeReloaded(cache); // free anything that might have been there previously.\n        cache.reloaded = saved.contents;\n\n        var out = scran.createInt32WasmArray(cache.reloaded.clusters.length);\n        out.set(cache.reloaded.clusters);\n        cache.reloaded.clusters = out;\n    } else {\n        changed = null;\n    }\n\n    return;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./_utils.js\";\nimport * as snn_cluster from \"./_snn_cluster.js\";\nimport * as kmeans_cluster from \"./_kmeans_cluster.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\n/** Standard functions **/\nexport function compute(args) {\n    changed = true;\n    \n    if (!utils.changedParameters(parameters, args)) {\n        if (args.method == \"snn_graph\") {\n            if (!snn_cluster.changed) {\n                changed = false;\n            }\n        } else if (args.method == \"kmeans\") {\n            if (!kmeans_cluster.changed) {\n                changed = false;\n            }\n        }\n    }\n\n    if (changed) {\n        delete cache.reloaded;\n        parameters = args;\n        changed = true;\n    }\n    \n    return;\n}\n\nexport function results() {\n    var clusters = fetchClustersAsWasmArray();\n    return { \"clusters\": clusters.slice() };\n}\n\nexport function serialize() {\n    // No need to serialize the cluster IDs,\n    // as this is done for each step.\n    return {\n        \"parameters\": parameters,\n        \"contents\": {}\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\n/** Non-standard functions **/\nexport function fetchClustersAsWasmArray() {\n    if (parameters.method == \"snn_graph\") {\n        return snn_cluster.fetchClustersAsWasmArray();\n    } else if (parameters.method == \"kmeans\") {\n        return kmeans_cluster.fetchClustersAsWasmArray();\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as index from \"./_neighbor_index.js\";\nimport * as utils from \"./_utils.js\";\n\nexport function computeNeighbors(k) {\n    var nn_index = index.fetchIndex();\n\n    var output = { \"num_obs\": nn_index.numberOfCells() };\n    var results = null, rbuf = null, ibuf = null, dbuf = null;\n    try {\n        results = scran.findNearestNeighbors(nn_index, k);\n\n        rbuf = scran.createInt32WasmArray(results.numberOfCells());\n        ibuf = scran.createInt32WasmArray(results.size());\n        dbuf = scran.createFloat64WasmArray(results.size());\n\n        results.serialize({ runs: rbuf, indices: ibuf, distances: dbuf });\n        output[\"size\"] = results.size();\n        output[\"runs\"] = rbuf.array().slice();\n        output[\"indices\"] = ibuf.array().slice();\n        output[\"distances\"] = dbuf.array().slice();\n\n    } finally {\n        if (results !== null) {\n            results.free();\n        }\n        if (rbuf !== null) {\n            rbuf.free();\n        }\n        if (ibuf !== null) {\n            ibuf.free();\n        }\n        if (dbuf !== null) {\n            dbuf.free();\n        }\n    }\n\n    return output;\n}\n\nexport function sendTask(worker, payload, cache, transferrable = []) {\n    var i = cache.counter;\n    var p = new Promise((resolve, reject) => {\n        cache.promises[i] = { \"resolve\": resolve, \"reject\": reject };\n    });\n    cache.counter++;\n    payload.id = i;\n    worker.postMessage(payload, transferrable);\n    return p;\n}\n\nexport function initializeWorker(worker, cache) {\n    worker.onmessage = function (msg) {\n        var type = msg.data.type;\n        if (type.endsWith(\"_iter\")) {\n            postMessage({\n                \"type\": type,\n                \"resp\": {\n                    \"x\": msg.data.x,\n                    \"y\": msg.data.y,\n                    \"iteration\": msg.data.iteration\n                },\n            }, [msg.data.x.buffer, msg.data.y.buffer]);\n            return;\n        }\n  \n        var id = msg.data.id;\n        var fun = cache.promises[id];\n        if (type == \"error\") {\n            fun.reject(msg.data.error);\n        } else {\n            fun.resolve(msg.data.data);\n        }\n        delete cache.promises[id];\n    };\n    return sendTask(worker, { \"cmd\": \"INIT\" }, cache);\n}\n\nexport function runWithNeighbors(worker, args, nn_out, cache) {\n    var run_msg = {\n        \"cmd\": \"RUN\",\n        \"params\": args \n    };\n\n    var transferrable = [];\n    if (nn_out !== null) {\n        run_msg.neighbors = nn_out;\n        utils.extractBuffers(nn_out, transferrable);\n    }\n\n    return sendTask(worker, run_msg, cache, transferrable);\n}\n\nexport function retrieveCoordinates(worker, cache) {\n    if (\"reloaded\" in cache) {\n        // Buffers are transferred to the main thread, so we need to make sure we\n        // clone it so that we don't lose our master copy.\n        var copy = { ...cache.reloaded };\n        copy.x = copy.x.slice();\n        copy.y = copy.y.slice();\n        return new Promise(resolve => resolve(copy));\n    } else {\n        return cache.run.then(x => sendTask(worker, { \"cmd\": \"FETCH\" }, cache));\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as vizutils from \"./_utils_viz_parent.js\";\nimport * as index from \"./_neighbor_index.js\";\nimport * as utils from \"./_utils.js\";\n\nvar cache = { \"counter\": 0, \"promises\": {} };\nvar parameters = {};\nvar worker = null;\n\nexport function initialize() {\n    worker = new Worker(new URL(\"./tsne.worker.js\", import.meta.url), { type: \"module\" });\n    return vizutils.initializeWorker(worker, cache);\n}\n\nexport var changed = false;\n\nfunction core(args, reneighbor) {\n    var nn_out = null;\n    if (reneighbor) {\n        var k = scran.perplexityToNeighbors(args.perplexity);\n        nn_out = vizutils.computeNeighbors(k);\n    }\n\n    // This returns a promise but the message itself is sent synchronously,\n    // which is important to ensure that the t-SNE runs in its worker in\n    // parallel with other analysis steps. Do NOT put the runWithNeighbors\n    // call in a .then() as this may defer the message sending until \n    // the current thread is completely done processing.\n    cache.run = vizutils.runWithNeighbors(worker, args, nn_out, cache);\n    return;\n}\n\nexport function compute(args) {\n    if (!index.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n        return;\n    }\n\n    var reneighbor = index.changed || utils.changedParameters(parameters.perplexity, args.perplexity);\n    core(args, reneighbor);\n\n    parameters = args;\n    delete cache.reloaded;\n    changed = true;\n}\n\n\nexport function results() {\n    return vizutils.retrieveCoordinates(worker, cache);\n}\n\nexport async function serialize() {\n    var contents = await vizutils.retrieveCoordinates(worker, cache);\n    return {\n        \"parameters\": parameters,\n        \"contents\": contents\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\nexport function animate() {\n    if (\"reloaded\" in cache) {\n        var param_copy = { ...parameters };\n        param_copy.animate = true;\n        core(param_copy, true);\n        delete cache.reloaded;\n\n        // Mimicking the response from the re-run.\n        return cache.run\n            .then(contents => {\n                return {\n                    \"type\": \"tsne_rerun\",\n                    \"data\": { \"status\": \"SUCCESS\" }\n                };\n            });\n    } else {\n        return vizutils.sendTask(worker, { \"cmd\": \"RERUN\" }, cache);\n    }\n}\n","import * as vizutils from \"./_utils_viz_parent.js\";\nimport * as index from \"./_neighbor_index.js\";\nimport * as utils from \"./_utils.js\";\n\nvar cache = { \"counter\": 0, \"promises\": {} };\nvar parameters = {};\nvar worker = null;\n\nexport function initialize() {\n    worker = new Worker(new URL(\"./umap.worker.js\", import.meta.url), { type: \"module\" });\n    cache.initialized = vizutils.initializeWorker(worker, cache);\n}\n\nexport var changed = false;\n\nfunction core(args, reneighbor) {\n    var nn_out = null;\n    if (reneighbor) {\n        nn_out = vizutils.computeNeighbors(args.num_neighbors);\n    }\n\n    // This returns a promise but the message itself is sent synchronously,\n    // which is important to ensure that the UMAP runs in its worker in\n    // parallel with other analysis steps. Do NOT put the runWithNeighbors\n    // call in a .then() as this may defer the message sending until \n    // the current thread is completely done processing.\n    cache.run = vizutils.runWithNeighbors(worker, args, nn_out, cache);\n    return;\n}\n\nexport function compute(args) {\n    if (!index.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n        return;\n    }\n\n    var reneighbor = index.changed || utils.changedParameters(parameters.num_neighbors, args.num_neighbors);\n    core(args, reneighbor);\n\n    parameters = args;\n    delete cache.reloaded;\n    changed = true;\n}\n\nexport function results() {\n    return vizutils.retrieveCoordinates(worker, cache);\n}\n\nexport async function serialize() {\n    var contents = await vizutils.retrieveCoordinates(worker, cache);\n    return {\n        \"parameters\": parameters,\n        \"contents\": contents\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\nexport function animate() {\n    if (\"reloaded\" in cache) {\n        var param_copy = { ...parameters };\n        param_copy.animate = true;\n        core(param_copy, true);\n        delete cache.reloaded;\n  \n        // Mimicking the response from the re-run.\n        return cache.run\n            .then(contents => { \n                return {\n                    \"type\": \"umap_rerun\",\n                    \"data\": { \"status\": \"SUCCESS\" }\n                };\n            });\n    } else {\n        return vizutils.sendTask(worker, { \"cmd\": \"RERUN\" }, cache);\n    }\n}\n","export function serializeGroupStats(obj, group) {\n    return {\n        \"means\": obj.means(group),\n        \"detected\": obj.detected(group),\n        \"lfc\": {\n            \"min\": obj.lfc(group, { summary: 0 }),\n            \"mean\": obj.lfc(group, { summary: 1 }),\n            \"min-rank\": obj.lfc(group, { summary: 4 })\n        },\n        \"delta_detected\": {\n            \"min\": obj.deltaDetected(group, { summary: 0 }),\n            \"mean\": obj.deltaDetected(group, { summary: 1 }),\n            \"min-rank\": obj.deltaDetected(group, { summary: 4 })\n        },\n        \"cohen\": {\n            \"min\": obj.cohen(group, { summary: 0 }),\n            \"mean\": obj.cohen(group, { summary: 1 }),\n            \"min-rank\": obj.cohen(group, { summary: 4 })\n        },\n        \"auc\": {\n            \"min\": obj.auc(group, { summary: 0 }),\n            \"mean\": obj.auc(group, { summary: 1 }),\n            \"min-rank\": obj.auc(group, { summary: 4 })\n        }\n    };\n}\n\n/*\n * Helper function to retrieve marker statistics for plotting.\n * This is used both for cluster-specific markers as well as the\n * DE genes that are computed for a custom selection vs the rest.\n */\nexport function fetchGroupResults(results, reloaded, rank_type, group) {\n    if (!rank_type || rank_type === undefined) {\n        rank_type = \"cohen-min-rank\";\n    }\n    var use_reloaded = (reloaded !== undefined);\n\n    var ordering;\n    {\n        // Choosing the ranking statistic. Do NOT do any Wasm allocations\n        // until 'ranking' is fully consumed!\n        let ranking;\n        let increasing = false;\n      \n        if (use_reloaded) {\n            let summary = \"mean\";\n            if (rank_type.match(/-min$/)) {\n                summary = \"min\";\n            } else if (rank_type.match(/-min-rank$/)) {\n                increasing = true;\n                summary = \"min-rank\";\n            }\n      \n            let effect;\n            if (rank_type.match(/^cohen-/)) {\n                effect = \"cohen\";\n            } else if (rank_type.match(/^auc-/)) {\n                effect = \"auc\";\n            } else if (rank_type.match(/^lfc-/)) {\n                effect = \"lfc\";\n            } else if (rank_type.match(/^delta-d-/)) {\n                effect = \"delta_detected\";\n            } else {\n                throw \"unknown rank type '\" + rank_type + \"'\";\n            }\n      \n            ranking = reloaded[group][effect][summary];\n        } else {\n            let index = 1;\n            if (rank_type.match(/-min$/)) {\n                index = 0;\n            } else if (rank_type.match(/-min-rank$/)) {\n                increasing = true;\n                index = 4;\n            }\n\n            if (rank_type.match(/^cohen-/)) {\n                ranking = results.cohen(group, { summary: index, copy: false });\n            } else if (rank_type.match(/^auc-/)) {\n                ranking = results.auc(group, { summary: index, copy: false });\n            } else if (rank_type.match(/^lfc-/)) {\n                ranking = results.lfc(group, { summary: index, copy: false });\n            } else if (rank_type.match(/^delta-d-/)) {\n                ranking = results.deltaDetected(group, { summary: index, copy: false });\n            } else {\n                throw \"unknown rank type '\" + rank_type + \"'\";\n            }\n        }\n      \n        // Computing the ordering based on the ranking statistic.\n        ordering = new Int32Array(ranking.length);\n        for (var i = 0; i < ordering.length; i++) {\n            ordering[i] = i;\n        }\n        if (increasing) {\n            ordering.sort((f, s) => (ranking[f] - ranking[s]));\n        } else {\n            ordering.sort((f, s) => (ranking[s] - ranking[f]));\n        }\n    }\n  \n    // Apply that ordering to each statistic of interest.\n    var reorder = function(stats) {\n        var thing = new Float64Array(stats.length);\n        for (var i = 0; i < ordering.length; i++) {\n            thing[i] = stats[ordering[i]];\n        }\n        return thing;\n    };\n  \n    var stat_detected, stat_mean, stat_lfc, stat_delta_d;\n    if (use_reloaded) {\n        var current = reloaded[group];\n        stat_mean = reorder(current.means);\n        stat_detected = reorder(current.detected);\n        stat_lfc = reorder(current.lfc[\"mean\"]);\n        stat_delta_d = reorder(current.delta_detected[\"mean\"]);\n    } else {\n        stat_detected = reorder(results.detected(group, { copy: false }));\n        stat_mean = reorder(results.means(group, { copy: false }));\n        stat_lfc = reorder(results.lfc(group, { summary: 1, copy: false }));\n        stat_delta_d = reorder(results.deltaDetected(group, { summary: 1, copy: false }));\n    }\n  \n    return {\n        \"ordering\": ordering,\n        \"means\": stat_mean,\n        \"detected\": stat_detected,\n        \"lfc\": stat_lfc,\n        \"delta_detected\": stat_delta_d\n    };\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./_utils.js\";\nimport * as normalization from \"./_normalization.js\";\nimport * as choice from \"./_choose_clustering.js\";\nimport * as markers from \"./_utils_markers.js\";\n\nvar cache = {};\nvar parameters = {};\n\nexport var changed = false;\n\nexport function compute(args) {\n    if (!normalization.changed && !choice.changed && !utils.changedParameters(parameters, args)) {\n        changed = false;\n    } else {\n        utils.freeCache(cache.raw);\n        var mat = normalization.fetchNormalizedMatrix();\n        var clusters = choice.fetchClustersAsWasmArray();\n\n        cache.raw = scran.scoreMarkers(mat, clusters);\n\n        parameters = args;\n        delete cache.reloaded;\n        changed = true;\n    }\n    return;\n}\n\nexport function results() {\n    return {};\n}\n\nexport function serialize() {\n    var contents;\n    if (\"reloaded\" in cache) {\n        contents = cache.reloaded;\n    } else {\n        var contents = [];\n        var num = cache.raw.numberOfGroups();\n        for (var i = 0; i < num; i++) {\n            contents.push(markers.serializeGroupStats(cache.raw, i));\n        }\n    }\n    return {\n        \"parameters\": parameters,\n        \"contents\": contents\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    cache.reloaded = saved.contents;\n    return;\n}\n\nexport function fetchGroupResults(rank_type, group) {\n    return markers.fetchGroupResults(cache.raw, cache.reloaded, rank_type, group); \n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./_utils.js\";\nimport * as filter from \"./_qc_filter.js\";\nimport * as normalization from \"./_normalization.js\";\nimport * as markers from \"./_utils_markers.js\";\n\nvar cache = { \"results\": {} };\nvar parameters = { \"selections\": {} };\n\nexport var changed = false;\n\nexport function compute(args) {\n    /* If the QC filter was re-run, all of the selections are invalidated as\n     * the identity of the indices may have changed.\n     */\n    if (filter.changed) {\n        parameters.selections = {};\n        for (const [key, val] of Object.entries(cache.results)) {\n            utils.freeCache(val.raw);                    \n        }\n        cache.results = {};\n    }\n\n    /*\n     * Technically we would need to re-run detection on the existing selections\n     * if the normalization changed but the QC was the same. In practice, this\n     * never happens, so we'll deal with it later.\n     */\n    \n    changed = true;\n    return;\n}\n\nexport function results() {\n    return {};\n}\n\nexport function serialize() {\n    var results = {};\n    \n    for (const [key, val] of Object.entries(cache.results)) {\n        if (\"reloaded\" in val) {\n            results[key] = val.reloaded;\n        } else {\n            results[key] = markers.serializeGroupStats(val.raw, 1);\n        }\n    }\n    \n    return {\n        \"parameters\": parameters,\n        \"contents\": { \"results\": results }\n    };\n}\n\nexport function unserialize(saved) {\n    parameters = saved.parameters;\n    for (const [key, val] of Object.entries(saved.contents)) {\n        cache.results[key] = { \"reloaded\": val };\n    }\n    return;\n}\n\nexport function addSelection(id, selection) {\n    var mat = normalization.fetchNormalizedMatrix();\n\n    var buffer = utils.allocateCachedArray(mat.numberOfColumns(), \"Int32Array\", cache);\n    buffer.fill(0);\n    var tmp = buffer.array();\n    selection.forEach(element => { tmp[element] = 1; });\n\n    // Assumes that we have at least one cell in and outside the selection!\n    var res = scran.scoreMarkers(mat, buffer); \n  \n    // Removing previous results, if there were any.\n    if (id in cache.results) {\n        utils.freeCache(cache.results[id].raw);\n        delete cache.results[id];\n    }\n  \n    cache.results[id] = { \"raw\": res };\n    parameters.selections[id] = selection;\n}\n\nexport function removeSelection(id) {\n    utils.freeCache(cache.results[id].raw);\n    delete cache.results[id];\n    delete parameters.selections[id];\n}\n\nexport function fetchResults(id, rank_type) {\n    var current = cache.results[id];\n    return markers.fetchGroupResults(current.raw, current.reloaded, rank_type, 1); \n};\n","var kanaDB;\nvar init = null;\n\nexport function initialize() {\n    init = new Promise(resolve => {\n        // initialize database on worker creation\n        kanaDB = indexedDB.open(\"KanaDB\", 2);\n\n        kanaDB.onupgradeneeded = (e) => {\n            var kanaDBClient = e.target.result;\n\n            // Currently purging all existing stores when the version is updated.\n            // At some point we may add a more sophisticated upgrade mechanism.\n            try {\n                kanaDBClient.deleteObjectStore(\"analysis\");\n            } catch (e) {}\n            try {\n                kanaDBClient.deleteObjectStore(\"analysis_meta\");\n            } catch (e) {}\n            try {\n                kanaDBClient.deleteObjectStore(\"file\");\n            } catch (e) {}\n            try {\n                kanaDBClient.deleteObjectStore(\"file_meta\");\n            } catch (e) {}\n\n            kanaDBClient.createObjectStore(\"analysis\", { keyPath: 'id' });\n            kanaDBClient.createObjectStore(\"analysis_meta\", { keyPath: 'id' });\n            kanaDBClient.createObjectStore(\"file\", { keyPath: 'id' });\n            kanaDBClient.createObjectStore(\"file_meta\", { keyPath: 'id' });\n        };\n\n        // Send existing stored analyses, if available.\n        kanaDB.onsuccess = () => {\n            getRecordsResolver(resolve);\n        };\n\n        kanaDB.onerror = () => {\n            resolve(null);\n        };\n    });\n\n    return init;\n}\n\nfunction getRecordsResolver(resolve, store = null) {\n    if (store === null) {\n        store = kanaDB.result\n            .transaction([\"analysis_meta\"], \"readonly\")\n            .objectStore(\"analysis_meta\")\n    }\n\n    var allAnalysis = store.getAll();\n\n    allAnalysis.onsuccess = function () {\n        let vals = allAnalysis.result;\n        vals.forEach(x => { delete x.files }); // no need to transfer that.\n        resolve(vals);\n    };\n    allAnalysis.onerror = function () {\n        resolve(null);\n    };\n}\n\n/** Helper functions **/\nasync function loadContent(id, store) {\n    return new Promise(resolve => {\n        let request = store.get(id);\n        request.onsuccess = function () {\n            if (request.result !== undefined) {\n                resolve(request.result);\n            } else {\n                resolve(null);\n            }\n        };\n        request.onerror = function () {\n            resolve(null);\n        };\n    });\n}\n\nfunction allOK(promises) {\n    return Promise.allSettled(promises)\n        .then(vals => {\n            for (const x of vals) {\n                if (!x) {\n                    return false;\n                }\n            }\n            return true;\n        });\n}\n\nexport async function getRecords() {\n    await init;\n    return new Promise(resolve => {\n        getRecordsResolver(resolve);\n    });\n}\n\n/** Functions to save content **/\nexport async function saveFile(id, buffer) {\n    await init;\n    let trans = kanaDB.result.transaction([\"file\", \"file_meta\"], \"readwrite\");\n    let file_store = trans.objectStore(\"file\");\n    let meta_store = trans.objectStore(\"file_meta\");\n\n    var meta = await loadContent(id, meta_store);\n    var refcount;\n    if (meta === null) {\n        refcount = 0;\n    } else {\n        refcount = meta[\"count\"];\n    }\n    refcount++;\n\n    var data_saving = new Promise(resolve => {\n        var putrequest = file_store.put({ \"id\": id, \"payload\": buffer });\n        putrequest.onsuccess = function (event) {\n            resolve(true);\n        };\n        putrequest.onerror = function (event) {\n            resolve(false);\n        };\n    });\n\n    var ref_saving = new Promise(resolve => {\n        meta.count = refcount;\n        var putrequest = meta_store.put(meta);\n        putrequest.onsuccess = function (event) {\n            resolve(true);\n        };\n        putrequest.onerror = function (event) {\n            resolve(false);\n        };\n    });\n\n    return allOK([data_saving, ref_saving])\n};\n\nexport async function saveAnalysis(id, state, files, title) { \n    await init;\n    let trans = kanaDB.result.transaction([\"analysis\", \"analysis_meta\"], \"readwrite\")\n    let analysis_store = trans.objectStore(\"analysis\");\n    let meta_store = trans.objectStore(\"analysis_meta\");\n\n    if (id == null) {\n        let already = await new Promise(resolve => getRecordsResolver(resolve, meta_store));\n        id = String(already.length);\n    }\n\n    var data_saving = new Promise(resolve => {\n        var putrequest = analysis_store.put({ \"id\": id, \"payload\": state });\n        putrequest.onsuccess = function (event) {\n            resolve(true);\n        };\n        putrequest.onerror = function (event) {\n            resolve(false);\n        };\n    });\n\n    var id_saving = new Promise(resolve => {\n        var putrequest = meta_store.put({ \"id\": id, \"files\": files, \"time\": Number(new Date()), \"title\": title });\n        putrequest.onsuccess = function (event) {\n            resolve(true);\n        };\n        putrequest.onerror = function (event) {\n            resolve(false);\n        };\n    });\n\n    if (await allOK([data_saving, id_saving])) {\n        return id;\n    } else {\n        return null;\n    }\n};\n\n/** Functions to load content **/\nexport async function loadFile(id) {\n    await init;\n    let file_store = kanaDB.result\n        .transaction([\"file\"], \"readonly\")\n        .objectStore(\"file\");\n\n    var meta = await loadContent(id, file_store);\n    return meta[\"payload\"];\n}\n\nexport async function loadAnalysis(id) {\n    await init;\n    let analysis_store = kanaDB.result\n        .transaction([\"analysis\"], \"readonly\")\n        .objectStore(\"analysis\");\n    var meta = await loadContent(id, analysis_store);\n    return meta[\"payload\"];\n}\n\n/** Functions to load content **/\nexport async function removeFile(id) {\n    await init;\n    let trans = kanaDB.result.transaction([\"file\", \"file_meta\"], \"readwrite\");\n    let file_store = trans.objectStore(\"file\");\n    let meta_store = trans.objectStore(\"file_meta\");\n\n    var meta = await loadContent(id, meta_store);\n    var refcount = meta[\"count\"];\n    refcount--;\n    var promises = [];\n\n    if (refcount == 0) {\n        promises.push(new Promise(resolve => {\n            let request = file_store.remove(id);\n            request.onerror = function (event) {\n                resolve(false);\n            };\n            request.onsuccess = function (event) {\n                resolve(true);\n            };\n        }));\n        promises.push(new Promise(resolve => {\n            let request = meta_store.delete(id);\n            request.onerror = function (event) {\n                resolve(false);\n            };\n            request.onsuccess = function (event) {\n                resolve(true);\n            };\n        }))\n    } else {\n        promises.push(new Promise(resolve => {\n            meta.count = refcount;\n            let request = meta_store.put(meta);\n            request.onsuccess = function (event) {\n                resolve(true);\n            };\n            request.onerror = function (event) {\n                resolve(false);\n            };\n        }));\n    }\n\n    return allOK(promises);\n}\n\nexport async function removeAnalysis(id) {\n    await init;\n    let trans = kanaDB.result.transaction([\"analysis\", \"analysis_meta\"], \"readwrite\")\n    let analysis_store = trans.objectStore(\"analysis\");\n    let meta_store = trans.objectStore(\"analysis_meta\");\n\n    var promises = [];\n\n    promises.push(new Promise(resolve => {\n        let request = analysis_store.delete(id);\n        request.onsuccess = function (event) {\n            resolve(true);\n        };\n        request.onerror = function (event) {\n            resolve(false);\n        };\n    }));\n\n    // Removing all files as well.\n    var meta = await loadContent(id, meta_store);\n    for (const f of meta[\"files\"]) {\n        promises.push(removeFile(f));\n    }\n\n    promises.push(new Promise(resolve => {\n        let request = meta_store.delete(id);\n        request.onsuccess = function (event) {\n            resolve(true);\n        };\n        request.onerror = function (event) {\n            resolve(false);\n        };\n    }));\n\n    return allOK(promises);\n}\n","import * as scran from \"scran.js\";\nimport * as inputs from \"./_inputs.js\";\nimport * as metrics from \"./_qc_metrics.js\";\nimport * as thresholds from \"./_qc_thresholds.js\";\nimport * as filter from \"./_qc_filter.js\";\nimport * as normalization from \"./_normalization.js\";\nimport * as variance from \"./_model_gene_var.js\";\nimport * as pca from \"./_pca.js\";\nimport * as index from \"./_neighbor_index.js\";\nimport * as cluster_choice from \"./_choose_clustering.js\";\nimport * as kmeans_cluster from \"./_kmeans_cluster.js\";\nimport * as snn_cluster from \"./_snn_cluster.js\";\nimport * as snn_graph from \"./_snn_graph.js\";\nimport * as snn_neighbors from \"./_snn_neighbors.js\";\nimport * as tsne from \"./_tsne_monitor.js\";\nimport * as umap from \"./_umap_monitor.js\";\nimport * as cluster_markers from \"./_score_markers.js\";\nimport * as custom_markers from \"./_custom_markers.js\";\nimport * as kana_db from \"./KanaDBHandler.js\";\nimport * as utils from \"./_utils.js\";\nimport * as serialize_utils from \"./_utils_serialize.js\";\n\n/***************************************/\n\nfunction postSuccess_(info, step, message) {\n    var transferable = [];\n    utils.extractBuffers(info, transferable);\n    postMessage({\n        type: `${step}_DATA`,\n        resp: info,\n        msg: \"Success: \" + message\n    }, transferable);\n}\n\nfunction runAllSteps(mode = \"run\", state = null) {\n    var response;\n    if (mode === \"serialize\") {\n        response = {};\n    } else {\n        if (state == null) {\n            throw \"'state' must be supplied if 'mode' is not 'serialize'\";\n        }\n        if (mode === \"unserialize\") {\n            console.log(state);\n            response = { \"params\": {} };\n        }\n    }\n  \n    // Creating helper functions.\n    var postSuccess = function (namespace, step, message) {\n        if (namespace.changed || mode == \"unserialize\") {\n            postSuccess_(namespace.results(), step, message);\n        }\n    }\n  \n    var postSuccessAsync = function (namespace, step, message) {\n        if (namespace.changed || mode == \"unserialize\") {\n            namespace.results()\n                .then(res => {\n                    postSuccess_(res, step, message);\n                });\n        }\n    }\n    \n    var addSerialized = function(step, namespace) {\n        let value = namespace.serialize();\n        if (value !== null) {\n            response[step] = value;\n        }\n    };\n  \n    var addParameters = function(name, value, remapped) {\n        let object = response[\"params\"];\n        if (name in object) {\n            for (const [k, v] of Object.entries(value)) {\n                object[name][k] = v;\n            }\n        } else {\n            object[name] = value;\n        }\n    }\n  \n    // Running through all steps.\n    {\n        let step = \"inputs\";\n        if (mode === \"serialize\") {\n            addSerialized(step, inputs);\n        } else {\n            if (mode == \"run\") {\n                inputs.compute({\n                    \"format\": state.files.format,\n                    \"files\": state.files.files\n                });\n            } else {\n                inputs.unserialize(state[step]);\n                response[\"files\"] = {\n                    \"format\": \"kana\",\n                    \"files\": []\n                };\n            }\n            postSuccess(inputs, step, \"Count matrix loaded\");\n        }\n    }\n  \n    {\n        let step = \"quality_control_metrics\";\n        if (mode === \"serialize\") {\n            addSerialized(step, metrics);\n        } else {\n            if (mode == \"run\") {\n                metrics.compute({\n                    \"use_mito_default\": state.params.qc[\"qc-usemitodefault\"],\n                    \"mito_prefix\": state.params.qc[\"qc-mito\"]\n                });\n            } else {\n                metrics.unserialize(state[step]);\n                addParameters(\"qc\", {\n                    \"qc-usemitodefault\": state[step].parameters.use_mito_default,\n                    \"qc-mito\": state[step].parameters.mito_prefix\n                });\n            }\n            postSuccess(metrics, step, \"QC metrics computed\");\n        }\n    }\n  \n    {\n        let step = \"quality_control_thresholds\";\n        if (mode === \"serialize\") {\n            addSerialized(step, thresholds);\n        } else {\n            if (mode == \"run\") {\n                thresholds.compute({\n                    \"nmads\": state.params.qc[\"qc-nmads\"]\n                });\n            } else {\n                thresholds.unserialize(state[step]);\n                addParameters(\"qc\", {\n                    \"qc-nmads\": state[step].parameters.nmads\n                });\n            }\n            postSuccess(thresholds, step, \"QC thresholds computed\");\n        }\n    }\n  \n    {\n        let step = \"quality_control_filtered\";\n        if (mode == \"serialize\") {\n            addSerialized(step, filter);\n        } else {\n            if (mode == \"run\") {\n                filter.compute({});\n            } else {\n                filter.unserialize(state[step]);\n            }\n            postSuccess(filter, step, \"QC filtering completed\");\n        }\n    }\n  \n    {\n        let step = \"normalization\";\n        if (mode == \"serialize\") {\n            addSerialized(step, normalization);\n        } else {\n            if (mode == \"run\") {\n                normalization.compute({});\n            } else {\n                normalization.unserialize(state[step]);\n            }\n            postSuccess(normalization, step, \"Log-normalization completed\");\n        }\n    }\n  \n    {\n        let step = \"feature_selection\";\n        if (mode == \"serialize\") {\n            addSerialized(step, variance);\n        } else {\n            if (mode == \"run\") {\n                variance.compute({\n                    \"span\": state.params.fSelection[\"fsel-span\"]\n                });\n            } else {\n                variance.unserialize(state[step]);\n                addParameters(\"fSelection\", {\n                    \"fsel-span\": state[step].parameters.span\n                });\n            }\n            postSuccess(variance, step, \"Variance modelling completed\");\n        }\n    }\n  \n    {\n        let step = \"pca\";\n        if (mode == \"serialize\") {\n            addSerialized(step, pca);\n        } else {\n            if (mode == \"run\") {\n                pca.compute({\n                    \"num_hvgs\": state.params.pca[\"pca-hvg\"],\n                    \"num_pcs\": state.params.pca[\"pca-npc\"]\n                });\n            } else {\n                pca.unserialize(state[step]);\n                addParameters(\"pca\", {\n                    \"pca-hvg\": state[step].parameters.num_hvgs,\n                    \"pca-npc\": state[step].parameters.num_pcs\n                });\n            }\n            postSuccess(pca, step, \"Principal components analysis completed\");\n        }\n    }\n  \n    {\n        let step = \"neighbor_index\";\n        if (mode == \"serialize\") {\n            addSerialized(step, index);\n        } else {\n            if (mode == \"run\") {\n                index.compute({\n                    \"approximate\": state.params.cluster[\"clus-approx\"]\n                });\n            } else {\n                index.unserialize(state[step]);\n                addParameters(\"cluster\", {\n                    \"clus-approx\": state[step].parameters.approximate\n                });\n            }\n            postSuccess(index, step, \"Neighbor search index constructed\");\n        }\n    }\n\n    // Need to handle promises in serialize(), results() output,\n    // as these are coming from other workers and are inherently async.\n    var tsne_res;\n    {\n        let step = \"tsne\";\n        if (mode == \"serialize\") {\n            tsne_res = tsne.serialize();\n        } else {\n            if (mode == \"run\") {\n                tsne.compute({\n                    \"perplexity\": state.params.tsne[\"tsne-perp\"],\n                    \"iterations\": state.params.tsne[\"tsne-iter\"],\n                    \"animate\": state.params.tsne[\"animate\"]\n                });\n            } else {\n                tsne.unserialize(state[step]);\n                addParameters(\"tsne\", {\n                  \"tsne-perp\": state[step].parameters.perplexity,\n                  \"tsne-iter\": state[step].parameters.iterations,\n                  \"animate\": state[step].parameters.animate\n                });\n            }\n            postSuccessAsync(tsne, step, \"t-SNE completed\");\n        }\n    }\n\n    var umap_res;\n    {\n        let step = \"umap\";\n        if (mode == \"serialize\") {\n            umap_res = umap.serialize();\n        } else {\n            if (mode == \"run\") {\n                umap.compute({\n                    \"num_epochs\": state.params.umap[\"umap-epochs\"],\n                    \"num_neighbors\": state.params.umap[\"umap-nn\"],\n                    \"min_dist\": state.params.umap[\"umap-min_dist\"],\n                    \"animate\": state.params.umap[\"animate\"]\n                });\n            } else {\n                umap.unserialize(state[step]);\n                addParameters(\"umap\", {\n                    \"umap-epochs\": state[step].parameters.num_epochs,\n                    \"umap-nn\": state[step].parameters.num_neighbors,\n                    \"umap-min_dist\": state[step].parameters.min_dist,\n                    \"animate\": state[step].parameters.animate\n                });\n            }\n            postSuccessAsync(umap, step, \"UMAP completed\");\n        }\n    }\n  \n    // Back to normal programming.\n    {\n        let step = \"kmeans_cluster\";\n        if (mode == \"serialize\") {\n            addSerialized(step, kmeans_cluster);\n        } else {\n            if (mode == \"run\") {\n                // Only reporting the method to decide whether to execute this\n                // step; this does not need to be unserialized, as it is \n                // remembered by the choose_clustering step.\n                kmeans_cluster.compute({\n                    \"k\": state.params.cluster[\"kmeans-k\"],\n                    \"cluster_method\": state.params.cluster[\"clus-method\"] \n                });\n            } else {\n                if (step in state) { // clause for back-compatibility with saved analyses.\n                    kmeans_cluster.unserialize(state[step]);\n                    addParameters(\"cluster\", {\n                        \"kmeans-k\": state[step].parameters.k\n                    });\n                }\n            }\n            postSuccess(kmeans_cluster, step, \"K-means clustering completed\");\n        }\n    }\n\n    {\n        let step = \"snn_find_neighbors\";\n        if (mode == \"serialize\") {\n            addSerialized(step, snn_neighbors);\n        } else {\n            if (mode == \"run\") {\n                // Only reporting the method to decide whether to execute this\n                // step; this does not need to be unserialized, as it is \n                // remembered by the choose_clustering step.\n                snn_neighbors.compute({\n                    \"k\": state.params.cluster[\"clus-k\"],\n                    \"cluster_method\": state.params.cluster[\"clus-method\"]\n                });\n            } else {\n                snn_neighbors.unserialize(state[step]);\n                addParameters(\"cluster\", {\n                    \"clus-k\": state[step].parameters.k\n                });\n            }\n            postSuccess(snn_neighbors, step, \"Shared nearest neighbor search completed\");\n        }\n    }\n  \n    {\n        let step = \"snn_build_graph\";\n        if (mode == \"serialize\") {\n            addSerialized(step, snn_graph);\n        } else {\n            if (mode == \"run\") {\n                snn_graph.compute({\n                    \"scheme\": state.params.cluster[\"clus-scheme\"]\n                });\n            } else {\n                snn_graph.unserialize(state[step]);\n                addParameters(\"cluster\", {\n                    \"clus-scheme\": state[step].parameters.scheme\n                });\n            }\n            postSuccess(snn_graph, step, \"Shared nearest neighbor graph constructed\");\n        }\n    }\n  \n    {\n        let step = \"snn_cluster_graph\";\n        if (mode == \"serialize\") {\n            addSerialized(step, snn_cluster);\n        } else {\n            if (mode == \"run\") {\n                snn_cluster.compute({\n                    \"resolution\": state.params.cluster[\"clus-res\"]\n                });\n            } else {\n                snn_cluster.unserialize(state[step]);\n                addParameters(\"cluster\", {\n                    \"clus-res\": state[step].parameters.resolution\n                });\n            }\n            postSuccess(snn_cluster, step, \"Community detection from SNN graph complete\");\n        }\n    }\n\n    {\n        let step = \"choose_clustering\";\n        if (mode == \"serialize\") {\n            addSerialized(step, cluster_choice);\n        } else {\n            if (mode == \"run\") {\n                cluster_choice.compute({\n                    \"method\": state.params.cluster[\"clus-method\"]\n                });\n            } else {\n                cluster_choice.unserialize(state[step]);\n                addParameters(\"cluster\", {\n                    \"clus-method\": state[step].parameters.method\n                });\n            }\n            postSuccess(cluster_choice, step, \"Clustering of interest chosen\");\n        }\n    }\n\n    {\n        let step = \"marker_detection\";\n        if (mode == \"serialize\") {\n            addSerialized(step, cluster_markers);\n        } else {\n            if (mode == \"run\") {\n                cluster_markers.compute({});\n            } else {\n                cluster_markers.unserialize(state[step]);\n            }\n            postSuccess(cluster_markers, step, \"Marker detection complete\");\n        }\n    }\n\n    {\n        let step = \"custom_marker_management\";\n        if (mode == \"serialize\") {\n            addSerialized(step, custom_markers);\n        } else {\n            if (mode == \"run\") {\n                custom_markers.compute({});\n            } else {\n                custom_markers.unserialize(state[step]);\n            }\n            postSuccess(custom_markers, step, \"Pruning of custom markers finished\");\n        }\n    }\n  \n    if (mode == \"serialize\") {\n        console.log(response);\n        return Promise.all([tsne_res, umap_res])\n            .then(done => {\n                response.tsne = done[0];\n                response.umap = done[1];\n                return response;\n            });\n    } else {\n        return response;\n    }\n}\n\n/***************************************/\n\nvar loaded;\nonmessage = function (msg) {\n    const payload = msg.data;\n    if (payload.type == \"INIT\") {\n        let nthreads = Math.round(navigator.hardwareConcurrency * 2 / 3);\n        let scran_init = scran.initialize({ numberOfThreads: nthreads });\n        scran_init \n            .then(x => {\n                postMessage({\n                    type: payload.type,\n                    msg: `Success: ScranJS/WASM initialized`\n                });\n            });\n\n        let kana_init = kana_db.initialize();\n        kana_init\n            .then(result => {\n                if (result !== null) {\n                    postMessage({\n                        type: \"KanaDB_store\",\n                        resp: result,\n                        msg: \"Success\"\n                    });\n                } else {\n                    console.error(error);\n                    postMessage({\n                        type: \"KanaDB_ERROR\",\n                        msg: `Fail: Cannot initialize DB`\n                    });\n                }\n            });\n\n        let tsne_init = tsne.initialize();\n        let umap_init = umap.initialize();\n\n        loaded = Promise.all([\n            scran_init,\n            kana_init,\n            tsne_init,\n            umap_init\n        ]);\n\n    } else if (payload.type == \"RUN\") {\n        loaded\n            .then(x => {\n                runAllSteps(\"run\", payload.payload)\n            })\n            .catch(error => {\n                console.error(error);\n                postMessage({\n                    type: \"run_ERROR\",\n                    msg: error.toString()\n                });\n            });\n\n    /**************** LOADING EXISTING ANALYSES *******************/\n    } else if (payload.type == \"LOAD\") {\n        if (payload.payload.files.format == \"kana\") {\n            const reader = new FileReaderSync();\n            var f = payload.payload.files.files.file[0];\n            loaded\n                .then(async (x) => {\n                    var contents = await serialize_utils.load(reader.readAsArrayBuffer(f));\n                    var response = runAllSteps(\"unserialize\", contents);\n                    postMessage({\n                        type: \"loadedParameters\",\n                        resp: response\n                    });\n                })\n                .catch(error => {\n                    console.error(error);\n                    postMessage({\n                        type: \"load_ERROR\",\n                        msg: error.toString()\n                    });\n                });\n\n        } else if (payload.payload.files.format == \"kanadb\") {\n            var id = payload.payload.files.files.file;\n            kana_db.loadAnalysis(id)\n                .then(async (res) => {\n                    if (res == null) {\n                        postMessage({\n                            type: \"KanaDB_ERROR\",\n                            msg: `Fail: cannot load analysis ID '${id}'`\n                        });\n                    } else {\n                        var contents = await serialize_utils.load(res);\n                        var response = await runAllSteps(\"unserialize\", contents);\n                        postMessage({\n                            type: \"loadedParameters\",\n                            resp: response\n                        });\n                    }\n                })\n                .catch(error => {\n                    console.error(error);\n                    postMessage({\n                        type: \"load_ERROR\",\n                        msg: error.toString()\n                    });\n                });\n        }\n  \n    } else if (payload.type == \"EXPORT\") { // exporting an analysis\n        loaded\n            .then(async (x) => {\n                var state = await runAllSteps(\"serialize\");\n                var output = await serialize_utils.save(state, \"full\");\n                postMessage({\n                    type: \"exportState\",\n                    resp: output,\n                    msg: \"Success: application state exported\"\n                }, [output]);\n            })\n            .catch(error => {\n                console.error(error);\n                postMessage({\n                    type: \"export_ERROR\",\n                    msg: error.toString()\n                });\n            });\n  \n    } else if (payload.type == \"SAVEKDB\") { // save analysis to inbrowser indexedDB \n        var title = payload.payload.title;\n        loaded\n            .then(async (x) => {\n                var state = await runAllSteps(\"serialize\");\n                var output = await serialize_utils.save(state, \"KanaDB\");\n                var id = await kana_db.saveAnalysis(null, output.state, output.file_ids, title);\n                if (id !== null) {\n                    let recs = await kana_db.getRecords();\n                    postMessage({\n                        type: \"KanaDB_store\",\n                        resp: recs,\n                        msg: `Success: Saved analysis to cache (${id})`\n                    });\n                } else {\n                    console.error(error);\n                    postMessage({\n                        type: \"KanaDB_ERROR\",\n                        msg: `Fail: Cannot save analysis to cache (${id})`\n                    });\n                }\n            })\n            .catch(error => {\n                console.error(error);\n                postMessage({\n                    type: \"export_ERROR\",\n                    msg: error.toString()\n                });\n            });\n  \n    } else if (payload.type == \"REMOVEKDB\") { // remove a saved analysis\n        var id = payload.payload.id;\n        kana_db.removeAnalysis(id)\n            .then(async (result) => {\n                if (result) {\n                    let recs = await kana_db.getRecords();\n                    postMessage({\n                        type: \"KanaDB_store\",\n                        resp: recs,\n                        msg: `Success: Removed file from cache (${id})`\n                    });\n                } else {\n                    console.error(error);\n                    postMessage({\n                        type: \"KanaDB_ERROR\",\n                        msg: `fail: cannot remove file from cache (${id})`\n                    });\n                }\n            });\n  \n    /**************** OTHER EVENTS FROM UI *******************/\n    } else if (payload.type == \"getMarkersForCluster\") {\n        loaded.then(x => {\n            let cluster = payload.payload.cluster;\n            let rank_type = payload.payload.rank_type;\n            var resp = cluster_markers.fetchGroupResults(rank_type, cluster);\n      \n            var transferrable = [];\n            utils.extractBuffers(resp, transferrable);\n            postMessage({\n                type: \"setMarkersForCluster\",\n                resp: resp,\n                msg: \"Success: GET_MARKER_GENE done\"\n            }, transferrable);\n        });\n  \n    } else if (payload.type == \"getGeneExpression\") {\n        loaded.then(x => {\n            let row_idx = payload.payload.gene;\n            var vec = normalization.fetchExpression(row_idx);\n            postMessage({\n                type: \"setGeneExpression\",\n                resp: {\n                    gene: row_idx,\n                    expr: vec\n                },\n                msg: \"Success: GET_GENE_EXPRESSION done\"\n            }, [vec.buffer]);\n        });\n  \n    } else if (payload.type == \"computeCustomMarkers\") {\n        loaded.then(x => {\n            custom_markers.addSelection(payload.payload.id, payload.payload.selection);\n            postMessage({\n                type: \"computeCustomMarkers\",\n                msg: \"Success: COMPUTE_CUSTOM_MARKERS done\"\n            });\n        });\n  \n    } else if (payload.type == \"getMarkersForSelection\") {\n        loaded.then(x => {\n            var resp = custom_markers.fetchResults(payload.payload.cluster, payload.payload.rank_type);\n            var transferrable = [];\n            utils.extractBuffers(resp, transferrable);\n            postMessage({\n                type: \"setMarkersForCustomSelection\",\n                resp: resp,\n                msg: \"Success: GET_MARKER_GENE done\"\n            }, transferrable);\n        });\n  \n    } else if (payload.type == \"removeCustomMarkers\") {\n        loaded.then(x => {\n            custom_markers.removeSelection(payload.payload.id);\n        });\n  \n    } else if (payload.type == \"animateTSNE\") {\n        loaded.then(async (x) => {\n            await tsne.animate();\n            var res = await tsne.results();\n            postSuccess_(res, \"tsne\", \"Resending t-SNE coordinates\");\n        });\n  \n    } else if (payload.type == \"animateUMAP\") {\n        loaded.then(async (x) => {\n            await umap.animate();\n            var res = await umap.results();\n            postSuccess_(res, \"umap\", \"Resending UMAP coordinates\");\n        });\n\n    } else if (payload.type == \"getAnnotation\") {\n        loaded.then(x => {\n            let annot = payload.payload.annotation;\n            var vec = inputs.fetchAnnotations(annot);\n            postMessage({\n                type: \"setAnnotation\",\n                resp: {\n                    annotation: annot,\n                    values: {\n                        \"index\": vec.index,\n                        \"factor\": vec.factor\n                    }\n                },\n                msg: \"Success: GET_ANNOTATION done\"\n            }, [vec.factor.buffer]);\n        });\n  \n    } else {\n        console.error(\"MIM:::msg type incorrect\")\n    }\n}\n","import * as pako from \"pako\";\nimport * as hashwasm from \"hash-wasm\";\nimport * as kana_db from \"./KanaDBHandler.js\";\n\n// Must be integers!\nconst FORMAT_EMBEDDED_FILES = 0;\nconst FORMAT_EXTERNAL_KANADB = 1;\nconst FORMAT_VERSION = 0;\n\nfunction normalizeTypedArrays(object) {\n    if (Array.isArray(object)) {\n        for (var i = 0; i < object.length; i++) {\n            object[i] = normalizeTypedArrays(object[i]);\n        }\n    } else if (ArrayBuffer.isView(object)) {\n        object = { \n            \"_TypedArray_class\": object.constructor.name, \n            \"_TypedArray_values\": Array.from(object) \n        };\n    } else if (object instanceof Object) {\n        // This MUST be after the previous clause, as otherwise\n        // a TypedArray is an object and is incorrectly handled. \n        for (const [key, element] of Object.entries(object)) {\n            object[key] = normalizeTypedArrays(element);\n        }\n    }\n    return object;\n}\n\nfunction recoverTypedArrays(object) {\n    if (Array.isArray(object)) {\n        for (var i = 0; i < object.length; i++) {\n            object[i] = recoverTypedArrays(object[i]);\n        }\n    } else if (object instanceof Object) {\n        if (\"_TypedArray_class\" in object) {\n            var cls = object[[\"_TypedArray_class\"]];\n            var vals = object[[\"_TypedArray_values\"]];\n            switch (cls) {\n                case \"Uint8Array\":\n                    object = new Uint8Array(vals.length);\n                    break;\n                case \"Int8Array\":\n                    object = new Int8Array(vals.length);\n                    break;\n                case \"Uint8Array\":\n                    object = new Uint8Array(vals.length);\n                    break;\n                case \"Uint16Array\":\n                    object = new Uint16Array(vals.length);\n                    break;\n                case \"Int16Array\":\n                    object = new Int16Array(vals.length);\n                    break;\n                case \"Uint32Array\":\n                    object = new Uint32Array(vals.length);\n                    break;\n                case \"Int32Array\":\n                    object = new Int32Array(vals.length);\n                    break;\n                case \"Uint64Array\":\n                    object = new Uint64Array(vals.length);\n                    break;\n                case \"Int64Array\":\n                    object = new Int64Array(vals.length);\n                    break;\n                case \"Float32Array\":\n                    object = new Float32Array(vals.length);\n                    break;\n                case \"Float64Array\":\n                    object = new Float64Array(vals.length);\n                    break;\n                default:\n                    throw \"unrecognized TypedArray class '\" + cls;\n            }\n            object.set(vals);\n        } else {\n            for (const [key, element] of Object.entries(object)) {\n                object[key] = recoverTypedArrays(element);\n            }\n        }\n    } \n    return object;\n}\n\nfunction numberToBuffer(number) {\n    // Store as little-endian. Probably safer\n    // than trying to cast it from a Uint64Array;\n    // not sure that endianness is strictly defined.\n    var output = new Uint8Array(8);\n\n    var i = 0;\n    while (number > 0) {\n        output[i] = number % 256;\n        number = Math.floor(number / 256);\n        i++;\n    }\n\n    return output;\n}\n\nfunction bufferToNumber(buffer) {\n    var output = 0;\n    var multiplier = 1;\n    for (const x of buffer) {\n        output += multiplier * x;\n        multiplier *= 256;\n    }\n    return output;\n}\n\nexport async function save(contents, mode = \"full\") {\n    // Extract out the file buffers.\n    var buffered = contents.inputs.parameters.files;\n    var all_buffers = [];\n    var total_len = 0;\n    var format_type;\n\n    if (mode == \"full\") {\n        format_type = FORMAT_EMBEDDED_FILES;\n        buffered.forEach((x, i) => {\n            var val = x.buffer;\n            all_buffers.push(val);\n            buffered[i].buffer = { \"offset\": total_len, \"size\": val.byteLength };\n            total_len += val.byteLength;\n        });\n\n    } else if (mode == \"KanaDB\") {\n        // Saving the files to IndexedDB instead. 'all_buffers' now holds a promise\n        // indicating whether all of these things were saved properly.\n        format_type = FORMAT_EXTERNAL_KANADB;\n        for (const x of buffered) {\n            var md5 = await hashwasm.md5(new Uint8Array(x.buffer));\n            var id = x.type + \"_\" + x.name + \"_\" + x.buffer.byteLength + \"_\" + md5;\n            var ok = await kana_db.saveFile(id, x.buffer);\n            if (!ok) {\n                throw \"failed to save file '\" + id + \"' to KanaDB\";\n            }\n            x.buffer = id;\n            all_buffers.push(id);\n        }\n\n    } else {\n        throw \"unsupported mode \" + mode;\n    }\n\n    // Converting all other TypedArrays to normal arrays.\n    contents = normalizeTypedArrays(contents);\n\n    // Converting the JSON to a string and gzipping it into a Uint8Array.\n    var json_str = JSON.stringify(contents);\n    const json_view = pako.gzip(json_str);\n\n    // Allocating a huge arrayBuffer.\n    var combined = new ArrayBuffer(24 + json_view.length + total_len);\n    var combined_arr = new Uint8Array(combined);\n    var offset = 0;\n\n    let format = numberToBuffer(format_type);\n    combined_arr.set(format, offset); \n    offset += format.length;\n\n    let version = numberToBuffer(FORMAT_VERSION);\n    combined_arr.set(version, offset); \n    offset += version.length;\n\n    let json_len = numberToBuffer(json_view.length);\n    combined_arr.set(json_len, offset); \n    offset += json_len.length;\n\n    if (offset != 24) {\n        throw \"oops - accounting error in the serialization code!\";\n    }\n\n    combined_arr.set(json_view, offset);\n    offset += json_view.length;\n\n    if (mode == \"full\") {\n        for (const buf of all_buffers) {\n            const tmp = new Uint8Array(buf);\n            combined_arr.set(tmp, offset);\n            offset += tmp.length;\n        }\n        return combined;\n\n    } else if (mode == \"KanaDB\") {\n        return { \"file_ids\": all_buffers, \"state\": combined };\n\n    } else {\n        throw \"unsupported mode \" + mode;\n    }\n}\n\nexport async function load(buffer) {\n    var offset = 0;\n    var format = bufferToNumber(new Uint8Array(buffer, offset, 8));\n    offset += 8;\n\n    var version = bufferToNumber(new Uint8Array(buffer, offset, 8));\n    offset += 8;\n\n    var json_len = bufferToNumber(new Uint8Array(buffer, offset, 8));\n    offset += 8;\n\n    var contents = pako.ungzip(new Uint8Array(buffer, offset, json_len), { \"to\": \"string\" });\n    contents = JSON.parse(contents);\n    contents = recoverTypedArrays(contents);\n    offset += json_len;\n\n    var buffered = contents.inputs.parameters.files;\n    if (format == FORMAT_EMBEDDED_FILES) {\n        buffered.forEach((x, i) => {\n            var details = x.buffer;\n            var target = new Uint8Array(buffer, offset + details.offset, details.size);\n            var tmp = new ArrayBuffer(details.size);\n            (new Uint8Array(tmp)).set(target);\n            buffered[i].buffer = tmp;\n        });\n\n    } else if (format == FORMAT_EXTERNAL_KANADB) {\n        var collected = [];\n        buffered.forEach((x, i) => {\n            var id = x.buffer;\n            collected.push(kana_db.loadFile(id));\n        });\n  \n        var resolved = await Promise.all(collected);\n        buffered.forEach((x, i) => {\n            if (resolved[i] === null) {\n                throw \"KanaDB loading failed for file ID '\" + x.buffer + \"'\";\n            }\n            x.buffer = resolved[i];\n        });\n\n    } else {\n        throw \"unsupported format type\";\n    }\n \n    return contents;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [5,555], function() { return __webpack_require__(7729); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + {\"5\":\"b33c5a86\",\"139\":\"c0062d85\",\"495\":\"6e174be4\",\"555\":\"860011ac\",\"653\":\"2b6f1043\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/kana/\";","__webpack_require__.b = self.location + \"/../../../\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t729: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkkana\"] = self[\"webpackChunkkana\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn Promise.all([\n\t\t__webpack_require__.e(5),\n\t\t__webpack_require__.e(555)\n\t]).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["freeCache","object","undefined","free","e","freeReloaded","cache","Object","entries","reloaded","v","wa","changedParameters","x","y","JSON","stringify","computeRange","arr","max","Infinity","min","forEach","allocateCachedArray","size","type","name","reallocate","candidate","constructor","className","scran","extractBuffers","store","Array","isArray","ArrayBuffer","isView","buffer","push","isObject","parameters","abbreviated","changed","dummyGenes","numberOfRows","genes","i","guessFeatureType","gene_info_type","gene_info","fetchGenes","key","val","gene_types","readDSVFromBuffer","content","fname","delim","ext","split","pop","pako","dec","TextDecoder","decoded","decode","tsv","d3","parsed","parseRows","loadMatrixMarketRaw","files","utils","matrix","first_mtx","filter","contents","Uint8Array","is_compressed","genes_file","length","ids","symb","annotations_file","diff","numberOfColumns","headerFlag","headers","shift","annotations","map","load10XRaw","first_file","tmppath","objects","fobjects","id","names","loadH5ADRaw","vobjects","match","bobjects","bobj_factors","bobj_index","loadHDF5","args","format","reader","FileReaderSync","it","bufferFun","formatted","f","readAsArrayBuffer","file","compute","mtx","gene","barcode","loadMatrixMarket","results","output","fetchDimensions","keys","serialize","num_cells","parameters2","unserialize","saved","fetchCountMatrix","values","fetchAnnotations","col","annots","asize","uvals","uTypedAray","mito","ensembl","Set","symbol","rawCompute","raw","subsets","mat","inputs","fill","sub_arr","array","use_mito_default","has","lower_mito","mito_prefix","toLowerCase","startsWith","fetchResults","data","qc_output","sums","slice","detected","proportion","subsetProportions","ranges","fetchQCMetrics","fetchSums","unsafe","copy","metrics","stats","numberOfMADs","nmads","obj","thresholdsSums","thresholdsDetected","thresholdsSubsetProportions","discards","fetchDiscards","tmp","set","fetchDiscardsAsWasmArray","discardOverall","out","disc","thresholds","fetchRetained","retained","fetchFilteredMatrix","size_factors","j","sizeFactors","fetchNormalizedMatrix","fetchExpression","index","row","normalization","span","sorted_residuals","residuals","sort","means","vars","fitted","resids","model_output","variances","spawnStats","fetchSortedResiduals","fetchResiduals","fetchPCsAsWasmArray","pcs","principalComponents","variance","sorted_resids","threshold_at","num_hvgs","sub","unsorted_resids","element","features","numberOfPCs","num_pcs","var_exp","pca_output","varianceExplained","total_var","totalVariance","to_save","fetchPCs","pca","numberOfDims","numberOfCells","num_obs","fetchIndex","nn_index","k","method","cluster_method","fetchNeighbors","res","neighbors","scheme","fetchGraph","fetchClustersAsWasmArray","clusters","membership","graph","g","resolution","initMethod","snn_cluster","kmeans_cluster","computeNeighbors","rbuf","ibuf","dbuf","runs","indices","distances","sendTask","worker","payload","transferrable","counter","p","Promise","resolve","reject","promises","postMessage","initializeWorker","onmessage","msg","endsWith","iteration","fun","error","runWithNeighbors","nn_out","run_msg","retrieveCoordinates","run","then","initialize","vizutils","Worker","URL","core","reneighbor","perplexity","animate","param_copy","initialized","num_neighbors","serializeGroupStats","group","lfc","summary","deltaDetected","cohen","auc","fetchGroupResults","rank_type","ordering","ranking","use_reloaded","increasing","effect","Int32Array","s","stat_detected","stat_mean","stat_lfc","stat_delta_d","reorder","thing","Float64Array","current","delta_detected","choice","num","numberOfGroups","markers","kanaDB","selections","addSelection","selection","removeSelection","init","getRecordsResolver","result","transaction","objectStore","allAnalysis","getAll","onsuccess","vals","onerror","loadContent","request","get","allOK","allSettled","getRecords","saveFile","trans","file_store","meta_store","meta","refcount","data_saving","putrequest","put","event","ref_saving","count","saveAnalysis","state","title","analysis_store","already","String","id_saving","Number","Date","loadFile","removeFile","remove","delete","loaded","normalizeTypedArrays","from","recoverTypedArrays","cls","Int8Array","Uint16Array","Int16Array","Uint32Array","Uint64Array","Int64Array","Float32Array","numberToBuffer","number","Math","floor","bufferToNumber","multiplier","save","mode","buffered","all_buffers","total_len","format_type","byteLength","hashwasm","md5","kana_db","json_str","json_view","combined","combined_arr","offset","version","json_len","buf","load","parse","details","target","collected","all","resolved","postSuccess_","info","step","message","transferable","resp","runAllSteps","response","console","log","postSuccess","namespace","postSuccessAsync","addSerialized","value","addParameters","remapped","params","qc","fSelection","tsne_res","cluster","approximate","umap_res","tsne","iterations","umap","num_epochs","min_dist","snn_neighbors","snn_graph","cluster_choice","cluster_markers","custom_markers","done","nthreads","round","navigator","hardwareConcurrency","scran_init","numberOfThreads","kana_init","indexedDB","open","onupgradeneeded","kanaDBClient","deleteObjectStore","createObjectStore","keyPath","tsne_init","umap_init","catch","toString","serialize_utils","file_ids","recs","row_idx","vec","expr","annot","annotation","factor","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","fulfilled","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","chunkId","reduce","u","miniCssF","globalThis","this","Function","window","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","b","self","location","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","next"],"sourceRoot":""}